/*-- Last Change Revision: $Rev: 2028009 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:43:56 +0100 (ter, 02 ago 2022) $*/

CREATE OR REPLACE PACKAGE BODY ts_discharge_notes_follow_up
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: Maio 22, 2009 17:55:32
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_discharge_notes_in  IN discharge_notes_follow_up.id_discharge_notes%TYPE,
        id_follow_up_with_in   IN discharge_notes_follow_up.id_follow_up_with%TYPE,
        id_follow_up_entity_in IN discharge_notes_follow_up.id_follow_up_entity%TYPE,
        follow_up_with_text_in IN discharge_notes_follow_up.follow_up_with_text%TYPE DEFAULT NULL,
        id_prof_create_in      IN discharge_notes_follow_up.id_prof_create%TYPE DEFAULT NULL,
        dt_creation_in         IN discharge_notes_follow_up.dt_creation%TYPE DEFAULT NULL,
        follow_up_in_in        IN discharge_notes_follow_up.follow_up_in%TYPE DEFAULT NULL,
        id_follow_up_type_in   IN discharge_notes_follow_up.id_follow_up_type%TYPE DEFAULT NULL,
        create_user_in         IN discharge_notes_follow_up.create_user%TYPE DEFAULT NULL,
        create_time_in         IN discharge_notes_follow_up.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN discharge_notes_follow_up.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN discharge_notes_follow_up.update_user%TYPE DEFAULT NULL,
        update_time_in         IN discharge_notes_follow_up.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN discharge_notes_follow_up.update_institution%TYPE DEFAULT NULL,
        notes_in               IN discharge_notes_follow_up.notes%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO discharge_notes_follow_up
            (id_discharge_notes,
             id_follow_up_with,
             id_follow_up_entity,
             follow_up_with_text,
             id_prof_create,
             dt_creation,
             follow_up_in,
             id_follow_up_type,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             notes)
        VALUES
            (id_discharge_notes_in,
             id_follow_up_with_in,
             id_follow_up_entity_in,
             follow_up_with_text_in,
             id_prof_create_in,
             dt_creation_in,
             follow_up_in_in,
             id_follow_up_type_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             notes_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'DISCHARGE_NOTES_FOLLOW_UP');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DISCHARGE_NOTES_FOLLOW_UP');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DISCHARGE_NOTES_FOLLOW_UP');
                    IF l_name = 'DNU_FU_ENTITY_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_FOLLOW_UP_ENTITY',
                                                        value_in           => id_follow_up_entity_in);
                    END IF;
                    IF l_name = 'DNU_FUP_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_FOLLOW_UP_TYPE',
                                                        value_in           => id_follow_up_type_in);
                    END IF;
                    IF l_name = 'DNU_PROF_CREATE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_CREATE',
                                                        value_in           => id_prof_create_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_discharge_notes_in  IN discharge_notes_follow_up.id_discharge_notes%TYPE,
        id_follow_up_with_in   IN discharge_notes_follow_up.id_follow_up_with%TYPE,
        id_follow_up_entity_in IN discharge_notes_follow_up.id_follow_up_entity%TYPE,
        follow_up_with_text_in IN discharge_notes_follow_up.follow_up_with_text%TYPE DEFAULT NULL,
        id_prof_create_in      IN discharge_notes_follow_up.id_prof_create%TYPE DEFAULT NULL,
        dt_creation_in         IN discharge_notes_follow_up.dt_creation%TYPE DEFAULT NULL,
        follow_up_in_in        IN discharge_notes_follow_up.follow_up_in%TYPE DEFAULT NULL,
        id_follow_up_type_in   IN discharge_notes_follow_up.id_follow_up_type%TYPE DEFAULT NULL,
        create_user_in         IN discharge_notes_follow_up.create_user%TYPE DEFAULT NULL,
        create_time_in         IN discharge_notes_follow_up.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN discharge_notes_follow_up.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN discharge_notes_follow_up.update_user%TYPE DEFAULT NULL,
        update_time_in         IN discharge_notes_follow_up.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN discharge_notes_follow_up.update_institution%TYPE DEFAULT NULL,
        notes_in               IN discharge_notes_follow_up.notes%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_discharge_notes_in  => id_discharge_notes_in,
            id_follow_up_with_in   => id_follow_up_with_in,
            id_follow_up_entity_in => id_follow_up_entity_in,
            follow_up_with_text_in => follow_up_with_text_in,
            id_prof_create_in      => id_prof_create_in,
            dt_creation_in         => dt_creation_in,
            follow_up_in_in        => follow_up_in_in,
            id_follow_up_type_in   => id_follow_up_type_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            notes_in               => notes_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN discharge_notes_follow_up%ROWTYPE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec discharge_notes_follow_up%ROWTYPE := rec_in;
    BEGIN
        ins(id_discharge_notes_in  => l_rec.id_discharge_notes,
            id_follow_up_with_in   => l_rec.id_follow_up_with,
            id_follow_up_entity_in => l_rec.id_follow_up_entity,
            follow_up_with_text_in => l_rec.follow_up_with_text,
            id_prof_create_in      => l_rec.id_prof_create,
            dt_creation_in         => l_rec.dt_creation,
            follow_up_in_in        => l_rec.follow_up_in,
            id_follow_up_type_in   => l_rec.id_follow_up_type,
            create_user_in         => l_rec.create_user,
            create_time_in         => l_rec.create_time,
            create_institution_in  => l_rec.create_institution,
            update_user_in         => l_rec.update_user,
            update_time_in         => l_rec.update_time,
            update_institution_in  => l_rec.update_institution,
            notes_in               => l_rec.notes,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN discharge_notes_follow_up%ROWTYPE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in => rec_in, sequence_in => sequence_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END ins;

    PROCEDURE ins
    (
        rows_in         IN discharge_notes_follow_up_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.COUNT = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.FIRST .. rows_in.LAST SAVE EXCEPTIONS
                INSERT INTO discharge_notes_follow_up
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_INDEX,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_CODE,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_DISCHARGE_NOTES _' || indx,
                                                        value_in           => rows_in(indx).id_discharge_notes,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_FOLLOW_UP_WITH _' || indx,
                                                        value_in           => rows_in(indx).id_follow_up_with,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_FOLLOW_UP_ENTITY _' || indx,
                                                        value_in           => rows_in(indx).id_follow_up_entity,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FOLLOW_UP_WITH_TEXT _' || indx,
                                                        value_in           => rows_in(indx).follow_up_with_text,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_CREATE _' || indx,
                                                        value_in           => rows_in(indx).id_prof_create,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_CREATION _' || indx,
                                                        value_in           => rows_in(indx).dt_creation,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FOLLOW_UP_IN _' || indx,
                                                        value_in           => rows_in(indx).follow_up_in,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_FOLLOW_UP_TYPE _' || indx,
                                                        value_in           => rows_in(indx).id_follow_up_type,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(indx).create_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).create_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).create_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_USER _' || indx,
                                                        value_in           => rows_in(indx).update_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).update_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).update_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NOTES _' || indx,
                                                        value_in           => rows_in(indx).notes,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'DISCHARGE_NOTES_FOLLOW_UP',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.COUNT);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN discharge_notes_follow_up_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_discharge_notes_in   IN discharge_notes_follow_up.id_discharge_notes%TYPE,
        id_follow_up_with_in    IN discharge_notes_follow_up.id_follow_up_with%TYPE,
        id_follow_up_entity_in  IN discharge_notes_follow_up.id_follow_up_entity%TYPE,
        follow_up_with_text_in  IN discharge_notes_follow_up.follow_up_with_text%TYPE DEFAULT NULL,
        follow_up_with_text_nin IN BOOLEAN := TRUE,
        id_prof_create_in       IN discharge_notes_follow_up.id_prof_create%TYPE DEFAULT NULL,
        id_prof_create_nin      IN BOOLEAN := TRUE,
        dt_creation_in          IN discharge_notes_follow_up.dt_creation%TYPE DEFAULT NULL,
        dt_creation_nin         IN BOOLEAN := TRUE,
        follow_up_in_in         IN discharge_notes_follow_up.follow_up_in%TYPE DEFAULT NULL,
        follow_up_in_nin        IN BOOLEAN := TRUE,
        id_follow_up_type_in    IN discharge_notes_follow_up.id_follow_up_type%TYPE DEFAULT NULL,
        id_follow_up_type_nin   IN BOOLEAN := TRUE,
        create_user_in          IN discharge_notes_follow_up.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN discharge_notes_follow_up.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN discharge_notes_follow_up.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN discharge_notes_follow_up.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN discharge_notes_follow_up.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN discharge_notes_follow_up.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        notes_in                IN discharge_notes_follow_up.notes%TYPE DEFAULT NULL,
        notes_nin               IN BOOLEAN := TRUE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                IN OUT table_varchar
    ) IS
        l_rows_out              table_varchar;
        l_follow_up_with_text_n NUMBER(1);
        l_id_prof_create_n      NUMBER(1);
        l_dt_creation_n         NUMBER(1);
        l_follow_up_in_n        NUMBER(1);
        l_id_follow_up_type_n   NUMBER(1);
        l_create_user_n         NUMBER(1);
        l_create_time_n         NUMBER(1);
        l_create_institution_n  NUMBER(1);
        l_update_user_n         NUMBER(1);
        l_update_time_n         NUMBER(1);
        l_update_institution_n  NUMBER(1);
        l_notes_n               NUMBER(1);
    BEGIN
    
        l_follow_up_with_text_n := sys.diutil.bool_to_int(follow_up_with_text_nin);
        l_id_prof_create_n      := sys.diutil.bool_to_int(id_prof_create_nin);
        l_dt_creation_n         := sys.diutil.bool_to_int(dt_creation_nin);
        l_follow_up_in_n        := sys.diutil.bool_to_int(follow_up_in_nin);
        l_id_follow_up_type_n   := sys.diutil.bool_to_int(id_follow_up_type_nin);
        l_create_user_n         := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n         := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n  := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n         := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n         := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n  := sys.diutil.bool_to_int(update_institution_nin);
        l_notes_n               := sys.diutil.bool_to_int(notes_nin);
    
        UPDATE discharge_notes_follow_up
           SET follow_up_with_text = decode(l_follow_up_with_text_n,
                                            0,
                                            follow_up_with_text_in,
                                            nvl(follow_up_with_text_in, follow_up_with_text)),
               id_prof_create      = decode(l_id_prof_create_n,
                                            0,
                                            id_prof_create_in,
                                            nvl(id_prof_create_in, id_prof_create)),
               dt_creation         = decode(l_dt_creation_n, 0, dt_creation_in, nvl(dt_creation_in, dt_creation)),
               follow_up_in        = decode(l_follow_up_in_n, 0, follow_up_in_in, nvl(follow_up_in_in, follow_up_in)),
               id_follow_up_type   = decode(l_id_follow_up_type_n,
                                            0,
                                            id_follow_up_type_in,
                                            nvl(id_follow_up_type_in, id_follow_up_type)),
               create_user         = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time         = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution  = decode(l_create_institution_n,
                                            0,
                                            create_institution_in,
                                            nvl(create_institution_in, create_institution)),
               update_user         = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time         = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution  = decode(l_update_institution_n,
                                            0,
                                            update_institution_in,
                                            nvl(update_institution_in, update_institution)),
               notes               = decode(l_notes_n, 0, notes_in, nvl(notes_in, notes))
         WHERE id_discharge_notes = id_discharge_notes_in
           AND id_follow_up_with = id_follow_up_with_in
           AND id_follow_up_entity = id_follow_up_entity_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'DISCHARGE_NOTES_FOLLOW_UP');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DISCHARGE_NOTES_FOLLOW_UP');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DISCHARGE_NOTES_FOLLOW_UP');
                    IF l_name = 'DNU_FU_ENTITY_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_FOLLOW_UP_ENTITY',
                                                        value_in           => id_follow_up_entity_in);
                    END IF;
                    IF l_name = 'DNU_FUP_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_FOLLOW_UP_TYPE',
                                                        value_in           => id_follow_up_type_in);
                    END IF;
                    IF l_name = 'DNU_PROF_CREATE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_CREATE',
                                                        value_in           => id_prof_create_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_discharge_notes_in   IN discharge_notes_follow_up.id_discharge_notes%TYPE,
        id_follow_up_with_in    IN discharge_notes_follow_up.id_follow_up_with%TYPE,
        id_follow_up_entity_in  IN discharge_notes_follow_up.id_follow_up_entity%TYPE,
        follow_up_with_text_in  IN discharge_notes_follow_up.follow_up_with_text%TYPE DEFAULT NULL,
        follow_up_with_text_nin IN BOOLEAN := TRUE,
        id_prof_create_in       IN discharge_notes_follow_up.id_prof_create%TYPE DEFAULT NULL,
        id_prof_create_nin      IN BOOLEAN := TRUE,
        dt_creation_in          IN discharge_notes_follow_up.dt_creation%TYPE DEFAULT NULL,
        dt_creation_nin         IN BOOLEAN := TRUE,
        follow_up_in_in         IN discharge_notes_follow_up.follow_up_in%TYPE DEFAULT NULL,
        follow_up_in_nin        IN BOOLEAN := TRUE,
        id_follow_up_type_in    IN discharge_notes_follow_up.id_follow_up_type%TYPE DEFAULT NULL,
        id_follow_up_type_nin   IN BOOLEAN := TRUE,
        create_user_in          IN discharge_notes_follow_up.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN discharge_notes_follow_up.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN discharge_notes_follow_up.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN discharge_notes_follow_up.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN discharge_notes_follow_up.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN discharge_notes_follow_up.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        notes_in                IN discharge_notes_follow_up.notes%TYPE DEFAULT NULL,
        notes_nin               IN BOOLEAN := TRUE,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_discharge_notes_in   => id_discharge_notes_in,
            id_follow_up_with_in    => id_follow_up_with_in,
            id_follow_up_entity_in  => id_follow_up_entity_in,
            follow_up_with_text_in  => follow_up_with_text_in,
            follow_up_with_text_nin => follow_up_with_text_nin,
            id_prof_create_in       => id_prof_create_in,
            id_prof_create_nin      => id_prof_create_nin,
            dt_creation_in          => dt_creation_in,
            dt_creation_nin         => dt_creation_nin,
            follow_up_in_in         => follow_up_in_in,
            follow_up_in_nin        => follow_up_in_nin,
            id_follow_up_type_in    => id_follow_up_type_in,
            id_follow_up_type_nin   => id_follow_up_type_nin,
            create_user_in          => create_user_in,
            create_user_nin         => create_user_nin,
            create_time_in          => create_time_in,
            create_time_nin         => create_time_nin,
            create_institution_in   => create_institution_in,
            create_institution_nin  => create_institution_nin,
            update_user_in          => update_user_in,
            update_user_nin         => update_user_nin,
            update_time_in          => update_time_in,
            update_time_nin         => update_time_nin,
            update_institution_in   => update_institution_in,
            update_institution_nin  => update_institution_nin,
            notes_in                => notes_in,
            notes_nin               => notes_nin,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    END upd;

    PROCEDURE upd
    (
        follow_up_with_text_in  IN discharge_notes_follow_up.follow_up_with_text%TYPE DEFAULT NULL,
        follow_up_with_text_nin IN BOOLEAN := TRUE,
        id_prof_create_in       IN discharge_notes_follow_up.id_prof_create%TYPE DEFAULT NULL,
        id_prof_create_nin      IN BOOLEAN := TRUE,
        dt_creation_in          IN discharge_notes_follow_up.dt_creation%TYPE DEFAULT NULL,
        dt_creation_nin         IN BOOLEAN := TRUE,
        follow_up_in_in         IN discharge_notes_follow_up.follow_up_in%TYPE DEFAULT NULL,
        follow_up_in_nin        IN BOOLEAN := TRUE,
        id_follow_up_type_in    IN discharge_notes_follow_up.id_follow_up_type%TYPE DEFAULT NULL,
        id_follow_up_type_nin   IN BOOLEAN := TRUE,
        create_user_in          IN discharge_notes_follow_up.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN discharge_notes_follow_up.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN discharge_notes_follow_up.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN discharge_notes_follow_up.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN discharge_notes_follow_up.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN discharge_notes_follow_up.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        notes_in                IN discharge_notes_follow_up.notes%TYPE DEFAULT NULL,
        notes_nin               IN BOOLEAN := TRUE,
        where_in                VARCHAR2 DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                IN OUT table_varchar
    ) IS
        l_sql                   VARCHAR2(32767);
        l_rows_out              table_varchar;
        l_follow_up_with_text_n NUMBER(1);
        l_id_prof_create_n      NUMBER(1);
        l_dt_creation_n         NUMBER(1);
        l_follow_up_in_n        NUMBER(1);
        l_id_follow_up_type_n   NUMBER(1);
        l_create_user_n         NUMBER(1);
        l_create_time_n         NUMBER(1);
        l_create_institution_n  NUMBER(1);
        l_update_user_n         NUMBER(1);
        l_update_time_n         NUMBER(1);
        l_update_institution_n  NUMBER(1);
        l_notes_n               NUMBER(1);
        id_discharge_notes_in   discharge_notes_follow_up.id_discharge_notes%TYPE;
        id_follow_up_with_in    discharge_notes_follow_up.id_follow_up_with%TYPE;
        id_follow_up_entity_in  discharge_notes_follow_up.id_follow_up_entity%TYPE;
    BEGIN
    
        l_follow_up_with_text_n := sys.diutil.bool_to_int(follow_up_with_text_nin);
        l_id_prof_create_n      := sys.diutil.bool_to_int(id_prof_create_nin);
        l_dt_creation_n         := sys.diutil.bool_to_int(dt_creation_nin);
        l_follow_up_in_n        := sys.diutil.bool_to_int(follow_up_in_nin);
        l_id_follow_up_type_n   := sys.diutil.bool_to_int(id_follow_up_type_nin);
        l_create_user_n         := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n         := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n  := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n         := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n         := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n  := sys.diutil.bool_to_int(update_institution_nin);
        l_notes_n               := sys.diutil.bool_to_int(notes_nin);
    
        l_sql := 'UPDATE DISCHARGE_NOTES_FOLLOW_UP SET ' || ' FOLLOW_UP_WITH_TEXT = decode (' ||
                 l_follow_up_with_text_n ||
                 ',0,:follow_up_with_text_in, NVL (:follow_up_with_text_in, FOLLOW_UP_WITH_TEXT)) ' || ',' ||
                 ' ID_PROF_CREATE = decode (' || l_id_prof_create_n ||
                 ',0,:id_prof_create_in, NVL (:id_prof_create_in, ID_PROF_CREATE)) ' || ',' ||
                 ' DT_CREATION = decode (' || l_dt_creation_n ||
                 ',0,:dt_creation_in, NVL (:dt_creation_in, DT_CREATION)) ' || ',' || ' FOLLOW_UP_IN = decode (' ||
                 l_follow_up_in_n || ',0,:follow_up_in_in, NVL (:follow_up_in_in, FOLLOW_UP_IN)) ' || ',' ||
                 ' ID_FOLLOW_UP_TYPE = decode (' || l_id_follow_up_type_n ||
                 ',0,:id_follow_up_type_in, NVL (:id_follow_up_type_in, ID_FOLLOW_UP_TYPE)) ' || ',' ||
                 ' CREATE_USER = decode (' || l_create_user_n ||
                 ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' || ' CREATE_TIME = decode (' ||
                 l_create_time_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ',' ||
                 ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                 ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) ' || ',' || ' UPDATE_TIME = decode (' ||
                 l_update_time_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ',' ||
                 ' NOTES = decode (' || l_notes_n || ',0,:notes_in, NVL (:notes_in, NOTES)) ' || ' where ' ||
                 nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN follow_up_with_text_in, id_prof_create_in, dt_creation_in, follow_up_in_in, id_follow_up_type_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, notes_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'DISCHARGE_NOTES_FOLLOW_UP');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DISCHARGE_NOTES_FOLLOW_UP');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DISCHARGE_NOTES_FOLLOW_UP');
                    IF l_name = 'DNU_FU_ENTITY_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_FOLLOW_UP_ENTITY',
                                                        value_in           => id_follow_up_entity_in);
                    END IF;
                    IF l_name = 'DNU_FUP_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_FOLLOW_UP_TYPE',
                                                        value_in           => id_follow_up_type_in);
                    END IF;
                    IF l_name = 'DNU_PROF_CREATE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_CREATE',
                                                        value_in           => id_prof_create_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        follow_up_with_text_in  IN discharge_notes_follow_up.follow_up_with_text%TYPE DEFAULT NULL,
        follow_up_with_text_nin IN BOOLEAN := TRUE,
        id_prof_create_in       IN discharge_notes_follow_up.id_prof_create%TYPE DEFAULT NULL,
        id_prof_create_nin      IN BOOLEAN := TRUE,
        dt_creation_in          IN discharge_notes_follow_up.dt_creation%TYPE DEFAULT NULL,
        dt_creation_nin         IN BOOLEAN := TRUE,
        follow_up_in_in         IN discharge_notes_follow_up.follow_up_in%TYPE DEFAULT NULL,
        follow_up_in_nin        IN BOOLEAN := TRUE,
        id_follow_up_type_in    IN discharge_notes_follow_up.id_follow_up_type%TYPE DEFAULT NULL,
        id_follow_up_type_nin   IN BOOLEAN := TRUE,
        create_user_in          IN discharge_notes_follow_up.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN discharge_notes_follow_up.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN discharge_notes_follow_up.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN discharge_notes_follow_up.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN discharge_notes_follow_up.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN discharge_notes_follow_up.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        notes_in                IN discharge_notes_follow_up.notes%TYPE DEFAULT NULL,
        notes_nin               IN BOOLEAN := TRUE,
        where_in                VARCHAR2 DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(follow_up_with_text_in  => follow_up_with_text_in,
            follow_up_with_text_nin => follow_up_with_text_nin,
            id_prof_create_in       => id_prof_create_in,
            id_prof_create_nin      => id_prof_create_nin,
            dt_creation_in          => dt_creation_in,
            dt_creation_nin         => dt_creation_nin,
            follow_up_in_in         => follow_up_in_in,
            follow_up_in_nin        => follow_up_in_nin,
            id_follow_up_type_in    => id_follow_up_type_in,
            id_follow_up_type_nin   => id_follow_up_type_nin,
            create_user_in          => create_user_in,
            create_user_nin         => create_user_nin,
            create_time_in          => create_time_in,
            create_time_nin         => create_time_nin,
            create_institution_in   => create_institution_in,
            create_institution_nin  => create_institution_nin,
            update_user_in          => update_user_in,
            update_user_nin         => update_user_nin,
            update_time_in          => update_time_in,
            update_time_nin         => update_time_nin,
            update_institution_in   => update_institution_in,
            update_institution_nin  => update_institution_nin,
            notes_in                => notes_in,
            notes_nin               => notes_nin,
            where_in                => where_in,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN discharge_notes_follow_up%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_discharge_notes_in  => rec_in.id_discharge_notes,
            id_follow_up_with_in   => rec_in.id_follow_up_with,
            id_follow_up_entity_in => rec_in.id_follow_up_entity,
            follow_up_with_text_in => rec_in.follow_up_with_text,
            id_prof_create_in      => rec_in.id_prof_create,
            dt_creation_in         => rec_in.dt_creation,
            follow_up_in_in        => rec_in.follow_up_in,
            id_follow_up_type_in   => rec_in.id_follow_up_type,
            create_user_in         => rec_in.create_user,
            create_time_in         => rec_in.create_time,
            create_institution_in  => rec_in.create_institution,
            update_user_in         => rec_in.update_user,
            update_time_in         => rec_in.update_time,
            update_institution_in  => rec_in.update_institution,
            notes_in               => rec_in.notes
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN discharge_notes_follow_up%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_discharge_notes_in  => rec_in.id_discharge_notes,
            id_follow_up_with_in   => rec_in.id_follow_up_with,
            id_follow_up_entity_in => rec_in.id_follow_up_entity,
            follow_up_with_text_in => rec_in.follow_up_with_text,
            id_prof_create_in      => rec_in.id_prof_create,
            dt_creation_in         => rec_in.dt_creation,
            follow_up_in_in        => rec_in.follow_up_in,
            id_follow_up_type_in   => rec_in.id_follow_up_type,
            create_user_in         => rec_in.create_user,
            create_time_in         => rec_in.create_time,
            create_institution_in  => rec_in.create_institution,
            update_user_in         => rec_in.update_user,
            update_time_in         => rec_in.update_time,
            update_institution_in  => rec_in.update_institution,
            notes_in               => rec_in.notes
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_discharge_notes_in  IN discharge_notes_follow_up.id_discharge_notes%TYPE,
        id_follow_up_with_in   IN discharge_notes_follow_up.id_follow_up_with%TYPE,
        id_follow_up_entity_in IN discharge_notes_follow_up.id_follow_up_entity%TYPE,
        follow_up_with_text_in IN discharge_notes_follow_up.follow_up_with_text%TYPE DEFAULT NULL,
        id_prof_create_in      IN discharge_notes_follow_up.id_prof_create%TYPE DEFAULT NULL,
        dt_creation_in         IN discharge_notes_follow_up.dt_creation%TYPE DEFAULT NULL,
        follow_up_in_in        IN discharge_notes_follow_up.follow_up_in%TYPE DEFAULT NULL,
        id_follow_up_type_in   IN discharge_notes_follow_up.id_follow_up_type%TYPE DEFAULT NULL,
        create_user_in         IN discharge_notes_follow_up.create_user%TYPE DEFAULT NULL,
        create_time_in         IN discharge_notes_follow_up.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN discharge_notes_follow_up.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN discharge_notes_follow_up.update_user%TYPE DEFAULT NULL,
        update_time_in         IN discharge_notes_follow_up.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN discharge_notes_follow_up.update_institution%TYPE DEFAULT NULL,
        notes_in               IN discharge_notes_follow_up.notes%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        upd(id_discharge_notes_in  => id_discharge_notes_in,
            id_follow_up_with_in   => id_follow_up_with_in,
            id_follow_up_entity_in => id_follow_up_entity_in,
            follow_up_with_text_in => follow_up_with_text_in,
            id_prof_create_in      => id_prof_create_in,
            dt_creation_in         => dt_creation_in,
            follow_up_in_in        => follow_up_in_in,
            id_follow_up_type_in   => id_follow_up_type_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            notes_in               => notes_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_discharge_notes_in  => id_discharge_notes_in,
                id_follow_up_with_in   => id_follow_up_with_in,
                id_follow_up_entity_in => id_follow_up_entity_in,
                follow_up_with_text_in => follow_up_with_text_in,
                id_prof_create_in      => id_prof_create_in,
                dt_creation_in         => dt_creation_in,
                follow_up_in_in        => follow_up_in_in,
                id_follow_up_type_in   => id_follow_up_type_in,
                create_user_in         => create_user_in,
                create_time_in         => create_time_in,
                create_institution_in  => create_institution_in,
                update_user_in         => update_user_in,
                update_time_in         => update_time_in,
                update_institution_in  => update_institution_in,
                notes_in               => notes_in,
                handle_error_in        => handle_error_in,
                rows_out               => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_discharge_notes_in  IN discharge_notes_follow_up.id_discharge_notes%TYPE,
        id_follow_up_with_in   IN discharge_notes_follow_up.id_follow_up_with%TYPE,
        id_follow_up_entity_in IN discharge_notes_follow_up.id_follow_up_entity%TYPE,
        follow_up_with_text_in IN discharge_notes_follow_up.follow_up_with_text%TYPE DEFAULT NULL,
        id_prof_create_in      IN discharge_notes_follow_up.id_prof_create%TYPE DEFAULT NULL,
        dt_creation_in         IN discharge_notes_follow_up.dt_creation%TYPE DEFAULT NULL,
        follow_up_in_in        IN discharge_notes_follow_up.follow_up_in%TYPE DEFAULT NULL,
        id_follow_up_type_in   IN discharge_notes_follow_up.id_follow_up_type%TYPE DEFAULT NULL,
        create_user_in         IN discharge_notes_follow_up.create_user%TYPE DEFAULT NULL,
        create_time_in         IN discharge_notes_follow_up.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN discharge_notes_follow_up.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN discharge_notes_follow_up.update_user%TYPE DEFAULT NULL,
        update_time_in         IN discharge_notes_follow_up.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN discharge_notes_follow_up.update_institution%TYPE DEFAULT NULL,
        notes_in               IN discharge_notes_follow_up.notes%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_discharge_notes_in,
                id_follow_up_with_in,
                id_follow_up_entity_in,
                follow_up_with_text_in,
                id_prof_create_in,
                dt_creation_in,
                follow_up_in_in,
                id_follow_up_type_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                notes_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN discharge_notes_follow_up_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_discharge_notes  id_discharge_notes_cc;
        l_id_follow_up_with   id_follow_up_with_cc;
        l_id_follow_up_entity id_follow_up_entity_cc;
        l_follow_up_with_text follow_up_with_text_cc;
        l_id_prof_create      id_prof_create_cc;
        l_dt_creation         dt_creation_cc;
        l_follow_up_in        follow_up_in_cc;
        l_id_follow_up_type   id_follow_up_type_cc;
        l_create_user         create_user_cc;
        l_create_time         create_time_cc;
        l_create_institution  create_institution_cc;
        l_update_user         update_user_cc;
        l_update_time         update_time_cc;
        l_update_institution  update_institution_cc;
        l_notes               notes_cc;
    BEGIN
        FOR i IN col_in.FIRST .. col_in.LAST
        LOOP
            l_id_discharge_notes(i) := col_in(i).id_discharge_notes;
            l_id_follow_up_with(i) := col_in(i).id_follow_up_with;
            l_id_follow_up_entity(i) := col_in(i).id_follow_up_entity;
            l_follow_up_with_text(i) := col_in(i).follow_up_with_text;
            l_id_prof_create(i) := col_in(i).id_prof_create;
            l_dt_creation(i) := col_in(i).dt_creation;
            l_follow_up_in(i) := col_in(i).follow_up_in;
            l_id_follow_up_type(i) := col_in(i).id_follow_up_type;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_notes(i) := col_in(i).notes;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE discharge_notes_follow_up
                   SET follow_up_with_text = nvl(l_follow_up_with_text(i), follow_up_with_text),
                       id_prof_create      = nvl(l_id_prof_create(i), id_prof_create),
                       dt_creation         = nvl(l_dt_creation(i), dt_creation),
                       follow_up_in        = nvl(l_follow_up_in(i), follow_up_in),
                       id_follow_up_type   = nvl(l_id_follow_up_type(i), id_follow_up_type),
                       create_user         = nvl(l_create_user(i), create_user),
                       create_time         = nvl(l_create_time(i), create_time),
                       create_institution  = nvl(l_create_institution(i), create_institution),
                       update_user         = nvl(l_update_user(i), update_user),
                       update_time         = nvl(l_update_time(i), update_time),
                       update_institution  = nvl(l_update_institution(i), update_institution),
                       notes               = nvl(l_notes(i), notes)
                 WHERE id_discharge_notes = l_id_discharge_notes(i)
                   AND id_follow_up_with = l_id_follow_up_with(i)
                   AND id_follow_up_entity = l_id_follow_up_entity(i);
        ELSE
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE discharge_notes_follow_up
                   SET follow_up_with_text = l_follow_up_with_text(i),
                       id_prof_create      = l_id_prof_create(i),
                       dt_creation         = l_dt_creation(i),
                       follow_up_in        = l_follow_up_in(i),
                       id_follow_up_type   = l_id_follow_up_type(i),
                       create_user         = l_create_user(i),
                       create_time         = l_create_time(i),
                       create_institution  = l_create_institution(i),
                       update_user         = l_update_user(i),
                       update_time         = l_update_time(i),
                       update_institution  = l_update_institution(i),
                       notes               = l_notes(i)
                 WHERE id_discharge_notes = l_id_discharge_notes(i)
                   AND id_follow_up_with = l_id_follow_up_with(i)
                   AND id_follow_up_entity = l_id_follow_up_entity(i);
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN discharge_notes_follow_up_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE DISCHARGE_NOTES_FOLLOW_UP
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE DISCHARGE_NOTES_FOLLOW_UP
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE DISCHARGE_NOTES_FOLLOW_UP set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DISCHARGE_NOTES_FOLLOW_UP');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DISCHARGE_NOTES_FOLLOW_UP');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DISCHARGE_NOTES_FOLLOW_UP');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE DISCHARGE_NOTES_FOLLOW_UP set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DISCHARGE_NOTES_FOLLOW_UP');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DISCHARGE_NOTES_FOLLOW_UP');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DISCHARGE_NOTES_FOLLOW_UP');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_discharge_notes_in  IN discharge_notes_follow_up.id_discharge_notes%TYPE,
        id_follow_up_with_in   IN discharge_notes_follow_up.id_follow_up_with%TYPE,
        id_follow_up_entity_in IN discharge_notes_follow_up.id_follow_up_entity%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM discharge_notes_follow_up
         WHERE id_discharge_notes = id_discharge_notes_in
           AND id_follow_up_with = id_follow_up_with_in
           AND id_follow_up_entity = id_follow_up_entity_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DISCHARGE_NOTES_FOLLOW_UP');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DISCHARGE_NOTES_FOLLOW_UP');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_discharge_notes_in  IN discharge_notes_follow_up.id_discharge_notes%TYPE,
        id_follow_up_with_in   IN discharge_notes_follow_up.id_follow_up_with%TYPE,
        id_follow_up_entity_in IN discharge_notes_follow_up.id_follow_up_entity%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_discharge_notes_in  => id_discharge_notes_in,
            id_follow_up_with_in   => id_follow_up_with_in,
            id_follow_up_entity_in => id_follow_up_entity_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_DISCHARGE_NOTES
    PROCEDURE del_id_discharge_notes
    (
        id_discharge_notes_in IN discharge_notes_follow_up.id_discharge_notes%TYPE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM discharge_notes_follow_up
         WHERE id_discharge_notes = id_discharge_notes_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DISCHARGE_NOTES_FOLLOW_UP');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DISCHARGE_NOTES_FOLLOW_UP');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_discharge_notes;

    -- Delete all rows for primary key column ID_FOLLOW_UP_WITH
    PROCEDURE del_id_follow_up_with
    (
        id_follow_up_with_in IN discharge_notes_follow_up.id_follow_up_with%TYPE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM discharge_notes_follow_up
         WHERE id_follow_up_with = id_follow_up_with_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DISCHARGE_NOTES_FOLLOW_UP');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DISCHARGE_NOTES_FOLLOW_UP');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_follow_up_with;

    -- Delete all rows for primary key column ID_FOLLOW_UP_ENTITY
    PROCEDURE del_id_follow_up_entity
    (
        id_follow_up_entity_in IN discharge_notes_follow_up.id_follow_up_entity%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM discharge_notes_follow_up
         WHERE id_follow_up_entity = id_follow_up_entity_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DISCHARGE_NOTES_FOLLOW_UP');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DISCHARGE_NOTES_FOLLOW_UP');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_follow_up_entity;

    -- Delete all rows for primary key column ID_DISCHARGE_NOTES
    PROCEDURE del_id_discharge_notes
    (
        id_discharge_notes_in IN discharge_notes_follow_up.id_discharge_notes%TYPE,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_discharge_notes(id_discharge_notes_in => id_discharge_notes_in,
                               handle_error_in       => handle_error_in,
                               rows_out              => rows_out);
    END del_id_discharge_notes;

    -- Delete all rows for primary key column ID_FOLLOW_UP_WITH
    PROCEDURE del_id_follow_up_with
    (
        id_follow_up_with_in IN discharge_notes_follow_up.id_follow_up_with%TYPE,
        handle_error_in      IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_follow_up_with(id_follow_up_with_in => id_follow_up_with_in,
                              handle_error_in      => handle_error_in,
                              rows_out             => rows_out);
    END del_id_follow_up_with;

    -- Delete all rows for primary key column ID_FOLLOW_UP_ENTITY
    PROCEDURE del_id_follow_up_entity
    (
        id_follow_up_entity_in IN discharge_notes_follow_up.id_follow_up_entity%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_follow_up_entity(id_follow_up_entity_in => id_follow_up_entity_in,
                                handle_error_in        => handle_error_in,
                                rows_out               => rows_out);
    END del_id_follow_up_entity;

    PROCEDURE del_dnu_fu_entity_fk
    (
        id_follow_up_entity_in IN discharge_notes_follow_up.id_follow_up_entity%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM discharge_notes_follow_up
         WHERE id_follow_up_entity = del_dnu_fu_entity_fk.id_follow_up_entity_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DISCHARGE_NOTES_FOLLOW_UP');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DISCHARGE_NOTES_FOLLOW_UP');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_dnu_fu_entity_fk;

    PROCEDURE del_dnu_fu_entity_fk
    (
        id_follow_up_entity_in IN discharge_notes_follow_up.id_follow_up_entity%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_dnu_fu_entity_fk(id_follow_up_entity_in => id_follow_up_entity_in,
                             handle_error_in        => handle_error_in,
                             rows_out               => rows_out);
    END del_dnu_fu_entity_fk;

    PROCEDURE del_dnu_fup_fk
    (
        id_follow_up_type_in IN discharge_notes_follow_up.id_follow_up_type%TYPE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM discharge_notes_follow_up
         WHERE id_follow_up_type = del_dnu_fup_fk.id_follow_up_type_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DISCHARGE_NOTES_FOLLOW_UP');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DISCHARGE_NOTES_FOLLOW_UP');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_dnu_fup_fk;

    PROCEDURE del_dnu_fup_fk
    (
        id_follow_up_type_in IN discharge_notes_follow_up.id_follow_up_type%TYPE,
        handle_error_in      IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_dnu_fup_fk(id_follow_up_type_in => id_follow_up_type_in,
                       handle_error_in      => handle_error_in,
                       rows_out             => rows_out);
    END del_dnu_fup_fk;

    PROCEDURE del_dnu_prof_create_fk
    (
        id_prof_create_in IN discharge_notes_follow_up.id_prof_create%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM discharge_notes_follow_up
         WHERE id_prof_create = del_dnu_prof_create_fk.id_prof_create_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DISCHARGE_NOTES_FOLLOW_UP');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DISCHARGE_NOTES_FOLLOW_UP');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_dnu_prof_create_fk;

    PROCEDURE del_dnu_prof_create_fk
    (
        id_prof_create_in IN discharge_notes_follow_up.id_prof_create%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_dnu_prof_create_fk(id_prof_create_in => id_prof_create_in,
                               handle_error_in   => handle_error_in,
                               rows_out          => rows_out);
    END del_dnu_prof_create_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM DISCHARGE_NOTES_FOLLOW_UP';
        ELSE
            RETURN 'DELETE FROM DISCHARGE_NOTES_FOLLOW_UP WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DISCHARGE_NOTES_FOLLOW_UP');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DISCHARGE_NOTES_FOLLOW_UP');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DISCHARGE_NOTES_FOLLOW_UP');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DISCHARGE_NOTES_FOLLOW_UP');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DISCHARGE_NOTES_FOLLOW_UP');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DISCHARGE_NOTES_FOLLOW_UP');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DISCHARGE_NOTES_FOLLOW_UP');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DISCHARGE_NOTES_FOLLOW_UP');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DISCHARGE_NOTES_FOLLOW_UP');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DISCHARGE_NOTES_FOLLOW_UP');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DISCHARGE_NOTES_FOLLOW_UP');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DISCHARGE_NOTES_FOLLOW_UP');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DISCHARGE_NOTES_FOLLOW_UP');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DISCHARGE_NOTES_FOLLOW_UP');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DISCHARGE_NOTES_FOLLOW_UP');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DISCHARGE_NOTES_FOLLOW_UP');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DISCHARGE_NOTES_FOLLOW_UP');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DISCHARGE_NOTES_FOLLOW_UP');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DISCHARGE_NOTES_FOLLOW_UP');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DISCHARGE_NOTES_FOLLOW_UP');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(dischargenotesfollowup_inout IN OUT discharge_notes_follow_up%ROWTYPE) IS
    BEGIN
        dischargenotesfollowup_inout.id_discharge_notes  := NULL;
        dischargenotesfollowup_inout.id_follow_up_with   := NULL;
        dischargenotesfollowup_inout.id_follow_up_entity := NULL;
        dischargenotesfollowup_inout.follow_up_with_text := NULL;
        dischargenotesfollowup_inout.id_prof_create      := NULL;
        dischargenotesfollowup_inout.dt_creation         := NULL;
        dischargenotesfollowup_inout.follow_up_in        := NULL;
        dischargenotesfollowup_inout.id_follow_up_type   := NULL;
        dischargenotesfollowup_inout.create_user         := NULL;
        dischargenotesfollowup_inout.create_time         := NULL;
        dischargenotesfollowup_inout.create_institution  := NULL;
        dischargenotesfollowup_inout.update_user         := NULL;
        dischargenotesfollowup_inout.update_time         := NULL;
        dischargenotesfollowup_inout.update_institution  := NULL;
        dischargenotesfollowup_inout.notes               := NULL;
    END initrec;

    FUNCTION initrec RETURN discharge_notes_follow_up%ROWTYPE IS
        l_discharge_notes_follow_up discharge_notes_follow_up%ROWTYPE;
    BEGIN
        RETURN l_discharge_notes_follow_up;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN discharge_notes_follow_up_tc IS
        data discharge_notes_follow_up_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM discharge_notes_follow_up
         WHERE ROWID IN (SELECT *
                           FROM TABLE(rows_in));
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN discharge_notes_follow_up_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data discharge_notes_follow_up_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_discharge_notes_follow_up;
/
