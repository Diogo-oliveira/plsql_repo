/*-- Last Change Revision: $Rev: 2028289 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:44:53 +0100 (ter, 02 ago 2022) $*/

CREATE OR REPLACE PACKAGE BODY TS_PAT_ADVANCE_DIRECTIVE
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: February 23, 2009 15:43:48
| Created By: ALERT
*/
IS

   e_null_column_value EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_null_column_value, -1400);
   --
   e_existing_fky_reference EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_existing_fky_reference, -2266);
   --
   e_check_constraint_failure EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_check_constraint_failure, -2290);
   --
   e_no_parent_key EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_no_parent_key, -2291);
   --
   e_child_record_found EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_child_record_found, -2292);
   --
   e_forall_error EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_forall_error, -24381);
   --
   -- Defined for backward compatibilty.
   e_integ_constraint_failure EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_integ_constraint_failure, -2291);

    -- Private utilities
   PROCEDURE get_constraint_info (
      owner_out OUT ALL_CONSTRAINTS.OWNER%TYPE
     ,name_out OUT ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE)
   IS
      l_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
      dotloc PLS_INTEGER;
      leftloc PLS_INTEGER;
   BEGIN
      dotloc  := INSTR (l_errm,'.');
      leftloc := INSTR (l_errm,'(');
      owner_out := SUBSTR (l_errm, leftloc+1, dotloc-leftloc-1);
      name_out  := SUBSTR (l_errm, dotloc+1, INSTR (l_errm,')')-dotloc-1);
   END get_constraint_info;
   -- Public programs

   PROCEDURE ins (
      id_pat_advance_directive_in IN PAT_ADVANCE_DIRECTIVE.ID_PAT_ADVANCE_DIRECTIVE%TYPE
      ,
      id_patient_in IN PAT_ADVANCE_DIRECTIVE.ID_PATIENT%TYPE DEFAULT NULL,
      id_epis_documentation_in IN PAT_ADVANCE_DIRECTIVE.ID_EPIS_DOCUMENTATION%TYPE DEFAULT NULL,
      flg_has_adv_directive_in IN PAT_ADVANCE_DIRECTIVE.FLG_HAS_ADV_DIRECTIVE%TYPE DEFAULT NULL,
      flg_status_in IN PAT_ADVANCE_DIRECTIVE.FLG_STATUS%TYPE DEFAULT NULL,
      id_cancel_reason_in IN PAT_ADVANCE_DIRECTIVE.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      id_prof_cancel_in IN PAT_ADVANCE_DIRECTIVE.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN PAT_ADVANCE_DIRECTIVE.NOTES_CANCEL%TYPE DEFAULT NULL,
      dt_cancel_in IN PAT_ADVANCE_DIRECTIVE.DT_CANCEL%TYPE DEFAULT NULL
     ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN

     INSERT INTO PAT_ADVANCE_DIRECTIVE (
         ID_PAT_ADVANCE_DIRECTIVE,
         ID_PATIENT,
         ID_EPIS_DOCUMENTATION,
         FLG_HAS_ADV_DIRECTIVE,
         FLG_STATUS,
         ID_CANCEL_REASON,
         ID_PROF_CANCEL,
         NOTES_CANCEL,
         DT_CANCEL
         )
      VALUES (
         id_pat_advance_directive_in,
         id_patient_in,
         id_epis_documentation_in,
         flg_has_adv_directive_in,
         flg_status_in,
         id_cancel_reason_in,
         id_prof_cancel_in,
         notes_cancel_in,
         dt_cancel_in
         ) RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'PAT_ADVANCE_DIRECTIVE');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_ADVANCE_DIRECTIVE');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_ADVANCE_DIRECTIVE');
           IF l_name = 'PATADVDIR_CRE_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_CANCEL_REASON'
               , value_in => id_cancel_reason_in);
           END IF;
           IF l_name = 'PATADVDIR_EPISD_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_EPIS_DOCUMENTATION'
               , value_in => id_epis_documentation_in);
           END IF;
           IF l_name = 'PATADVDIR_PAT_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PATIENT'
               , value_in => id_patient_in);
           END IF;
           IF l_name = 'PATADVDIR_PROFC_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_CANCEL'
               , value_in => id_prof_cancel_in);
           END IF;
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END ins;

   PROCEDURE ins (
      id_pat_advance_directive_in IN PAT_ADVANCE_DIRECTIVE.ID_PAT_ADVANCE_DIRECTIVE%TYPE
      ,
      id_patient_in IN PAT_ADVANCE_DIRECTIVE.ID_PATIENT%TYPE DEFAULT NULL,
      id_epis_documentation_in IN PAT_ADVANCE_DIRECTIVE.ID_EPIS_DOCUMENTATION%TYPE DEFAULT NULL,
      flg_has_adv_directive_in IN PAT_ADVANCE_DIRECTIVE.FLG_HAS_ADV_DIRECTIVE%TYPE DEFAULT NULL,
      flg_status_in IN PAT_ADVANCE_DIRECTIVE.FLG_STATUS%TYPE DEFAULT NULL,
      id_cancel_reason_in IN PAT_ADVANCE_DIRECTIVE.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      id_prof_cancel_in IN PAT_ADVANCE_DIRECTIVE.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN PAT_ADVANCE_DIRECTIVE.NOTES_CANCEL%TYPE DEFAULT NULL,
      dt_cancel_in IN PAT_ADVANCE_DIRECTIVE.DT_CANCEL%TYPE DEFAULT NULL
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN

     ins (
      id_pat_advance_directive_in => id_pat_advance_directive_in
      ,
      id_patient_in => id_patient_in,
      id_epis_documentation_in => id_epis_documentation_in,
      flg_has_adv_directive_in => flg_has_adv_directive_in,
      flg_status_in => flg_status_in,
      id_cancel_reason_in => id_cancel_reason_in,
      id_prof_cancel_in => id_prof_cancel_in,
      notes_cancel_in => notes_cancel_in,
      dt_cancel_in => dt_cancel_in
     ,handle_error_in => handle_error_in
      ,rows_out => rows_out
      );
   END ins;


   PROCEDURE ins (
      rec_in IN PAT_ADVANCE_DIRECTIVE%ROWTYPE
     ,gen_pky_in IN BOOLEAN DEFAULT FALSE
     ,sequence_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
      l_rec PAT_ADVANCE_DIRECTIVE%ROWTYPE := rec_in;
   BEGIN
      IF gen_pky_in THEN
         l_rec.ID_PAT_ADVANCE_DIRECTIVE := next_key (sequence_in);
      END IF;
      ins (
         id_pat_advance_directive_in => l_rec.ID_PAT_ADVANCE_DIRECTIVE
         ,
         id_patient_in => l_rec.ID_PATIENT,
         id_epis_documentation_in => l_rec.ID_EPIS_DOCUMENTATION,
         flg_has_adv_directive_in => l_rec.FLG_HAS_ADV_DIRECTIVE,
         flg_status_in => l_rec.FLG_STATUS,
         id_cancel_reason_in => l_rec.ID_CANCEL_REASON,
         id_prof_cancel_in => l_rec.ID_PROF_CANCEL,
         notes_cancel_in => l_rec.NOTES_CANCEL,
         dt_cancel_in => l_rec.DT_CANCEL
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;

   PROCEDURE ins (
      rec_in IN PAT_ADVANCE_DIRECTIVE%ROWTYPE
     ,gen_pky_in IN BOOLEAN DEFAULT FALSE
     ,sequence_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
      rows_out TABLE_VARCHAR;
   BEGIN

  ins (
      rec_in => rec_in
     ,gen_pky_in => gen_pky_in
     ,sequence_in => sequence_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
   );

   END ins;

   FUNCTION next_key (sequence_in IN VARCHAR2 := NULL) RETURN PAT_ADVANCE_DIRECTIVE.ID_PAT_ADVANCE_DIRECTIVE%TYPE

   IS
     retval PAT_ADVANCE_DIRECTIVE.ID_PAT_ADVANCE_DIRECTIVE%TYPE;

   BEGIN
      IF sequence_in IS NULL
      THEN
         SELECT seq_PAT_ADVANCE_DIRECTIVE.NEXTVAL INTO retval FROM dual;
      ELSE
         EXECUTE IMMEDIATE
            'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
            INTO retval;
      END IF;
      RETURN retval;
   EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'SEQUENCE-GENERATION-FAILURE'
           ,name1_in => 'SEQUENCE'
           ,value1_in => NVL (sequence_in, 'seq_PAT_ADVANCE_DIRECTIVE')
           );
   END next_key;

   PROCEDURE ins (
      id_patient_in IN PAT_ADVANCE_DIRECTIVE.ID_PATIENT%TYPE DEFAULT NULL,
      id_epis_documentation_in IN PAT_ADVANCE_DIRECTIVE.ID_EPIS_DOCUMENTATION%TYPE DEFAULT NULL,
      flg_has_adv_directive_in IN PAT_ADVANCE_DIRECTIVE.FLG_HAS_ADV_DIRECTIVE%TYPE DEFAULT NULL,
      flg_status_in IN PAT_ADVANCE_DIRECTIVE.FLG_STATUS%TYPE DEFAULT NULL,
      id_cancel_reason_in IN PAT_ADVANCE_DIRECTIVE.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      id_prof_cancel_in IN PAT_ADVANCE_DIRECTIVE.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN PAT_ADVANCE_DIRECTIVE.NOTES_CANCEL%TYPE DEFAULT NULL,
      dt_cancel_in IN PAT_ADVANCE_DIRECTIVE.DT_CANCEL%TYPE DEFAULT NULL,
      id_pat_advance_directive_out IN OUT PAT_ADVANCE_DIRECTIVE.ID_PAT_ADVANCE_DIRECTIVE%TYPE
      ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
   )
   IS
        l_pky PAT_ADVANCE_DIRECTIVE.ID_PAT_ADVANCE_DIRECTIVE%TYPE := next_key;
   BEGIN
      ins (
         id_pat_advance_directive_in => l_pky,
         id_patient_in => id_patient_in,
         id_epis_documentation_in => id_epis_documentation_in,
         flg_has_adv_directive_in => flg_has_adv_directive_in,
         flg_status_in => flg_status_in,
         id_cancel_reason_in => id_cancel_reason_in,
         id_prof_cancel_in => id_prof_cancel_in,
         notes_cancel_in => notes_cancel_in,
         dt_cancel_in => dt_cancel_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
      id_pat_advance_directive_out := l_pky;
   END ins;

   PROCEDURE ins (
      id_patient_in IN PAT_ADVANCE_DIRECTIVE.ID_PATIENT%TYPE DEFAULT NULL,
      id_epis_documentation_in IN PAT_ADVANCE_DIRECTIVE.ID_EPIS_DOCUMENTATION%TYPE DEFAULT NULL,
      flg_has_adv_directive_in IN PAT_ADVANCE_DIRECTIVE.FLG_HAS_ADV_DIRECTIVE%TYPE DEFAULT NULL,
      flg_status_in IN PAT_ADVANCE_DIRECTIVE.FLG_STATUS%TYPE DEFAULT NULL,
      id_cancel_reason_in IN PAT_ADVANCE_DIRECTIVE.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      id_prof_cancel_in IN PAT_ADVANCE_DIRECTIVE.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN PAT_ADVANCE_DIRECTIVE.NOTES_CANCEL%TYPE DEFAULT NULL,
      dt_cancel_in IN PAT_ADVANCE_DIRECTIVE.DT_CANCEL%TYPE DEFAULT NULL,
      id_pat_advance_directive_out IN OUT PAT_ADVANCE_DIRECTIVE.ID_PAT_ADVANCE_DIRECTIVE%TYPE
      ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      ins (
      id_patient_in => id_patient_in,
      id_epis_documentation_in => id_epis_documentation_in,
      flg_has_adv_directive_in => flg_has_adv_directive_in,
      flg_status_in => flg_status_in,
      id_cancel_reason_in => id_cancel_reason_in,
      id_prof_cancel_in => id_prof_cancel_in,
      notes_cancel_in => notes_cancel_in,
      dt_cancel_in => dt_cancel_in,
      id_pat_advance_directive_out => id_pat_advance_directive_out
      ,handle_error_in => handle_error_in
      , rows_out => rows_out
   );
   END ins;

   FUNCTION ins (
      id_patient_in IN PAT_ADVANCE_DIRECTIVE.ID_PATIENT%TYPE DEFAULT NULL,
      id_epis_documentation_in IN PAT_ADVANCE_DIRECTIVE.ID_EPIS_DOCUMENTATION%TYPE DEFAULT NULL,
      flg_has_adv_directive_in IN PAT_ADVANCE_DIRECTIVE.FLG_HAS_ADV_DIRECTIVE%TYPE DEFAULT NULL,
      flg_status_in IN PAT_ADVANCE_DIRECTIVE.FLG_STATUS%TYPE DEFAULT NULL,
      id_cancel_reason_in IN PAT_ADVANCE_DIRECTIVE.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      id_prof_cancel_in IN PAT_ADVANCE_DIRECTIVE.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN PAT_ADVANCE_DIRECTIVE.NOTES_CANCEL%TYPE DEFAULT NULL,
      dt_cancel_in IN PAT_ADVANCE_DIRECTIVE.DT_CANCEL%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
   )
      RETURN
         PAT_ADVANCE_DIRECTIVE.ID_PAT_ADVANCE_DIRECTIVE%TYPE
   IS
        l_pky PAT_ADVANCE_DIRECTIVE.ID_PAT_ADVANCE_DIRECTIVE%TYPE := next_key;
   BEGIN
      ins (
         id_pat_advance_directive_in => l_pky,
         id_patient_in => id_patient_in,
         id_epis_documentation_in => id_epis_documentation_in,
         flg_has_adv_directive_in => flg_has_adv_directive_in,
         flg_status_in => flg_status_in,
         id_cancel_reason_in => id_cancel_reason_in,
         id_prof_cancel_in => id_prof_cancel_in,
         notes_cancel_in => notes_cancel_in,
         dt_cancel_in => dt_cancel_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
      RETURN l_pky;
   END ins;

   FUNCTION ins (
      id_patient_in IN PAT_ADVANCE_DIRECTIVE.ID_PATIENT%TYPE DEFAULT NULL,
      id_epis_documentation_in IN PAT_ADVANCE_DIRECTIVE.ID_EPIS_DOCUMENTATION%TYPE DEFAULT NULL,
      flg_has_adv_directive_in IN PAT_ADVANCE_DIRECTIVE.FLG_HAS_ADV_DIRECTIVE%TYPE DEFAULT NULL,
      flg_status_in IN PAT_ADVANCE_DIRECTIVE.FLG_STATUS%TYPE DEFAULT NULL,
      id_cancel_reason_in IN PAT_ADVANCE_DIRECTIVE.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      id_prof_cancel_in IN PAT_ADVANCE_DIRECTIVE.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN PAT_ADVANCE_DIRECTIVE.NOTES_CANCEL%TYPE DEFAULT NULL,
      dt_cancel_in IN PAT_ADVANCE_DIRECTIVE.DT_CANCEL%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
   )
      RETURN
         PAT_ADVANCE_DIRECTIVE.ID_PAT_ADVANCE_DIRECTIVE%TYPE
   IS
        l_pky PAT_ADVANCE_DIRECTIVE.ID_PAT_ADVANCE_DIRECTIVE%TYPE := next_key;
    rows_out TABLE_VARCHAR;
   BEGIN
      ins (
         id_pat_advance_directive_in => l_pky,
         id_patient_in => id_patient_in,
         id_epis_documentation_in => id_epis_documentation_in,
         flg_has_adv_directive_in => flg_has_adv_directive_in,
         flg_status_in => flg_status_in,
         id_cancel_reason_in => id_cancel_reason_in,
         id_prof_cancel_in => id_prof_cancel_in,
         notes_cancel_in => notes_cancel_in,
         dt_cancel_in => dt_cancel_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
      RETURN l_pky;
   END ins;

      PROCEDURE ins (
      id_patient_in IN PAT_ADVANCE_DIRECTIVE.ID_PATIENT%TYPE DEFAULT NULL,
      id_epis_documentation_in IN PAT_ADVANCE_DIRECTIVE.ID_EPIS_DOCUMENTATION%TYPE DEFAULT NULL,
      flg_has_adv_directive_in IN PAT_ADVANCE_DIRECTIVE.FLG_HAS_ADV_DIRECTIVE%TYPE DEFAULT NULL,
      flg_status_in IN PAT_ADVANCE_DIRECTIVE.FLG_STATUS%TYPE DEFAULT NULL,
      id_cancel_reason_in IN PAT_ADVANCE_DIRECTIVE.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      id_prof_cancel_in IN PAT_ADVANCE_DIRECTIVE.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN PAT_ADVANCE_DIRECTIVE.NOTES_CANCEL%TYPE DEFAULT NULL,
      dt_cancel_in IN PAT_ADVANCE_DIRECTIVE.DT_CANCEL%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
   )
   IS
        l_pky PAT_ADVANCE_DIRECTIVE.ID_PAT_ADVANCE_DIRECTIVE%TYPE := next_key;
   BEGIN
      ins (
         id_pat_advance_directive_in => l_pky,
         id_patient_in => id_patient_in,
         id_epis_documentation_in => id_epis_documentation_in,
         flg_has_adv_directive_in => flg_has_adv_directive_in,
         flg_status_in => flg_status_in,
         id_cancel_reason_in => id_cancel_reason_in,
         id_prof_cancel_in => id_prof_cancel_in,
         notes_cancel_in => notes_cancel_in,
         dt_cancel_in => dt_cancel_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;


     PROCEDURE ins (
      id_patient_in IN PAT_ADVANCE_DIRECTIVE.ID_PATIENT%TYPE DEFAULT NULL,
      id_epis_documentation_in IN PAT_ADVANCE_DIRECTIVE.ID_EPIS_DOCUMENTATION%TYPE DEFAULT NULL,
      flg_has_adv_directive_in IN PAT_ADVANCE_DIRECTIVE.FLG_HAS_ADV_DIRECTIVE%TYPE DEFAULT NULL,
      flg_status_in IN PAT_ADVANCE_DIRECTIVE.FLG_STATUS%TYPE DEFAULT NULL,
      id_cancel_reason_in IN PAT_ADVANCE_DIRECTIVE.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      id_prof_cancel_in IN PAT_ADVANCE_DIRECTIVE.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN PAT_ADVANCE_DIRECTIVE.NOTES_CANCEL%TYPE DEFAULT NULL,
      dt_cancel_in IN PAT_ADVANCE_DIRECTIVE.DT_CANCEL%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
        l_pky PAT_ADVANCE_DIRECTIVE.ID_PAT_ADVANCE_DIRECTIVE%TYPE := next_key;
      rows_out TABLE_VARCHAR;
   BEGIN
      ins (
         id_pat_advance_directive_in => l_pky,
         id_patient_in => id_patient_in,
         id_epis_documentation_in => id_epis_documentation_in,
         flg_has_adv_directive_in => flg_has_adv_directive_in,
         flg_status_in => flg_status_in,
         id_cancel_reason_in => id_cancel_reason_in,
         id_prof_cancel_in => id_prof_cancel_in,
         notes_cancel_in => notes_cancel_in,
         dt_cancel_in => dt_cancel_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;

    PROCEDURE ins (
      rows_in IN PAT_ADVANCE_DIRECTIVE_tc
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      IF rows_in.COUNT = 0
      THEN
         NULL;
      ELSE
         FORALL indx IN rows_in.FIRST .. rows_in.LAST
            SAVE EXCEPTIONS
            INSERT INTO PAT_ADVANCE_DIRECTIVE VALUES rows_in (indx) RETURNING ROWID BULK COLLECT INTO rows_out;
      END IF;
   EXCEPTION
     WHEN e_forall_error
     THEN
        -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
        -- here if any error occurs. We can then save all the error
        -- information out to the error instance.
       IF NOT handle_error_in THEN RAISE;
       ELSE
          <<bulk_handler>>
          DECLARE
             l_err_instance_id NUMBER;
          BEGIN
             -- For each error, write to the log.
             FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
             LOOP
                pk_alert_exceptions.register_error (
                    error_name_in => 'FORALL-INSERT-FAILURE'
                   ,err_instance_id_out => l_err_instance_id
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'BINDING_ROW_' || indx
                  ,value_in => SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX
                  ,validate_in => FALSE
                );
                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ERROR_AT_ROW_' || indx
                  ,value_in => SQL%BULK_EXCEPTIONS (indx).ERROR_CODE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PAT_ADVANCE_DIRECTIVE _' || indx
                  ,value_in => rows_in(indx).ID_PAT_ADVANCE_DIRECTIVE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PATIENT _' || indx
                  ,value_in => rows_in(indx).ID_PATIENT
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_EPIS_DOCUMENTATION _' || indx
                  ,value_in => rows_in(indx).ID_EPIS_DOCUMENTATION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_HAS_ADV_DIRECTIVE _' || indx
                  ,value_in => rows_in(indx).FLG_HAS_ADV_DIRECTIVE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_STATUS _' || indx
                  ,value_in => rows_in(indx).FLG_STATUS
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_CANCEL_REASON _' || indx
                  ,value_in => rows_in(indx).ID_CANCEL_REASON
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PROF_CANCEL _' || indx
                  ,value_in => rows_in(indx).ID_PROF_CANCEL
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'NOTES_CANCEL _' || indx
                  ,value_in => rows_in(indx).NOTES_CANCEL
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_CANCEL _' || indx
                  ,value_in => rows_in(indx).DT_CANCEL
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.raise_error_instance( err_instance_id_in => l_err_instance_id );
             END LOOP;
          END bulk_handler;
        END IF;
     WHEN OTHERS
     THEN
       IF NOT handle_error_in THEN RAISE;
       ELSE
       pk_alert_exceptions.raise_error(
          error_name_in => 'FORALL-INSERT-FAILURE'
          ,name1_in => 'TABLE_NAME'
          ,value1_in => 'PAT_ADVANCE_DIRECTIVE'
          ,name2_in => 'ROW_COUNT'
          ,value2_in => rows_in.COUNT
           );
       END IF;
   END ins;

    PROCEDURE ins (
      rows_in IN PAT_ADVANCE_DIRECTIVE_tc
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
      rows_out TABLE_VARCHAR;
   BEGIN
      ins (
      rows_in => rows_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
   );
   END ins;


PROCEDURE upd (
      id_pat_advance_directive_in IN PAT_ADVANCE_DIRECTIVE.ID_PAT_ADVANCE_DIRECTIVE%TYPE,
      id_patient_in IN PAT_ADVANCE_DIRECTIVE.ID_PATIENT%TYPE DEFAULT NULL,
      ID_PATIENT_nin IN BOOLEAN := TRUE,
      id_epis_documentation_in IN PAT_ADVANCE_DIRECTIVE.ID_EPIS_DOCUMENTATION%TYPE DEFAULT NULL,
      ID_EPIS_DOCUMENTATION_nin IN BOOLEAN := TRUE,
      flg_has_adv_directive_in IN PAT_ADVANCE_DIRECTIVE.FLG_HAS_ADV_DIRECTIVE%TYPE DEFAULT NULL,
      FLG_HAS_ADV_DIRECTIVE_nin IN BOOLEAN := TRUE,
      flg_status_in IN PAT_ADVANCE_DIRECTIVE.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      id_cancel_reason_in IN PAT_ADVANCE_DIRECTIVE.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      ID_CANCEL_REASON_nin IN BOOLEAN := TRUE,
      id_prof_cancel_in IN PAT_ADVANCE_DIRECTIVE.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      ID_PROF_CANCEL_nin IN BOOLEAN := TRUE,
      notes_cancel_in IN PAT_ADVANCE_DIRECTIVE.NOTES_CANCEL%TYPE DEFAULT NULL,
      NOTES_CANCEL_nin IN BOOLEAN := TRUE,
      dt_cancel_in IN PAT_ADVANCE_DIRECTIVE.DT_CANCEL%TYPE DEFAULT NULL,
      DT_CANCEL_nin IN BOOLEAN := TRUE,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   l_rows_out TABLE_VARCHAR;
   l_ID_PATIENT_n NUMBER(1);
   l_ID_EPIS_DOCUMENTATION_n NUMBER(1);
   l_FLG_HAS_ADV_DIRECTIVE_n NUMBER(1);
   l_FLG_STATUS_n NUMBER(1);
   l_ID_CANCEL_REASON_n NUMBER(1);
   l_ID_PROF_CANCEL_n NUMBER(1);
   l_NOTES_CANCEL_n NUMBER(1);
   l_DT_CANCEL_n NUMBER(1);
   BEGIN

   l_ID_PATIENT_n := sys.diutil.bool_to_int(ID_PATIENT_nin);
   l_ID_EPIS_DOCUMENTATION_n := sys.diutil.bool_to_int(ID_EPIS_DOCUMENTATION_nin);
   l_FLG_HAS_ADV_DIRECTIVE_n := sys.diutil.bool_to_int(FLG_HAS_ADV_DIRECTIVE_nin);
   l_FLG_STATUS_n := sys.diutil.bool_to_int(FLG_STATUS_nin);
   l_ID_CANCEL_REASON_n := sys.diutil.bool_to_int(ID_CANCEL_REASON_nin);
   l_ID_PROF_CANCEL_n := sys.diutil.bool_to_int(ID_PROF_CANCEL_nin);
   l_NOTES_CANCEL_n := sys.diutil.bool_to_int(NOTES_CANCEL_nin);
   l_DT_CANCEL_n := sys.diutil.bool_to_int(DT_CANCEL_nin);


         UPDATE PAT_ADVANCE_DIRECTIVE SET
     ID_PATIENT = decode (l_ID_PATIENT_n,0,id_patient_in, NVL (id_patient_in, ID_PATIENT)),
     ID_EPIS_DOCUMENTATION = decode (l_ID_EPIS_DOCUMENTATION_n,0,id_epis_documentation_in, NVL (id_epis_documentation_in, ID_EPIS_DOCUMENTATION)),
     FLG_HAS_ADV_DIRECTIVE = decode (l_FLG_HAS_ADV_DIRECTIVE_n,0,flg_has_adv_directive_in, NVL (flg_has_adv_directive_in, FLG_HAS_ADV_DIRECTIVE)),
     FLG_STATUS = decode (l_FLG_STATUS_n,0,flg_status_in, NVL (flg_status_in, FLG_STATUS)),
     ID_CANCEL_REASON = decode (l_ID_CANCEL_REASON_n,0,id_cancel_reason_in, NVL (id_cancel_reason_in, ID_CANCEL_REASON)),
     ID_PROF_CANCEL = decode (l_ID_PROF_CANCEL_n,0,id_prof_cancel_in, NVL (id_prof_cancel_in, ID_PROF_CANCEL)),
     NOTES_CANCEL = decode (l_NOTES_CANCEL_n,0,notes_cancel_in, NVL (notes_cancel_in, NOTES_CANCEL)),
     DT_CANCEL = decode (l_DT_CANCEL_n,0,dt_cancel_in, NVL (dt_cancel_in, DT_CANCEL))
          WHERE
             ID_PAT_ADVANCE_DIRECTIVE = id_pat_advance_directive_in
         RETURNING ROWID BULK COLLECT INTO l_rows_out;


if(rows_out is null)
then
rows_out := table_varchar();
end if;

rows_out :=  rows_out MULTISET UNION DISTINCT l_rows_out;

   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'PAT_ADVANCE_DIRECTIVE');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_ADVANCE_DIRECTIVE');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_ADVANCE_DIRECTIVE');
           IF l_name = 'PATADVDIR_CRE_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_CANCEL_REASON'
               , value_in => id_cancel_reason_in);
           END IF;
           IF l_name = 'PATADVDIR_EPISD_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_EPIS_DOCUMENTATION'
               , value_in => id_epis_documentation_in);
           END IF;
           IF l_name = 'PATADVDIR_PAT_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PATIENT'
               , value_in => id_patient_in);
           END IF;
           IF l_name = 'PATADVDIR_PROFC_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_CANCEL'
               , value_in => id_prof_cancel_in);
           END IF;
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END upd;


   PROCEDURE upd (
      id_pat_advance_directive_in IN PAT_ADVANCE_DIRECTIVE.ID_PAT_ADVANCE_DIRECTIVE%TYPE,
      id_patient_in IN PAT_ADVANCE_DIRECTIVE.ID_PATIENT%TYPE DEFAULT NULL,
      ID_PATIENT_nin IN BOOLEAN := TRUE,
      id_epis_documentation_in IN PAT_ADVANCE_DIRECTIVE.ID_EPIS_DOCUMENTATION%TYPE DEFAULT NULL,
      ID_EPIS_DOCUMENTATION_nin IN BOOLEAN := TRUE,
      flg_has_adv_directive_in IN PAT_ADVANCE_DIRECTIVE.FLG_HAS_ADV_DIRECTIVE%TYPE DEFAULT NULL,
      FLG_HAS_ADV_DIRECTIVE_nin IN BOOLEAN := TRUE,
      flg_status_in IN PAT_ADVANCE_DIRECTIVE.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      id_cancel_reason_in IN PAT_ADVANCE_DIRECTIVE.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      ID_CANCEL_REASON_nin IN BOOLEAN := TRUE,
      id_prof_cancel_in IN PAT_ADVANCE_DIRECTIVE.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      ID_PROF_CANCEL_nin IN BOOLEAN := TRUE,
      notes_cancel_in IN PAT_ADVANCE_DIRECTIVE.NOTES_CANCEL%TYPE DEFAULT NULL,
      NOTES_CANCEL_nin IN BOOLEAN := TRUE,
      dt_cancel_in IN PAT_ADVANCE_DIRECTIVE.DT_CANCEL%TYPE DEFAULT NULL,
      DT_CANCEL_nin IN BOOLEAN := TRUE,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
     upd (
      id_pat_advance_directive_in => id_pat_advance_directive_in,
      id_patient_in => id_patient_in,
      ID_PATIENT_nin => ID_PATIENT_nin,
      id_epis_documentation_in => id_epis_documentation_in,
      ID_EPIS_DOCUMENTATION_nin => ID_EPIS_DOCUMENTATION_nin,
      flg_has_adv_directive_in => flg_has_adv_directive_in,
      FLG_HAS_ADV_DIRECTIVE_nin => FLG_HAS_ADV_DIRECTIVE_nin,
      flg_status_in => flg_status_in,
      FLG_STATUS_nin => FLG_STATUS_nin,
      id_cancel_reason_in => id_cancel_reason_in,
      ID_CANCEL_REASON_nin => ID_CANCEL_REASON_nin,
      id_prof_cancel_in => id_prof_cancel_in,
      ID_PROF_CANCEL_nin => ID_PROF_CANCEL_nin,
      notes_cancel_in => notes_cancel_in,
      NOTES_CANCEL_nin => NOTES_CANCEL_nin,
      dt_cancel_in => dt_cancel_in,
      DT_CANCEL_nin => DT_CANCEL_nin,
     handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END upd;

PROCEDURE upd (
      id_patient_in IN PAT_ADVANCE_DIRECTIVE.ID_PATIENT%TYPE DEFAULT NULL,
      ID_PATIENT_nin IN BOOLEAN := TRUE,
      id_epis_documentation_in IN PAT_ADVANCE_DIRECTIVE.ID_EPIS_DOCUMENTATION%TYPE DEFAULT NULL,
      ID_EPIS_DOCUMENTATION_nin IN BOOLEAN := TRUE,
      flg_has_adv_directive_in IN PAT_ADVANCE_DIRECTIVE.FLG_HAS_ADV_DIRECTIVE%TYPE DEFAULT NULL,
      FLG_HAS_ADV_DIRECTIVE_nin IN BOOLEAN := TRUE,
      flg_status_in IN PAT_ADVANCE_DIRECTIVE.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      id_cancel_reason_in IN PAT_ADVANCE_DIRECTIVE.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      ID_CANCEL_REASON_nin IN BOOLEAN := TRUE,
      id_prof_cancel_in IN PAT_ADVANCE_DIRECTIVE.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      ID_PROF_CANCEL_nin IN BOOLEAN := TRUE,
      notes_cancel_in IN PAT_ADVANCE_DIRECTIVE.NOTES_CANCEL%TYPE DEFAULT NULL,
      NOTES_CANCEL_nin IN BOOLEAN := TRUE,
      dt_cancel_in IN PAT_ADVANCE_DIRECTIVE.DT_CANCEL%TYPE DEFAULT NULL,
      DT_CANCEL_nin IN BOOLEAN := TRUE,
    where_in varchar2 DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   l_sql VARCHAR2(32767);
   l_rows_out TABLE_VARCHAR;
   l_ID_PATIENT_n NUMBER(1);
   l_ID_EPIS_DOCUMENTATION_n NUMBER(1);
   l_FLG_HAS_ADV_DIRECTIVE_n NUMBER(1);
   l_FLG_STATUS_n NUMBER(1);
   l_ID_CANCEL_REASON_n NUMBER(1);
   l_ID_PROF_CANCEL_n NUMBER(1);
   l_NOTES_CANCEL_n NUMBER(1);
   l_DT_CANCEL_n NUMBER(1);
      id_pat_advance_directive_in PAT_ADVANCE_DIRECTIVE.ID_PAT_ADVANCE_DIRECTIVE%TYPE;
   BEGIN



      l_ID_PATIENT_n := sys.diutil.bool_to_int(ID_PATIENT_nin);
      l_ID_EPIS_DOCUMENTATION_n := sys.diutil.bool_to_int(ID_EPIS_DOCUMENTATION_nin);
      l_FLG_HAS_ADV_DIRECTIVE_n := sys.diutil.bool_to_int(FLG_HAS_ADV_DIRECTIVE_nin);
      l_FLG_STATUS_n := sys.diutil.bool_to_int(FLG_STATUS_nin);
      l_ID_CANCEL_REASON_n := sys.diutil.bool_to_int(ID_CANCEL_REASON_nin);
      l_ID_PROF_CANCEL_n := sys.diutil.bool_to_int(ID_PROF_CANCEL_nin);
      l_NOTES_CANCEL_n := sys.diutil.bool_to_int(NOTES_CANCEL_nin);
      l_DT_CANCEL_n := sys.diutil.bool_to_int(DT_CANCEL_nin);



l_sql := 'UPDATE PAT_ADVANCE_DIRECTIVE SET '
     || ' ID_PATIENT = decode (' || l_ID_PATIENT_n || ',0,:id_patient_in, NVL (:id_patient_in, ID_PATIENT)) '|| ','
     || ' ID_EPIS_DOCUMENTATION = decode (' || l_ID_EPIS_DOCUMENTATION_n || ',0,:id_epis_documentation_in, NVL (:id_epis_documentation_in, ID_EPIS_DOCUMENTATION)) '|| ','
     || ' FLG_HAS_ADV_DIRECTIVE = decode (' || l_FLG_HAS_ADV_DIRECTIVE_n || ',0,:flg_has_adv_directive_in, NVL (:flg_has_adv_directive_in, FLG_HAS_ADV_DIRECTIVE)) '|| ','
     || ' FLG_STATUS = decode (' || l_FLG_STATUS_n || ',0,:flg_status_in, NVL (:flg_status_in, FLG_STATUS)) '|| ','
     || ' ID_CANCEL_REASON = decode (' || l_ID_CANCEL_REASON_n || ',0,:id_cancel_reason_in, NVL (:id_cancel_reason_in, ID_CANCEL_REASON)) '|| ','
     || ' ID_PROF_CANCEL = decode (' || l_ID_PROF_CANCEL_n || ',0,:id_prof_cancel_in, NVL (:id_prof_cancel_in, ID_PROF_CANCEL)) '|| ','
     || ' NOTES_CANCEL = decode (' || l_NOTES_CANCEL_n || ',0,:notes_cancel_in, NVL (:notes_cancel_in, NOTES_CANCEL)) '|| ','
     || ' DT_CANCEL = decode (' || l_DT_CANCEL_n || ',0,:dt_cancel_in, NVL (:dt_cancel_in, DT_CANCEL)) '
      || ' where ' || nvl(where_in,'(1=1)')
      || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';




execute immediate 'BEGIN ' || l_sql || '; END;' using in
     id_patient_in,
     id_epis_documentation_in,
     flg_has_adv_directive_in,
     flg_status_in,
     id_cancel_reason_in,
     id_prof_cancel_in,
     notes_cancel_in,
     dt_cancel_in,
    OUT l_rows_out;

if(rows_out is null)
then
rows_out := table_varchar();
end if;

rows_out :=  rows_out MULTISET UNION DISTINCT l_rows_out;

   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'PAT_ADVANCE_DIRECTIVE');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_ADVANCE_DIRECTIVE');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_ADVANCE_DIRECTIVE');
           IF l_name = 'PATADVDIR_CRE_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_CANCEL_REASON'
               , value_in => id_cancel_reason_in);
           END IF;
           IF l_name = 'PATADVDIR_EPISD_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_EPIS_DOCUMENTATION'
               , value_in => id_epis_documentation_in);
           END IF;
           IF l_name = 'PATADVDIR_PAT_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PATIENT'
               , value_in => id_patient_in);
           END IF;
           IF l_name = 'PATADVDIR_PROFC_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_CANCEL'
               , value_in => id_prof_cancel_in);
           END IF;
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END upd;





PROCEDURE upd (
      id_patient_in IN PAT_ADVANCE_DIRECTIVE.ID_PATIENT%TYPE DEFAULT NULL,
      ID_PATIENT_nin IN BOOLEAN := TRUE,
      id_epis_documentation_in IN PAT_ADVANCE_DIRECTIVE.ID_EPIS_DOCUMENTATION%TYPE DEFAULT NULL,
      ID_EPIS_DOCUMENTATION_nin IN BOOLEAN := TRUE,
      flg_has_adv_directive_in IN PAT_ADVANCE_DIRECTIVE.FLG_HAS_ADV_DIRECTIVE%TYPE DEFAULT NULL,
      FLG_HAS_ADV_DIRECTIVE_nin IN BOOLEAN := TRUE,
      flg_status_in IN PAT_ADVANCE_DIRECTIVE.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      id_cancel_reason_in IN PAT_ADVANCE_DIRECTIVE.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      ID_CANCEL_REASON_nin IN BOOLEAN := TRUE,
      id_prof_cancel_in IN PAT_ADVANCE_DIRECTIVE.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      ID_PROF_CANCEL_nin IN BOOLEAN := TRUE,
      notes_cancel_in IN PAT_ADVANCE_DIRECTIVE.NOTES_CANCEL%TYPE DEFAULT NULL,
      NOTES_CANCEL_nin IN BOOLEAN := TRUE,
      dt_cancel_in IN PAT_ADVANCE_DIRECTIVE.DT_CANCEL%TYPE DEFAULT NULL,
      DT_CANCEL_nin IN BOOLEAN := TRUE,
    where_in varchar2 DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
      upd (
      id_patient_in => id_patient_in,
      ID_PATIENT_nin => ID_PATIENT_nin,
      id_epis_documentation_in => id_epis_documentation_in,
      ID_EPIS_DOCUMENTATION_nin => ID_EPIS_DOCUMENTATION_nin,
      flg_has_adv_directive_in => flg_has_adv_directive_in,
      FLG_HAS_ADV_DIRECTIVE_nin => FLG_HAS_ADV_DIRECTIVE_nin,
      flg_status_in => flg_status_in,
      FLG_STATUS_nin => FLG_STATUS_nin,
      id_cancel_reason_in => id_cancel_reason_in,
      ID_CANCEL_REASON_nin => ID_CANCEL_REASON_nin,
      id_prof_cancel_in => id_prof_cancel_in,
      ID_PROF_CANCEL_nin => ID_PROF_CANCEL_nin,
      notes_cancel_in => notes_cancel_in,
      NOTES_CANCEL_nin => NOTES_CANCEL_nin,
      dt_cancel_in => dt_cancel_in,
      DT_CANCEL_nin => DT_CANCEL_nin,
    where_in => where_in,
     handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END upd;

   PROCEDURE upd (
      rec_in IN PAT_ADVANCE_DIRECTIVE%ROWTYPE,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      upd (
         id_pat_advance_directive_in => rec_in.ID_PAT_ADVANCE_DIRECTIVE,
         id_patient_in => rec_in.ID_PATIENT,
         id_epis_documentation_in => rec_in.ID_EPIS_DOCUMENTATION,
         flg_has_adv_directive_in => rec_in.FLG_HAS_ADV_DIRECTIVE,
         flg_status_in => rec_in.FLG_STATUS,
         id_cancel_reason_in => rec_in.ID_CANCEL_REASON,
         id_prof_cancel_in => rec_in.ID_PROF_CANCEL,
         notes_cancel_in => rec_in.NOTES_CANCEL,
         dt_cancel_in => rec_in.DT_CANCEL

        ,handle_error_in => handle_error_in
        , rows_out => rows_out
       );
   END upd;

   PROCEDURE upd (
      rec_in IN PAT_ADVANCE_DIRECTIVE%ROWTYPE,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      upd (
         id_pat_advance_directive_in => rec_in.ID_PAT_ADVANCE_DIRECTIVE,
         id_patient_in => rec_in.ID_PATIENT,
         id_epis_documentation_in => rec_in.ID_EPIS_DOCUMENTATION,
         flg_has_adv_directive_in => rec_in.FLG_HAS_ADV_DIRECTIVE,
         flg_status_in => rec_in.FLG_STATUS,
         id_cancel_reason_in => rec_in.ID_CANCEL_REASON,
         id_prof_cancel_in => rec_in.ID_PROF_CANCEL,
         notes_cancel_in => rec_in.NOTES_CANCEL,
         dt_cancel_in => rec_in.DT_CANCEL

        ,handle_error_in => handle_error_in
        , rows_out => rows_out
       );
   END upd;

   PROCEDURE upd_ins (
      id_pat_advance_directive_in IN PAT_ADVANCE_DIRECTIVE.ID_PAT_ADVANCE_DIRECTIVE%TYPE,
      id_patient_in IN PAT_ADVANCE_DIRECTIVE.ID_PATIENT%TYPE DEFAULT NULL,
      id_epis_documentation_in IN PAT_ADVANCE_DIRECTIVE.ID_EPIS_DOCUMENTATION%TYPE DEFAULT NULL,
      flg_has_adv_directive_in IN PAT_ADVANCE_DIRECTIVE.FLG_HAS_ADV_DIRECTIVE%TYPE DEFAULT NULL,
      flg_status_in IN PAT_ADVANCE_DIRECTIVE.FLG_STATUS%TYPE DEFAULT NULL,
      id_cancel_reason_in IN PAT_ADVANCE_DIRECTIVE.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      id_prof_cancel_in IN PAT_ADVANCE_DIRECTIVE.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN PAT_ADVANCE_DIRECTIVE.NOTES_CANCEL%TYPE DEFAULT NULL,
      dt_cancel_in IN PAT_ADVANCE_DIRECTIVE.DT_CANCEL%TYPE DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      upd (
         id_pat_advance_directive_in => id_pat_advance_directive_in,
         id_patient_in => id_patient_in,
         id_epis_documentation_in => id_epis_documentation_in,
         flg_has_adv_directive_in => flg_has_adv_directive_in,
         flg_status_in => flg_status_in,
         id_cancel_reason_in => id_cancel_reason_in,
         id_prof_cancel_in => id_prof_cancel_in,
         notes_cancel_in => notes_cancel_in,
         dt_cancel_in => dt_cancel_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
       );
      IF SQL%ROWCOUNT = 0
      THEN
         ins (
            id_pat_advance_directive_in => id_pat_advance_directive_in,
            id_patient_in => id_patient_in,
            id_epis_documentation_in => id_epis_documentation_in,
            flg_has_adv_directive_in => flg_has_adv_directive_in,
            flg_status_in => flg_status_in,
            id_cancel_reason_in => id_cancel_reason_in,
            id_prof_cancel_in => id_prof_cancel_in,
            notes_cancel_in => notes_cancel_in,
            dt_cancel_in => dt_cancel_in
            ,handle_error_in => handle_error_in
            , rows_out => rows_out
         );
      END IF;
   END upd_ins;

   PROCEDURE upd_ins (
      id_pat_advance_directive_in IN PAT_ADVANCE_DIRECTIVE.ID_PAT_ADVANCE_DIRECTIVE%TYPE,
      id_patient_in IN PAT_ADVANCE_DIRECTIVE.ID_PATIENT%TYPE DEFAULT NULL,
      id_epis_documentation_in IN PAT_ADVANCE_DIRECTIVE.ID_EPIS_DOCUMENTATION%TYPE DEFAULT NULL,
      flg_has_adv_directive_in IN PAT_ADVANCE_DIRECTIVE.FLG_HAS_ADV_DIRECTIVE%TYPE DEFAULT NULL,
      flg_status_in IN PAT_ADVANCE_DIRECTIVE.FLG_STATUS%TYPE DEFAULT NULL,
      id_cancel_reason_in IN PAT_ADVANCE_DIRECTIVE.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      id_prof_cancel_in IN PAT_ADVANCE_DIRECTIVE.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN PAT_ADVANCE_DIRECTIVE.NOTES_CANCEL%TYPE DEFAULT NULL,
      dt_cancel_in IN PAT_ADVANCE_DIRECTIVE.DT_CANCEL%TYPE DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      upd_ins (
      id_pat_advance_directive_in,
      id_patient_in,
      id_epis_documentation_in,
      flg_has_adv_directive_in,
      flg_status_in,
      id_cancel_reason_in,
      id_prof_cancel_in,
      notes_cancel_in,
      dt_cancel_in,
     handle_error_in
     ,rows_out
      );
   END upd_ins;


   PROCEDURE upd (
      col_in IN PAT_ADVANCE_DIRECTIVE_tc,
      ignore_if_null_in IN BOOLEAN := TRUE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
      l_ID_PAT_ADVANCE_DIRECTIVE ID_PAT_ADVANCE_DIRECTIVE_cc;
      l_ID_PATIENT ID_PATIENT_cc;
      l_ID_EPIS_DOCUMENTATION ID_EPIS_DOCUMENTATION_cc;
      l_FLG_HAS_ADV_DIRECTIVE FLG_HAS_ADV_DIRECTIVE_cc;
      l_FLG_STATUS FLG_STATUS_cc;
      l_ID_CANCEL_REASON ID_CANCEL_REASON_cc;
      l_ID_PROF_CANCEL ID_PROF_CANCEL_cc;
      l_NOTES_CANCEL NOTES_CANCEL_cc;
      l_DT_CANCEL DT_CANCEL_cc;
   BEGIN
      FOR i IN col_in.FIRST .. col_in.LAST loop
         l_ID_PAT_ADVANCE_DIRECTIVE(i) := col_in(i).ID_PAT_ADVANCE_DIRECTIVE;
         l_ID_PATIENT(i) := col_in(i).ID_PATIENT;
         l_ID_EPIS_DOCUMENTATION(i) := col_in(i).ID_EPIS_DOCUMENTATION;
         l_FLG_HAS_ADV_DIRECTIVE(i) := col_in(i).FLG_HAS_ADV_DIRECTIVE;
         l_FLG_STATUS(i) := col_in(i).FLG_STATUS;
         l_ID_CANCEL_REASON(i) := col_in(i).ID_CANCEL_REASON;
         l_ID_PROF_CANCEL(i) := col_in(i).ID_PROF_CANCEL;
         l_NOTES_CANCEL(i) := col_in(i).NOTES_CANCEL;
         l_DT_CANCEL(i) := col_in(i).DT_CANCEL;
      END LOOP;
      IF NVL (ignore_if_null_in, FALSE)
      THEN
         -- Set any columns to their current values
         -- if incoming value is NULL.
         -- Put WHEN clause on column-level triggers!
         FORALL i IN col_in.FIRST .. col_in.LAST
            UPDATE PAT_ADVANCE_DIRECTIVE SET
               ID_PATIENT = NVL (l_ID_PATIENT(i), ID_PATIENT),
               ID_EPIS_DOCUMENTATION = NVL (l_ID_EPIS_DOCUMENTATION(i), ID_EPIS_DOCUMENTATION),
               FLG_HAS_ADV_DIRECTIVE = NVL (l_FLG_HAS_ADV_DIRECTIVE(i), FLG_HAS_ADV_DIRECTIVE),
               FLG_STATUS = NVL (l_FLG_STATUS(i), FLG_STATUS),
               ID_CANCEL_REASON = NVL (l_ID_CANCEL_REASON(i), ID_CANCEL_REASON),
               ID_PROF_CANCEL = NVL (l_ID_PROF_CANCEL(i), ID_PROF_CANCEL),
               NOTES_CANCEL = NVL (l_NOTES_CANCEL(i), NOTES_CANCEL),
               DT_CANCEL = NVL (l_DT_CANCEL(i), DT_CANCEL)
             WHERE
                ID_PAT_ADVANCE_DIRECTIVE = l_ID_PAT_ADVANCE_DIRECTIVE(i)
         ;
      ELSE
         FORALL i IN col_in.FIRST .. col_in.LAST
            UPDATE PAT_ADVANCE_DIRECTIVE SET
               ID_PATIENT = l_ID_PATIENT(i),
               ID_EPIS_DOCUMENTATION = l_ID_EPIS_DOCUMENTATION(i),
               FLG_HAS_ADV_DIRECTIVE = l_FLG_HAS_ADV_DIRECTIVE(i),
               FLG_STATUS = l_FLG_STATUS(i),
               ID_CANCEL_REASON = l_ID_CANCEL_REASON(i),
               ID_PROF_CANCEL = l_ID_PROF_CANCEL(i),
               NOTES_CANCEL = l_NOTES_CANCEL(i),
               DT_CANCEL = l_DT_CANCEL(i)
             WHERE
                ID_PAT_ADVANCE_DIRECTIVE = l_ID_PAT_ADVANCE_DIRECTIVE(i)
         ;
      END IF;
   END upd;


   PROCEDURE upd (
      col_in IN PAT_ADVANCE_DIRECTIVE_tc,
      ignore_if_null_in IN BOOLEAN := TRUE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
     rows_out TABLE_VARCHAR;
   BEGIN
      upd (
      col_in ,
      ignore_if_null_in
     ,handle_error_in
     , rows_out
      );
   END upd;

   FUNCTION dynupdstr (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL)

   RETURN VARCHAR2
   IS
   BEGIN
      RETURN
         'BEGIN UPDATE PAT_ADVANCE_DIRECTIVE
             SET ' || colname_in || ' = :value
           WHERE ' || NVL (where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;' ;
   END dynupdstr;

   FUNCTION dynupdstr_no_rows_out (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL)

   RETURN VARCHAR2
   IS
   BEGIN
      RETURN
         'UPDATE PAT_ADVANCE_DIRECTIVE
             SET ' || colname_in || ' = :value
           WHERE ' || NVL (where_in, '1=1');
   END dynupdstr_no_rows_out;























  PROCEDURE increment_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL
      , increment_value_in IN NUMBER DEFAULT 1
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN UPDATE PAT_ADVANCE_DIRECTIVE set ' || colname_in || '=' || colname_in || ' + ' || nvl(increment_value_in,1) || ' WHERE ' || NVL (where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
      USING OUT rows_out;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'DUPLICATE-VALUE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_ADVANCE_DIRECTIVE');
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_ADVANCE_DIRECTIVE');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_ADVANCE_DIRECTIVE');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END increment_onecol;

   PROCEDURE increment_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL
     , increment_value_in IN NUMBER DEFAULT 1
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   rows_out table_varchar;
   BEGIN
      EXECUTE IMMEDIATE 'UPDATE PAT_ADVANCE_DIRECTIVE set ' || colname_in || '=' || colname_in || ' + ' || nvl(increment_value_in,1) || ' WHERE ' || NVL (where_in, '1=1');
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'DUPLICATE-VALUE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_ADVANCE_DIRECTIVE');
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_ADVANCE_DIRECTIVE');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_ADVANCE_DIRECTIVE');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END increment_onecol;


   -- Delete functionality


   PROCEDURE del (
      id_pat_advance_directive_in IN PAT_ADVANCE_DIRECTIVE.ID_PAT_ADVANCE_DIRECTIVE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM PAT_ADVANCE_DIRECTIVE
       WHERE
          ID_PAT_ADVANCE_DIRECTIVE = id_pat_advance_directive_in
       RETURNING ROWID BULK COLLECT INTO rows_out
         ;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_ADVANCE_DIRECTIVE');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_ADVANCE_DIRECTIVE');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del;




   PROCEDURE del (
      id_pat_advance_directive_in IN PAT_ADVANCE_DIRECTIVE.ID_PAT_ADVANCE_DIRECTIVE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
rows_out TABLE_VARCHAR;
   BEGIN

del (
      id_pat_advance_directive_in => id_pat_advance_directive_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
      );

   END del;








   -- Delete all rows for primary key column ID_PAT_ADVANCE_DIRECTIVE
   PROCEDURE del_ID_PAT_ADVANCE_DIRECTIVE (
      id_pat_advance_directive_in IN PAT_ADVANCE_DIRECTIVE.ID_PAT_ADVANCE_DIRECTIVE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
     )
   IS
   BEGIN
      DELETE FROM PAT_ADVANCE_DIRECTIVE
       WHERE ID_PAT_ADVANCE_DIRECTIVE = id_pat_advance_directive_in
      RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_ADVANCE_DIRECTIVE');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_ADVANCE_DIRECTIVE');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_ID_PAT_ADVANCE_DIRECTIVE;






   -- Delete all rows for primary key column ID_PAT_ADVANCE_DIRECTIVE
   PROCEDURE del_ID_PAT_ADVANCE_DIRECTIVE (
      id_pat_advance_directive_in IN PAT_ADVANCE_DIRECTIVE.ID_PAT_ADVANCE_DIRECTIVE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_ID_PAT_ADVANCE_DIRECTIVE (
      id_pat_advance_directive_in => id_pat_advance_directive_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
     );
   END del_ID_PAT_ADVANCE_DIRECTIVE;















   PROCEDURE del_PATADVDIR_CRE_FK (
      id_cancel_reason_in IN PAT_ADVANCE_DIRECTIVE.ID_CANCEL_REASON%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM PAT_ADVANCE_DIRECTIVE
       WHERE
          ID_CANCEL_REASON = del_PATADVDIR_CRE_FK.id_cancel_reason_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_ADVANCE_DIRECTIVE');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_ADVANCE_DIRECTIVE');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_PATADVDIR_CRE_FK;



PROCEDURE del_PATADVDIR_CRE_FK (
      id_cancel_reason_in IN PAT_ADVANCE_DIRECTIVE.ID_CANCEL_REASON%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_PATADVDIR_CRE_FK (
      id_cancel_reason_in => id_cancel_reason_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_PATADVDIR_CRE_FK;





   PROCEDURE del_PATADVDIR_EPISD_FK (
      id_epis_documentation_in IN PAT_ADVANCE_DIRECTIVE.ID_EPIS_DOCUMENTATION%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM PAT_ADVANCE_DIRECTIVE
       WHERE
          ID_EPIS_DOCUMENTATION = del_PATADVDIR_EPISD_FK.id_epis_documentation_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_ADVANCE_DIRECTIVE');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_ADVANCE_DIRECTIVE');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_PATADVDIR_EPISD_FK;



PROCEDURE del_PATADVDIR_EPISD_FK (
      id_epis_documentation_in IN PAT_ADVANCE_DIRECTIVE.ID_EPIS_DOCUMENTATION%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_PATADVDIR_EPISD_FK (
      id_epis_documentation_in => id_epis_documentation_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_PATADVDIR_EPISD_FK;





   PROCEDURE del_PATADVDIR_PAT_FK (
      id_patient_in IN PAT_ADVANCE_DIRECTIVE.ID_PATIENT%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM PAT_ADVANCE_DIRECTIVE
       WHERE
          ID_PATIENT = del_PATADVDIR_PAT_FK.id_patient_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_ADVANCE_DIRECTIVE');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_ADVANCE_DIRECTIVE');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_PATADVDIR_PAT_FK;



PROCEDURE del_PATADVDIR_PAT_FK (
      id_patient_in IN PAT_ADVANCE_DIRECTIVE.ID_PATIENT%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_PATADVDIR_PAT_FK (
      id_patient_in => id_patient_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_PATADVDIR_PAT_FK;





   PROCEDURE del_PATADVDIR_PROFC_FK (
      id_prof_cancel_in IN PAT_ADVANCE_DIRECTIVE.ID_PROF_CANCEL%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM PAT_ADVANCE_DIRECTIVE
       WHERE
          ID_PROF_CANCEL = del_PATADVDIR_PROFC_FK.id_prof_cancel_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_ADVANCE_DIRECTIVE');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_ADVANCE_DIRECTIVE');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_PATADVDIR_PROFC_FK;



PROCEDURE del_PATADVDIR_PROFC_FK (
      id_prof_cancel_in IN PAT_ADVANCE_DIRECTIVE.ID_PROF_CANCEL%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_PATADVDIR_PROFC_FK (
      id_prof_cancel_in => id_prof_cancel_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_PATADVDIR_PROFC_FK;












   -- Deletions using dynamic SQL
   FUNCTION dyndelstr (where_in IN VARCHAR2) RETURN VARCHAR2
   IS
   BEGIN
      IF where_in IS NULL
      THEN
         RETURN 'DELETE FROM PAT_ADVANCE_DIRECTIVE';
      ELSE
         RETURN
            'DELETE FROM PAT_ADVANCE_DIRECTIVE WHERE ' || where_in;
      END IF;
   END dyndelstr;

   FUNCTION dyncoldelstr (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE)
      RETURN VARCHAR2
   IS
   BEGIN
      RETURN dyndelstr ( colname_in || ' = :value' );
   END;

   PROCEDURE del_by (
      where_clause_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyndelstr (where_clause_in);
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_ADVANCE_DIRECTIVE');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_ADVANCE_DIRECTIVE');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by;





   PROCEDURE del_by (
      where_clause_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr (where_clause_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;' using OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_ADVANCE_DIRECTIVE');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_ADVANCE_DIRECTIVE');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by;





   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_ADVANCE_DIRECTIVE');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_ADVANCE_DIRECTIVE');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;






   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_ADVANCE_DIRECTIVE');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_ADVANCE_DIRECTIVE');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN DATE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_ADVANCE_DIRECTIVE');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_ADVANCE_DIRECTIVE');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN DATE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_ADVANCE_DIRECTIVE');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_ADVANCE_DIRECTIVE');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN TIMESTAMP WITH LOCAL TIME ZONE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_ADVANCE_DIRECTIVE');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_ADVANCE_DIRECTIVE');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN TIMESTAMP WITH LOCAL TIME ZONE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_ADVANCE_DIRECTIVE');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_ADVANCE_DIRECTIVE');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN NUMBER
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_ADVANCE_DIRECTIVE');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_ADVANCE_DIRECTIVE');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;






   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN NUMBER
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
     EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_ADVANCE_DIRECTIVE');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_ADVANCE_DIRECTIVE');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   -- Initialize a record with default values for columns in the table.
   PROCEDURE initrec (
      pat_advance_directive_inout IN OUT PAT_ADVANCE_DIRECTIVE%ROWTYPE
   )
   IS
   BEGIN
      pat_advance_directive_inout.ID_PAT_ADVANCE_DIRECTIVE := NULL;
      pat_advance_directive_inout.ID_PATIENT := NULL;
      pat_advance_directive_inout.ID_EPIS_DOCUMENTATION := NULL;
      pat_advance_directive_inout.FLG_HAS_ADV_DIRECTIVE := NULL;
      pat_advance_directive_inout.FLG_STATUS := NULL;
      pat_advance_directive_inout.ID_CANCEL_REASON := NULL;
      pat_advance_directive_inout.ID_PROF_CANCEL := NULL;
      pat_advance_directive_inout.NOTES_CANCEL := NULL;
      pat_advance_directive_inout.DT_CANCEL := NULL;
   END initrec;

   FUNCTION initrec RETURN PAT_ADVANCE_DIRECTIVE%ROWTYPE
   IS
      l_pat_advance_directive PAT_ADVANCE_DIRECTIVE%ROWTYPE;
   BEGIN
      RETURN l_pat_advance_directive;
   END initrec;


   FUNCTION get_data_rowid(
        rows_in IN TABLE_VARCHAR
        ) RETURN PAT_ADVANCE_DIRECTIVE_tc
   IS
        data PAT_ADVANCE_DIRECTIVE_tc;
   BEGIN
        select * bulk collect into data from PAT_ADVANCE_DIRECTIVE where rowid in (select * from table(rows_in));
        return data;
        EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'get_data_rowid'
           );
   END get_data_rowid;


   FUNCTION get_data_rowid_pat(
        rows_in IN TABLE_VARCHAR
        ) RETURN PAT_ADVANCE_DIRECTIVE_tc
   is
        PRAGMA AUTONOMOUS_TRANSACTION;
        data PAT_ADVANCE_DIRECTIVE_tc;
   BEGIN
        data := get_data_rowid(rows_in);
        commit;
        return data;
        EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'get_data_rowid'
           );
        rollback;
    END get_data_rowid_pat;

BEGIN
   NULL;
END TS_PAT_ADVANCE_DIRECTIVE;
/
