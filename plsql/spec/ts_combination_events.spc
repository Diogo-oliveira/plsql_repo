/*-- Last Change Revision: $Rev: 558917 $*/
/*-- Last Change by: $Author: sergio.santos $*/
/*-- Date of last change: $Date: 2010-07-03 19:11:36 +0100 (s√°b, 03 jul 2010) $*/

CREATE OR REPLACE PACKAGE ts_combination_events
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {1BD37A66-EA60-4927-9A64-F6DD89237236}
| Created On: June 22, 2010 16:42:43
| Created By: ALERT
*/
 IS

    -- Collection of %ROWTYPE records based on "COMBINATION_EVENTS"
    TYPE combination_events_tc IS TABLE OF combination_events%ROWTYPE INDEX BY BINARY_INTEGER;
    TYPE combination_events_ntt IS TABLE OF combination_events%ROWTYPE;
    TYPE combination_events_vat IS VARRAY(100) OF combination_events%ROWTYPE;

    -- Same type structure, with a static name.
    TYPE aat IS TABLE OF combination_events%ROWTYPE INDEX BY BINARY_INTEGER;
    TYPE ntt IS TABLE OF combination_events%ROWTYPE;
    TYPE vat IS VARRAY(100) OF combination_events%ROWTYPE;

    -- Column Collection based on column "ID_COMBINATION_EVENTS"
    TYPE id_combination_events_cc IS TABLE OF combination_events.id_combination_events%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_COMBINATION_SPEC"
    TYPE id_combination_spec_cc IS TABLE OF combination_events.id_combination_spec%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_FUTURE_EVENT_TYPE"
    TYPE id_future_event_type_cc IS TABLE OF combination_events.id_future_event_type%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_EVENT"
    TYPE id_event_cc IS TABLE OF combination_events.id_event%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "FLG_STATUS"
    TYPE flg_status_cc IS TABLE OF combination_events.flg_status%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "CREATE_USER"
    TYPE create_user_cc IS TABLE OF combination_events.create_user%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "CREATE_TIME"
    TYPE create_time_cc IS TABLE OF combination_events.create_time%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "CREATE_INSTITUTION"
    TYPE create_institution_cc IS TABLE OF combination_events.create_institution%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "UPDATE_USER"
    TYPE update_user_cc IS TABLE OF combination_events.update_user%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "UPDATE_TIME"
    TYPE update_time_cc IS TABLE OF combination_events.update_time%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "UPDATE_INSTITUTION"
    TYPE update_institution_cc IS TABLE OF combination_events.update_institution%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "RANK"
    TYPE rank_cc IS TABLE OF combination_events.rank%TYPE INDEX BY BINARY_INTEGER;

    -- Insert one row, providing primary key if present
    PROCEDURE ins
    (
        id_combination_events_in IN combination_events.id_combination_events%TYPE,
        id_combination_spec_in   IN combination_events.id_combination_spec%TYPE DEFAULT NULL,
        id_future_event_type_in  IN combination_events.id_future_event_type%TYPE DEFAULT NULL,
        id_event_in              IN combination_events.id_event%TYPE DEFAULT NULL,
        flg_status_in            IN combination_events.flg_status%TYPE DEFAULT NULL,
        create_user_in           IN combination_events.create_user%TYPE DEFAULT NULL,
        create_time_in           IN combination_events.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN combination_events.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN combination_events.update_user%TYPE DEFAULT NULL,
        update_time_in           IN combination_events.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN combination_events.update_institution%TYPE DEFAULT NULL,
        rank_in                  IN combination_events.rank%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        id_combination_events_in IN combination_events.id_combination_events%TYPE,
        id_combination_spec_in   IN combination_events.id_combination_spec%TYPE DEFAULT NULL,
        id_future_event_type_in  IN combination_events.id_future_event_type%TYPE DEFAULT NULL,
        id_event_in              IN combination_events.id_event%TYPE DEFAULT NULL,
        flg_status_in            IN combination_events.flg_status%TYPE DEFAULT NULL,
        create_user_in           IN combination_events.create_user%TYPE DEFAULT NULL,
        create_time_in           IN combination_events.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN combination_events.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN combination_events.update_user%TYPE DEFAULT NULL,
        update_time_in           IN combination_events.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN combination_events.update_institution%TYPE DEFAULT NULL,
        rank_in                  IN combination_events.rank%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Insert a row based on a record.
    -- Specify whether or not a primary key value should be generated.
    PROCEDURE ins
    (
        rec_in          IN combination_events%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        rec_in          IN combination_events%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers.
    PROCEDURE ins
    (
        rows_in         IN combination_events_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        rows_in         IN combination_events_tc,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Return next primary key value using the named sequence.
    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN combination_events.id_combination_events%TYPE;

    -- Insert one row, generating hidden primary key using a sequence
    PROCEDURE ins
    (
        id_combination_spec_in  IN combination_events.id_combination_spec%TYPE DEFAULT NULL,
        id_future_event_type_in IN combination_events.id_future_event_type%TYPE DEFAULT NULL,
        id_event_in             IN combination_events.id_event%TYPE DEFAULT NULL,
        flg_status_in           IN combination_events.flg_status%TYPE DEFAULT NULL,
        create_user_in          IN combination_events.create_user%TYPE DEFAULT NULL,
        create_time_in          IN combination_events.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN combination_events.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN combination_events.update_user%TYPE DEFAULT NULL,
        update_time_in          IN combination_events.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN combination_events.update_institution%TYPE DEFAULT NULL,
        rank_in                 IN combination_events.rank%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        id_combination_spec_in  IN combination_events.id_combination_spec%TYPE DEFAULT NULL,
        id_future_event_type_in IN combination_events.id_future_event_type%TYPE DEFAULT NULL,
        id_event_in             IN combination_events.id_event%TYPE DEFAULT NULL,
        flg_status_in           IN combination_events.flg_status%TYPE DEFAULT NULL,
        create_user_in          IN combination_events.create_user%TYPE DEFAULT NULL,
        create_time_in          IN combination_events.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN combination_events.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN combination_events.update_user%TYPE DEFAULT NULL,
        update_time_in          IN combination_events.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN combination_events.update_institution%TYPE DEFAULT NULL,
        rank_in                 IN combination_events.rank%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Insert one row, returning primary key generated by sequence
    PROCEDURE ins
    (
        id_combination_spec_in    IN combination_events.id_combination_spec%TYPE DEFAULT NULL,
        id_future_event_type_in   IN combination_events.id_future_event_type%TYPE DEFAULT NULL,
        id_event_in               IN combination_events.id_event%TYPE DEFAULT NULL,
        flg_status_in             IN combination_events.flg_status%TYPE DEFAULT NULL,
        create_user_in            IN combination_events.create_user%TYPE DEFAULT NULL,
        create_time_in            IN combination_events.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN combination_events.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN combination_events.update_user%TYPE DEFAULT NULL,
        update_time_in            IN combination_events.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN combination_events.update_institution%TYPE DEFAULT NULL,
        rank_in                   IN combination_events.rank%TYPE DEFAULT NULL,
        id_combination_events_out IN OUT combination_events.id_combination_events%TYPE
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        id_combination_spec_in    IN combination_events.id_combination_spec%TYPE DEFAULT NULL,
        id_future_event_type_in   IN combination_events.id_future_event_type%TYPE DEFAULT NULL,
        id_event_in               IN combination_events.id_event%TYPE DEFAULT NULL,
        flg_status_in             IN combination_events.flg_status%TYPE DEFAULT NULL,
        create_user_in            IN combination_events.create_user%TYPE DEFAULT NULL,
        create_time_in            IN combination_events.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN combination_events.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN combination_events.update_user%TYPE DEFAULT NULL,
        update_time_in            IN combination_events.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN combination_events.update_institution%TYPE DEFAULT NULL,
        rank_in                   IN combination_events.rank%TYPE DEFAULT NULL,
        id_combination_events_out IN OUT combination_events.id_combination_events%TYPE
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Insert one row with function, return generated primary key
    FUNCTION ins
    (
        id_combination_spec_in  IN combination_events.id_combination_spec%TYPE DEFAULT NULL,
        id_future_event_type_in IN combination_events.id_future_event_type%TYPE DEFAULT NULL,
        id_event_in             IN combination_events.id_event%TYPE DEFAULT NULL,
        flg_status_in           IN combination_events.flg_status%TYPE DEFAULT NULL,
        create_user_in          IN combination_events.create_user%TYPE DEFAULT NULL,
        create_time_in          IN combination_events.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN combination_events.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN combination_events.update_user%TYPE DEFAULT NULL,
        update_time_in          IN combination_events.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN combination_events.update_institution%TYPE DEFAULT NULL,
        rank_in                 IN combination_events.rank%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) RETURN combination_events.id_combination_events%TYPE;

    FUNCTION ins
    (
        id_combination_spec_in  IN combination_events.id_combination_spec%TYPE DEFAULT NULL,
        id_future_event_type_in IN combination_events.id_future_event_type%TYPE DEFAULT NULL,
        id_event_in             IN combination_events.id_event%TYPE DEFAULT NULL,
        flg_status_in           IN combination_events.flg_status%TYPE DEFAULT NULL,
        create_user_in          IN combination_events.create_user%TYPE DEFAULT NULL,
        create_time_in          IN combination_events.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN combination_events.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN combination_events.update_user%TYPE DEFAULT NULL,
        update_time_in          IN combination_events.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN combination_events.update_institution%TYPE DEFAULT NULL,
        rank_in                 IN combination_events.rank%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE
    ) RETURN combination_events.id_combination_events%TYPE;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.

    PROCEDURE upd
    (
        id_combination_events_in IN combination_events.id_combination_events%TYPE,
        id_combination_spec_in   IN combination_events.id_combination_spec%TYPE DEFAULT NULL,
        id_combination_spec_nin  IN BOOLEAN := TRUE,
        id_future_event_type_in  IN combination_events.id_future_event_type%TYPE DEFAULT NULL,
        id_future_event_type_nin IN BOOLEAN := TRUE,
        id_event_in              IN combination_events.id_event%TYPE DEFAULT NULL,
        id_event_nin             IN BOOLEAN := TRUE,
        flg_status_in            IN combination_events.flg_status%TYPE DEFAULT NULL,
        flg_status_nin           IN BOOLEAN := TRUE,
        create_user_in           IN combination_events.create_user%TYPE DEFAULT NULL,
        create_user_nin          IN BOOLEAN := TRUE,
        create_time_in           IN combination_events.create_time%TYPE DEFAULT NULL,
        create_time_nin          IN BOOLEAN := TRUE,
        create_institution_in    IN combination_events.create_institution%TYPE DEFAULT NULL,
        create_institution_nin   IN BOOLEAN := TRUE,
        update_user_in           IN combination_events.update_user%TYPE DEFAULT NULL,
        update_user_nin          IN BOOLEAN := TRUE,
        update_time_in           IN combination_events.update_time%TYPE DEFAULT NULL,
        update_time_nin          IN BOOLEAN := TRUE,
        update_institution_in    IN combination_events.update_institution%TYPE DEFAULT NULL,
        update_institution_nin   IN BOOLEAN := TRUE,
        rank_in                  IN combination_events.rank%TYPE DEFAULT NULL,
        rank_nin                 IN BOOLEAN := TRUE,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 IN OUT table_varchar
    );

    PROCEDURE upd
    (
        id_combination_events_in IN combination_events.id_combination_events%TYPE,
        id_combination_spec_in   IN combination_events.id_combination_spec%TYPE DEFAULT NULL,
        id_combination_spec_nin  IN BOOLEAN := TRUE,
        id_future_event_type_in  IN combination_events.id_future_event_type%TYPE DEFAULT NULL,
        id_future_event_type_nin IN BOOLEAN := TRUE,
        id_event_in              IN combination_events.id_event%TYPE DEFAULT NULL,
        id_event_nin             IN BOOLEAN := TRUE,
        flg_status_in            IN combination_events.flg_status%TYPE DEFAULT NULL,
        flg_status_nin           IN BOOLEAN := TRUE,
        create_user_in           IN combination_events.create_user%TYPE DEFAULT NULL,
        create_user_nin          IN BOOLEAN := TRUE,
        create_time_in           IN combination_events.create_time%TYPE DEFAULT NULL,
        create_time_nin          IN BOOLEAN := TRUE,
        create_institution_in    IN combination_events.create_institution%TYPE DEFAULT NULL,
        create_institution_nin   IN BOOLEAN := TRUE,
        update_user_in           IN combination_events.update_user%TYPE DEFAULT NULL,
        update_user_nin          IN BOOLEAN := TRUE,
        update_time_in           IN combination_events.update_time%TYPE DEFAULT NULL,
        update_time_nin          IN BOOLEAN := TRUE,
        update_institution_in    IN combination_events.update_institution%TYPE DEFAULT NULL,
        update_institution_nin   IN BOOLEAN := TRUE,
        rank_in                  IN combination_events.rank%TYPE DEFAULT NULL,
        rank_nin                 IN BOOLEAN := TRUE,
        handle_error_in          IN BOOLEAN := TRUE
    );

    PROCEDURE upd
    (
        id_combination_spec_in   IN combination_events.id_combination_spec%TYPE DEFAULT NULL,
        id_combination_spec_nin  IN BOOLEAN := TRUE,
        id_future_event_type_in  IN combination_events.id_future_event_type%TYPE DEFAULT NULL,
        id_future_event_type_nin IN BOOLEAN := TRUE,
        id_event_in              IN combination_events.id_event%TYPE DEFAULT NULL,
        id_event_nin             IN BOOLEAN := TRUE,
        flg_status_in            IN combination_events.flg_status%TYPE DEFAULT NULL,
        flg_status_nin           IN BOOLEAN := TRUE,
        create_user_in           IN combination_events.create_user%TYPE DEFAULT NULL,
        create_user_nin          IN BOOLEAN := TRUE,
        create_time_in           IN combination_events.create_time%TYPE DEFAULT NULL,
        create_time_nin          IN BOOLEAN := TRUE,
        create_institution_in    IN combination_events.create_institution%TYPE DEFAULT NULL,
        create_institution_nin   IN BOOLEAN := TRUE,
        update_user_in           IN combination_events.update_user%TYPE DEFAULT NULL,
        update_user_nin          IN BOOLEAN := TRUE,
        update_time_in           IN combination_events.update_time%TYPE DEFAULT NULL,
        update_time_nin          IN BOOLEAN := TRUE,
        update_institution_in    IN combination_events.update_institution%TYPE DEFAULT NULL,
        update_institution_nin   IN BOOLEAN := TRUE,
        rank_in                  IN combination_events.rank%TYPE DEFAULT NULL,
        rank_nin                 IN BOOLEAN := TRUE,
        where_in                 VARCHAR2 DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 IN OUT table_varchar
    );

    PROCEDURE upd
    (
        id_combination_spec_in   IN combination_events.id_combination_spec%TYPE DEFAULT NULL,
        id_combination_spec_nin  IN BOOLEAN := TRUE,
        id_future_event_type_in  IN combination_events.id_future_event_type%TYPE DEFAULT NULL,
        id_future_event_type_nin IN BOOLEAN := TRUE,
        id_event_in              IN combination_events.id_event%TYPE DEFAULT NULL,
        id_event_nin             IN BOOLEAN := TRUE,
        flg_status_in            IN combination_events.flg_status%TYPE DEFAULT NULL,
        flg_status_nin           IN BOOLEAN := TRUE,
        create_user_in           IN combination_events.create_user%TYPE DEFAULT NULL,
        create_user_nin          IN BOOLEAN := TRUE,
        create_time_in           IN combination_events.create_time%TYPE DEFAULT NULL,
        create_time_nin          IN BOOLEAN := TRUE,
        create_institution_in    IN combination_events.create_institution%TYPE DEFAULT NULL,
        create_institution_nin   IN BOOLEAN := TRUE,
        update_user_in           IN combination_events.update_user%TYPE DEFAULT NULL,
        update_user_nin          IN BOOLEAN := TRUE,
        update_time_in           IN combination_events.update_time%TYPE DEFAULT NULL,
        update_time_nin          IN BOOLEAN := TRUE,
        update_institution_in    IN combination_events.update_institution%TYPE DEFAULT NULL,
        update_institution_nin   IN BOOLEAN := TRUE,
        rank_in                  IN combination_events.rank%TYPE DEFAULT NULL,
        rank_nin                 IN BOOLEAN := TRUE,
        where_in                 VARCHAR2 DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE
    );

    PROCEDURE upd_ins
    (
        id_combination_events_in IN combination_events.id_combination_events%TYPE,
        id_combination_spec_in   IN combination_events.id_combination_spec%TYPE DEFAULT NULL,
        id_future_event_type_in  IN combination_events.id_future_event_type%TYPE DEFAULT NULL,
        id_event_in              IN combination_events.id_event%TYPE DEFAULT NULL,
        flg_status_in            IN combination_events.flg_status%TYPE DEFAULT NULL,
        create_user_in           IN combination_events.create_user%TYPE DEFAULT NULL,
        create_time_in           IN combination_events.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN combination_events.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN combination_events.update_user%TYPE DEFAULT NULL,
        update_time_in           IN combination_events.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN combination_events.update_institution%TYPE DEFAULT NULL,
        rank_in                  IN combination_events.rank%TYPE DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 OUT table_varchar
    );

    PROCEDURE upd_ins
    (
        id_combination_events_in IN combination_events.id_combination_events%TYPE,
        id_combination_spec_in   IN combination_events.id_combination_spec%TYPE DEFAULT NULL,
        id_future_event_type_in  IN combination_events.id_future_event_type%TYPE DEFAULT NULL,
        id_event_in              IN combination_events.id_event%TYPE DEFAULT NULL,
        flg_status_in            IN combination_events.flg_status%TYPE DEFAULT NULL,
        create_user_in           IN combination_events.create_user%TYPE DEFAULT NULL,
        create_time_in           IN combination_events.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN combination_events.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN combination_events.update_user%TYPE DEFAULT NULL,
        update_time_in           IN combination_events.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN combination_events.update_institution%TYPE DEFAULT NULL,
        rank_in                  IN combination_events.rank%TYPE DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE
    );

    PROCEDURE upd
    (
        rec_in          IN combination_events%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    );

    PROCEDURE upd
    (
        rec_in          IN combination_events%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    );

    PROCEDURE upd
    (
        col_in            IN combination_events_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    );

    PROCEDURE upd
    (
        col_in            IN combination_events_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    );

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    );

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    );

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_combination_events_in IN combination_events.id_combination_events%TYPE,
        handle_error_in          IN BOOLEAN := TRUE
    );

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_combination_events_in IN combination_events.id_combination_events%TYPE,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 OUT table_varchar
    );

    -- Delete all rows for primary key column ID_COMBINATION_EVENTS
    PROCEDURE del_id_combination_events
    (
        id_combination_events_in IN combination_events.id_combination_events%TYPE,
        handle_error_in          IN BOOLEAN := TRUE
    );

    -- Delete all rows for primary key column ID_COMBINATION_EVENTS
    PROCEDURE del_id_combination_events
    (
        id_combination_events_in IN combination_events.id_combination_events%TYPE,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 OUT table_varchar
    );

    -- Delete for unique value of CE_FET_E_IDX
    PROCEDURE del_ce_fet_e_idx
    (
        id_future_event_type_in IN combination_events.id_future_event_type%TYPE,
        id_event_in             IN combination_events.id_event%TYPE,
        handle_error_in         IN BOOLEAN := TRUE
    );

    -- Delete for unique value of CE_FET_E_IDX
    PROCEDURE del_ce_fet_e_idx
    (
        id_future_event_type_in IN combination_events.id_future_event_type%TYPE,
        id_event_in             IN combination_events.id_event%TYPE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    );

    -- Delete all rows for this CE_CS_FK foreign key value
    PROCEDURE del_ce_cs_fk
    (
        id_combination_spec_in IN combination_events.id_combination_spec%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    );

    -- Delete all rows for this CE_CS_FK foreign key value
    PROCEDURE del_ce_cs_fk
    (
        id_combination_spec_in IN combination_events.id_combination_spec%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    );

    -- Delete all rows for this CE_FET_FK foreign key value
    PROCEDURE del_ce_fet_fk
    (
        id_future_event_type_in IN combination_events.id_future_event_type%TYPE,
        handle_error_in         IN BOOLEAN := TRUE
    );

    -- Delete all rows for this CE_FET_FK foreign key value
    PROCEDURE del_ce_fet_fk
    (
        id_future_event_type_in IN combination_events.id_future_event_type%TYPE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    );

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified VARCHAR2 column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified VARCHAR2 column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified DATE column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified DATE column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified TIMESTAMP column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified TIMESTAMP column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified NUMBER column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified NUMBER column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(combination_events_inout IN OUT combination_events%ROWTYPE);

    FUNCTION initrec RETURN combination_events%ROWTYPE;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN combination_events_tc;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN combination_events_tc;

END ts_combination_events;
/
