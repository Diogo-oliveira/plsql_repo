/*-- Last Change Revision: $Rev: 1674665 $*/
/*-- Last Change by: $Author: telmo.castro $*/
/*-- Date of last change: $Date: 2015-01-02 11:24:24 +0000 (sex, 02 jan 2015) $*/
CREATE OR REPLACE PACKAGE TS_SCHEDULE_BED_HIST
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {1BD37A66-EA60-4927-9A64-F6DD89237236}
| Created On: January 7, 2013 12:10:12
| Created By: ALERT
*/
IS

  -- Collection of %ROWTYPE records based on "SCHEDULE_BED_HIST"
     TYPE SCHEDULE_BED_HIST_tc IS TABLE OF SCHEDULE_BED_HIST%ROWTYPE INDEX BY BINARY_INTEGER;
     TYPE schedule_bed_hist_ntt IS TABLE OF SCHEDULE_BED_HIST%ROWTYPE;
     TYPE schedule_bed_hist_vat IS VARRAY(100) OF SCHEDULE_BED_HIST%ROWTYPE;

  -- Same type structure, with a static name.
     TYPE aat IS TABLE OF SCHEDULE_BED_HIST%ROWTYPE INDEX BY BINARY_INTEGER;
     TYPE ntt IS TABLE OF SCHEDULE_BED_HIST%ROWTYPE;
     TYPE vat IS VARRAY(100) OF SCHEDULE_BED_HIST%ROWTYPE;

   -- Column Collection based on column "ID_SCHEDULE"
   TYPE ID_SCHEDULE_cc IS TABLE OF SCHEDULE_BED_HIST.ID_SCHEDULE%TYPE INDEX BY BINARY_INTEGER;
   -- Column Collection based on column "ID_BED"
   TYPE ID_BED_cc IS TABLE OF SCHEDULE_BED_HIST.ID_BED%TYPE INDEX BY BINARY_INTEGER;
   -- Column Collection based on column "ID_WAITING_LIST"
   TYPE ID_WAITING_LIST_cc IS TABLE OF SCHEDULE_BED_HIST.ID_WAITING_LIST%TYPE INDEX BY BINARY_INTEGER;
   -- Column Collection based on column "FLG_TEMPORARY"
   TYPE FLG_TEMPORARY_cc IS TABLE OF SCHEDULE_BED_HIST.FLG_TEMPORARY%TYPE INDEX BY BINARY_INTEGER;
   -- Column Collection based on column "FLG_CONFLICT"
   TYPE FLG_CONFLICT_cc IS TABLE OF SCHEDULE_BED_HIST.FLG_CONFLICT%TYPE INDEX BY BINARY_INTEGER;
   -- Column Collection based on column "CREATE_USER"
   TYPE CREATE_USER_cc IS TABLE OF SCHEDULE_BED_HIST.CREATE_USER%TYPE INDEX BY BINARY_INTEGER;
   -- Column Collection based on column "CREATE_INSTITUTION"
   TYPE CREATE_INSTITUTION_cc IS TABLE OF SCHEDULE_BED_HIST.CREATE_INSTITUTION%TYPE INDEX BY BINARY_INTEGER;
   -- Column Collection based on column "UPDATE_USER"
   TYPE UPDATE_USER_cc IS TABLE OF SCHEDULE_BED_HIST.UPDATE_USER%TYPE INDEX BY BINARY_INTEGER;
   -- Column Collection based on column "UPDATE_INSTITUTION"
   TYPE UPDATE_INSTITUTION_cc IS TABLE OF SCHEDULE_BED_HIST.UPDATE_INSTITUTION%TYPE INDEX BY BINARY_INTEGER;
   -- Column Collection based on column "CREATE_TIME"
   TYPE CREATE_TIME_cc IS TABLE OF SCHEDULE_BED_HIST.CREATE_TIME%TYPE INDEX BY BINARY_INTEGER;
   -- Column Collection based on column "UPDATE_TIME"
   TYPE UPDATE_TIME_cc IS TABLE OF SCHEDULE_BED_HIST.UPDATE_TIME%TYPE INDEX BY BINARY_INTEGER;
   -- Column Collection based on column "DT_UPDATE"
   TYPE DT_UPDATE_cc IS TABLE OF SCHEDULE_BED_HIST.DT_UPDATE%TYPE INDEX BY BINARY_INTEGER;
   -- Column Collection based on column "ID_PROF_UPDATE"
   TYPE ID_PROF_UPDATE_cc IS TABLE OF SCHEDULE_BED_HIST.ID_PROF_UPDATE%TYPE INDEX BY BINARY_INTEGER;

   -- Insert one row, providing primary key if present
   PROCEDURE ins (
      id_schedule_in IN SCHEDULE_BED_HIST.ID_SCHEDULE%TYPE DEFAULT NULL,
      id_bed_in IN SCHEDULE_BED_HIST.ID_BED%TYPE DEFAULT NULL,
      id_waiting_list_in IN SCHEDULE_BED_HIST.ID_WAITING_LIST%TYPE DEFAULT NULL,
      flg_temporary_in IN SCHEDULE_BED_HIST.FLG_TEMPORARY%TYPE DEFAULT 'Y'
					,
      flg_conflict_in IN SCHEDULE_BED_HIST.FLG_CONFLICT%TYPE DEFAULT 'N',
      create_user_in IN SCHEDULE_BED_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_institution_in IN SCHEDULE_BED_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN SCHEDULE_BED_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_institution_in IN SCHEDULE_BED_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      create_time_in IN SCHEDULE_BED_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      update_time_in IN SCHEDULE_BED_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      dt_update_in IN SCHEDULE_BED_HIST.DT_UPDATE%TYPE DEFAULT current_timestamp
					,
      id_prof_update_in IN SCHEDULE_BED_HIST.ID_PROF_UPDATE%TYPE DEFAULT NULL
      -- Pass false if you want errors to propagate out unhandled
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      );

   PROCEDURE ins (
      id_schedule_in IN SCHEDULE_BED_HIST.ID_SCHEDULE%TYPE DEFAULT NULL,
      id_bed_in IN SCHEDULE_BED_HIST.ID_BED%TYPE DEFAULT NULL,
      id_waiting_list_in IN SCHEDULE_BED_HIST.ID_WAITING_LIST%TYPE DEFAULT NULL,
      flg_temporary_in IN SCHEDULE_BED_HIST.FLG_TEMPORARY%TYPE DEFAULT 'Y'
					,
      flg_conflict_in IN SCHEDULE_BED_HIST.FLG_CONFLICT%TYPE DEFAULT 'N',
      create_user_in IN SCHEDULE_BED_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_institution_in IN SCHEDULE_BED_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN SCHEDULE_BED_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_institution_in IN SCHEDULE_BED_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      create_time_in IN SCHEDULE_BED_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      update_time_in IN SCHEDULE_BED_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      dt_update_in IN SCHEDULE_BED_HIST.DT_UPDATE%TYPE DEFAULT current_timestamp
					,
      id_prof_update_in IN SCHEDULE_BED_HIST.ID_PROF_UPDATE%TYPE DEFAULT NULL
      -- Pass false if you want errors to propagate out unhandled
     ,handle_error_in IN BOOLEAN := TRUE
      );


   -- Insert a row based on a record.
   PROCEDURE ins (
      rec_in IN SCHEDULE_BED_HIST%ROWTYPE
     ,sequence_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   );

   PROCEDURE ins (
      rec_in IN SCHEDULE_BED_HIST%ROWTYPE
     ,sequence_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
   );

   -- Insert a collection of rows using FORALL; all primary key values
   -- must have already been generated, or are handled in triggers.
   PROCEDURE ins (
      rows_in IN SCHEDULE_BED_HIST_tc
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   );

   PROCEDURE ins (
      rows_in IN SCHEDULE_BED_HIST_tc
     ,handle_error_in IN BOOLEAN := TRUE
   );





   -- Use Native Dynamic SQL increment a single NUMBER column
   -- for all rows specified by the dynamic WHERE clause
   PROCEDURE increment_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL
      , increment_value_in IN NUMBER DEFAULT 1
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   );

   PROCEDURE increment_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL
      , increment_value_in IN NUMBER DEFAULT 1
     ,handle_error_in IN BOOLEAN := TRUE
   );







   -- Delete all rows for this SBDH_SBD_FK foreign key value
   PROCEDURE del_SBDH_SBD_FK (
      id_schedule_in IN SCHEDULE_BED_HIST.ID_SCHEDULE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      );

      -- Delete all rows for this SBDH_SBD_FK foreign key value
   PROCEDURE del_SBDH_SBD_FK (
      id_schedule_in IN SCHEDULE_BED_HIST.ID_SCHEDULE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      );

    -- Delete all rows specified by dynamic WHERE clause
   PROCEDURE del_by (
      where_clause_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
      );

      -- Delete all rows specified by dynamic WHERE clause
   PROCEDURE del_by (
      where_clause_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      );

    -- Delete all rows where the specified VARCHAR2 column has
   -- a value that matches the specfified value.
   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
      );


      -- Delete all rows where the specified VARCHAR2 column has
   -- a value that matches the specfified value.
   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      );

    -- Delete all rows where the specified DATE column has
   -- a value that matches the specfified value.
   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN DATE
     ,handle_error_in IN BOOLEAN := TRUE
      );

      -- Delete all rows where the specified DATE column has
   -- a value that matches the specfified value.
   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN DATE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      );


      -- Delete all rows where the specified TIMESTAMP column has
   -- a value that matches the specfified value.
   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN TIMESTAMP WITH LOCAL TIME ZONE
     ,handle_error_in IN BOOLEAN := TRUE
      );

      -- Delete all rows where the specified TIMESTAMP column has
   -- a value that matches the specfified value.
   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN TIMESTAMP WITH LOCAL TIME ZONE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      );

    -- Delete all rows where the specified NUMBER column has
   -- a value that matches the specfified value.
   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN NUMBER
     ,handle_error_in IN BOOLEAN := TRUE
      );

      -- Delete all rows where the specified NUMBER column has
   -- a value that matches the specfified value.
   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN NUMBER
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      );

   -- Initialize a record with default values for columns in the table.
   PROCEDURE initrec (
      schedule_bed_hist_inout IN OUT SCHEDULE_BED_HIST%ROWTYPE
   );

   FUNCTION initrec RETURN SCHEDULE_BED_HIST%ROWTYPE;



   FUNCTION get_data_rowid(
        rows_in IN TABLE_VARCHAR
        ) RETURN SCHEDULE_BED_HIST_tc;


   FUNCTION get_data_rowid_pat(
        rows_in IN TABLE_VARCHAR
        ) RETURN SCHEDULE_BED_HIST_tc;

END TS_SCHEDULE_BED_HIST;
/
