/*-- Last Change Revision: $Rev: 2029101 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:49:47 +0100 (ter, 02 ago 2022) $*/
CREATE OR REPLACE PACKAGE TS_CLINICAL_DATA_REC
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {1BD37A66-EA60-4927-9A64-F6DD89237236}
| Created On: Maio 27, 2014 15:50:56
| Created By: ALERT_CORE_DATA
*/
 IS

  -- Collection of %ROWTYPE records based on "CLINICAL_DATA_REC"
  TYPE CLINICAL_DATA_REC_tc IS TABLE OF CLINICAL_DATA_REC%ROWTYPE INDEX BY BINARY_INTEGER;
  TYPE clinical_data_rec_ntt IS TABLE OF CLINICAL_DATA_REC%ROWTYPE;
  TYPE clinical_data_rec_vat IS VARRAY(100) OF CLINICAL_DATA_REC%ROWTYPE;

  -- Same type structure, with a static name.
  TYPE aat IS TABLE OF CLINICAL_DATA_REC%ROWTYPE INDEX BY BINARY_INTEGER;
  TYPE ntt IS TABLE OF CLINICAL_DATA_REC%ROWTYPE;
  TYPE vat IS VARRAY(100) OF CLINICAL_DATA_REC%ROWTYPE;

  -- Column Collection based on column "ID_CLINICAL_DATA_REC"
  TYPE ID_CLINICAL_DATA_REC_cc IS TABLE OF CLINICAL_DATA_REC.ID_CLINICAL_DATA_REC%TYPE INDEX BY BINARY_INTEGER;
  -- Column Collection based on column "DOC_OID"
  TYPE DOC_OID_cc IS TABLE OF CLINICAL_DATA_REC.DOC_OID%TYPE INDEX BY BINARY_INTEGER;
  -- Column Collection based on column "DOC_SOURCE"
  TYPE DOC_SOURCE_cc IS TABLE OF CLINICAL_DATA_REC.DOC_SOURCE%TYPE INDEX BY BINARY_INTEGER;
  -- Column Collection based on column "ID_PROFESSIONAL"
  TYPE ID_PROFESSIONAL_cc IS TABLE OF CLINICAL_DATA_REC.ID_PROFESSIONAL%TYPE INDEX BY BINARY_INTEGER;
  -- Column Collection based on column "ID_INSTITUTION"
  TYPE ID_INSTITUTION_cc IS TABLE OF CLINICAL_DATA_REC.ID_INSTITUTION%TYPE INDEX BY BINARY_INTEGER;
  -- Column Collection based on column "DT_OPERATION"
  TYPE DT_OPERATION_cc IS TABLE OF CLINICAL_DATA_REC.DT_OPERATION%TYPE INDEX BY BINARY_INTEGER;
  -- Column Collection based on column "FLG_STATUS"
  TYPE FLG_STATUS_cc IS TABLE OF CLINICAL_DATA_REC.FLG_STATUS%TYPE INDEX BY BINARY_INTEGER;
  -- Column Collection based on column "CREATE_USER"
  TYPE CREATE_USER_cc IS TABLE OF CLINICAL_DATA_REC.CREATE_USER%TYPE INDEX BY BINARY_INTEGER;
  -- Column Collection based on column "CREATE_TIME"
  TYPE CREATE_TIME_cc IS TABLE OF CLINICAL_DATA_REC.CREATE_TIME%TYPE INDEX BY BINARY_INTEGER;
  -- Column Collection based on column "CREATE_INSTITUTION"
  TYPE CREATE_INSTITUTION_cc IS TABLE OF CLINICAL_DATA_REC.CREATE_INSTITUTION%TYPE INDEX BY BINARY_INTEGER;
  -- Column Collection based on column "UPDATE_USER"
  TYPE UPDATE_USER_cc IS TABLE OF CLINICAL_DATA_REC.UPDATE_USER%TYPE INDEX BY BINARY_INTEGER;
  -- Column Collection based on column "UPDATE_TIME"
  TYPE UPDATE_TIME_cc IS TABLE OF CLINICAL_DATA_REC.UPDATE_TIME%TYPE INDEX BY BINARY_INTEGER;
  -- Column Collection based on column "UPDATE_INSTITUTION"
  TYPE UPDATE_INSTITUTION_cc IS TABLE OF CLINICAL_DATA_REC.UPDATE_INSTITUTION%TYPE INDEX BY BINARY_INTEGER;
  -- Column Collection based on column "CLINICAL_DATA"
  TYPE CLINICAL_DATA_cc IS TABLE OF CLINICAL_DATA_REC.CLINICAL_DATA%TYPE INDEX BY BINARY_INTEGER;

  TYPE varchar2_t IS TABLE OF VARCHAR2(32767) INDEX BY PLS_INTEGER;
  /*
  START Special logic for handling LOB columns....
  */
  PROCEDURE n_ins_clobs_in_chunks(id_clinical_data_rec_in IN CLINICAL_DATA_REC.ID_CLINICAL_DATA_REC%TYPE,
                                  doc_oid_in              IN CLINICAL_DATA_REC.DOC_OID%TYPE DEFAULT NULL,
                                  doc_source_in           IN CLINICAL_DATA_REC.DOC_SOURCE%TYPE DEFAULT NULL,
                                  id_professional_in      IN CLINICAL_DATA_REC.ID_PROFESSIONAL%TYPE DEFAULT NULL,
                                  id_institution_in       IN CLINICAL_DATA_REC.ID_INSTITUTION%TYPE DEFAULT NULL,
                                  dt_operation_in         IN CLINICAL_DATA_REC.DT_OPERATION%TYPE DEFAULT NULL,
                                  flg_status_in           IN CLINICAL_DATA_REC.FLG_STATUS%TYPE DEFAULT NULL,
                                  create_user_in          IN CLINICAL_DATA_REC.CREATE_USER%TYPE DEFAULT NULL,
                                  create_time_in          IN CLINICAL_DATA_REC.CREATE_TIME%TYPE DEFAULT NULL,
                                  create_institution_in   IN CLINICAL_DATA_REC.CREATE_INSTITUTION%TYPE DEFAULT NULL,
                                  update_user_in          IN CLINICAL_DATA_REC.UPDATE_USER%TYPE DEFAULT NULL,
                                  update_time_in          IN CLINICAL_DATA_REC.UPDATE_TIME%TYPE DEFAULT NULL,
                                  update_institution_in   IN CLINICAL_DATA_REC.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
                                  handle_error_in         IN BOOLEAN := TRUE,
                                  clob_columns_in         IN varchar2_t,
                                  clob_pieces_in          IN varchar2_t);

  PROCEDURE n_upd_clobs_in_chunks(id_clinical_data_rec_in IN CLINICAL_DATA_REC.ID_CLINICAL_DATA_REC%TYPE,
                                  doc_oid_in              IN CLINICAL_DATA_REC.DOC_OID%TYPE DEFAULT NULL,
                                  doc_source_in           IN CLINICAL_DATA_REC.DOC_SOURCE%TYPE DEFAULT NULL,
                                  id_professional_in      IN CLINICAL_DATA_REC.ID_PROFESSIONAL%TYPE DEFAULT NULL,
                                  id_institution_in       IN CLINICAL_DATA_REC.ID_INSTITUTION%TYPE DEFAULT NULL,
                                  dt_operation_in         IN CLINICAL_DATA_REC.DT_OPERATION%TYPE DEFAULT NULL,
                                  flg_status_in           IN CLINICAL_DATA_REC.FLG_STATUS%TYPE DEFAULT NULL,
                                  create_user_in          IN CLINICAL_DATA_REC.CREATE_USER%TYPE DEFAULT NULL,
                                  create_time_in          IN CLINICAL_DATA_REC.CREATE_TIME%TYPE DEFAULT NULL,
                                  create_institution_in   IN CLINICAL_DATA_REC.CREATE_INSTITUTION%TYPE DEFAULT NULL,
                                  update_user_in          IN CLINICAL_DATA_REC.UPDATE_USER%TYPE DEFAULT NULL,
                                  update_time_in          IN CLINICAL_DATA_REC.UPDATE_TIME%TYPE DEFAULT NULL,
                                  update_institution_in   IN CLINICAL_DATA_REC.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
                                  ignore_if_null_in       IN BOOLEAN := TRUE,
                                  handle_error_in         IN BOOLEAN := TRUE,
                                  clob_columns_in         IN varchar2_t,
                                  clob_pieces_in          IN varchar2_t);

  PROCEDURE n_upd_ins_clobs_in_chunks(id_clinical_data_rec_in IN CLINICAL_DATA_REC.ID_CLINICAL_DATA_REC%TYPE,
                                      doc_oid_in              IN CLINICAL_DATA_REC.DOC_OID%TYPE DEFAULT NULL,
                                      doc_source_in           IN CLINICAL_DATA_REC.DOC_SOURCE%TYPE DEFAULT NULL,
                                      id_professional_in      IN CLINICAL_DATA_REC.ID_PROFESSIONAL%TYPE DEFAULT NULL,
                                      id_institution_in       IN CLINICAL_DATA_REC.ID_INSTITUTION%TYPE DEFAULT NULL,
                                      dt_operation_in         IN CLINICAL_DATA_REC.DT_OPERATION%TYPE DEFAULT NULL,
                                      flg_status_in           IN CLINICAL_DATA_REC.FLG_STATUS%TYPE DEFAULT NULL,
                                      create_user_in          IN CLINICAL_DATA_REC.CREATE_USER%TYPE DEFAULT NULL,
                                      create_time_in          IN CLINICAL_DATA_REC.CREATE_TIME%TYPE DEFAULT NULL,
                                      create_institution_in   IN CLINICAL_DATA_REC.CREATE_INSTITUTION%TYPE DEFAULT NULL,
                                      update_user_in          IN CLINICAL_DATA_REC.UPDATE_USER%TYPE DEFAULT NULL,
                                      update_time_in          IN CLINICAL_DATA_REC.UPDATE_TIME%TYPE DEFAULT NULL,
                                      update_institution_in   IN CLINICAL_DATA_REC.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
                                      ignore_if_null_in       IN BOOLEAN DEFAULT TRUE,
                                      handle_error_in         IN BOOLEAN DEFAULT TRUE,
                                      clob_columns_in         IN varchar2_t,
                                      clob_pieces_in          IN varchar2_t);

  /*
  END Special logic for handling LOB columns.
  */
  -- Insert one row, providing primary key if present
  PROCEDURE ins(id_clinical_data_rec_in IN CLINICAL_DATA_REC.ID_CLINICAL_DATA_REC%TYPE,
                doc_oid_in              IN CLINICAL_DATA_REC.DOC_OID%TYPE DEFAULT NULL,
                doc_source_in           IN CLINICAL_DATA_REC.DOC_SOURCE%TYPE DEFAULT NULL,
                id_professional_in      IN CLINICAL_DATA_REC.ID_PROFESSIONAL%TYPE DEFAULT NULL,
                id_institution_in       IN CLINICAL_DATA_REC.ID_INSTITUTION%TYPE DEFAULT NULL,
                dt_operation_in         IN CLINICAL_DATA_REC.DT_OPERATION%TYPE DEFAULT NULL,
                flg_status_in           IN CLINICAL_DATA_REC.FLG_STATUS%TYPE DEFAULT NULL,
                create_user_in          IN CLINICAL_DATA_REC.CREATE_USER%TYPE DEFAULT NULL,
                create_time_in          IN CLINICAL_DATA_REC.CREATE_TIME%TYPE DEFAULT NULL,
                create_institution_in   IN CLINICAL_DATA_REC.CREATE_INSTITUTION%TYPE DEFAULT NULL,
                update_user_in          IN CLINICAL_DATA_REC.UPDATE_USER%TYPE DEFAULT NULL,
                update_time_in          IN CLINICAL_DATA_REC.UPDATE_TIME%TYPE DEFAULT NULL,
                update_institution_in   IN CLINICAL_DATA_REC.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
                clinical_data_in        IN CLINICAL_DATA_REC.CLINICAL_DATA%TYPE DEFAULT NULL
                -- Pass false if you want errors to propagate out unhandled
               ,
                handle_error_in IN BOOLEAN := TRUE,
                rows_out        OUT TABLE_VARCHAR);

  PROCEDURE ins(id_clinical_data_rec_in IN CLINICAL_DATA_REC.ID_CLINICAL_DATA_REC%TYPE,
                doc_oid_in              IN CLINICAL_DATA_REC.DOC_OID%TYPE DEFAULT NULL,
                doc_source_in           IN CLINICAL_DATA_REC.DOC_SOURCE%TYPE DEFAULT NULL,
                id_professional_in      IN CLINICAL_DATA_REC.ID_PROFESSIONAL%TYPE DEFAULT NULL,
                id_institution_in       IN CLINICAL_DATA_REC.ID_INSTITUTION%TYPE DEFAULT NULL,
                dt_operation_in         IN CLINICAL_DATA_REC.DT_OPERATION%TYPE DEFAULT NULL,
                flg_status_in           IN CLINICAL_DATA_REC.FLG_STATUS%TYPE DEFAULT NULL,
                create_user_in          IN CLINICAL_DATA_REC.CREATE_USER%TYPE DEFAULT NULL,
                create_time_in          IN CLINICAL_DATA_REC.CREATE_TIME%TYPE DEFAULT NULL,
                create_institution_in   IN CLINICAL_DATA_REC.CREATE_INSTITUTION%TYPE DEFAULT NULL,
                update_user_in          IN CLINICAL_DATA_REC.UPDATE_USER%TYPE DEFAULT NULL,
                update_time_in          IN CLINICAL_DATA_REC.UPDATE_TIME%TYPE DEFAULT NULL,
                update_institution_in   IN CLINICAL_DATA_REC.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
                clinical_data_in        IN CLINICAL_DATA_REC.CLINICAL_DATA%TYPE DEFAULT NULL
                -- Pass false if you want errors to propagate out unhandled
               ,
                handle_error_in IN BOOLEAN := TRUE);

  -- Insert a row based on a record.
  PROCEDURE ins(rec_in          IN CLINICAL_DATA_REC%ROWTYPE,
                sequence_in     IN VARCHAR2 := NULL,
                handle_error_in IN BOOLEAN := TRUE,
                rows_out        OUT TABLE_VARCHAR);

  PROCEDURE ins(rec_in          IN CLINICAL_DATA_REC%ROWTYPE,
                sequence_in     IN VARCHAR2 := NULL,
                handle_error_in IN BOOLEAN := TRUE);

  -- Insert a collection of rows using FORALL; all primary key values
  -- must have already been generated, or are handled in triggers.
  PROCEDURE ins(rows_in         IN CLINICAL_DATA_REC_tc,
                handle_error_in IN BOOLEAN := TRUE,
                rows_out        OUT TABLE_VARCHAR);

  PROCEDURE ins(rows_in         IN CLINICAL_DATA_REC_tc,
                handle_error_in IN BOOLEAN := TRUE);

  -- Update any/all columns by primary key. If you pass NULL, then
  -- the current column value is set to itself. If you need a more
  -- selected UPDATE then use one of the onecol procedures below.

  PROCEDURE upd(id_clinical_data_rec_in IN CLINICAL_DATA_REC.ID_CLINICAL_DATA_REC%TYPE,
                doc_oid_in              IN CLINICAL_DATA_REC.DOC_OID%TYPE DEFAULT NULL,
                DOC_OID_nin             IN BOOLEAN := TRUE,
                doc_source_in           IN CLINICAL_DATA_REC.DOC_SOURCE%TYPE DEFAULT NULL,
                DOC_SOURCE_nin          IN BOOLEAN := TRUE,
                id_professional_in      IN CLINICAL_DATA_REC.ID_PROFESSIONAL%TYPE DEFAULT NULL,
                ID_PROFESSIONAL_nin     IN BOOLEAN := TRUE,
                id_institution_in       IN CLINICAL_DATA_REC.ID_INSTITUTION%TYPE DEFAULT NULL,
                ID_INSTITUTION_nin      IN BOOLEAN := TRUE,
                dt_operation_in         IN CLINICAL_DATA_REC.DT_OPERATION%TYPE DEFAULT NULL,
                DT_OPERATION_nin        IN BOOLEAN := TRUE,
                flg_status_in           IN CLINICAL_DATA_REC.FLG_STATUS%TYPE DEFAULT NULL,
                FLG_STATUS_nin          IN BOOLEAN := TRUE,
                create_user_in          IN CLINICAL_DATA_REC.CREATE_USER%TYPE DEFAULT NULL,
                CREATE_USER_nin         IN BOOLEAN := TRUE,
                create_time_in          IN CLINICAL_DATA_REC.CREATE_TIME%TYPE DEFAULT NULL,
                CREATE_TIME_nin         IN BOOLEAN := TRUE,
                create_institution_in   IN CLINICAL_DATA_REC.CREATE_INSTITUTION%TYPE DEFAULT NULL,
                CREATE_INSTITUTION_nin  IN BOOLEAN := TRUE,
                update_user_in          IN CLINICAL_DATA_REC.UPDATE_USER%TYPE DEFAULT NULL,
                UPDATE_USER_nin         IN BOOLEAN := TRUE,
                update_time_in          IN CLINICAL_DATA_REC.UPDATE_TIME%TYPE DEFAULT NULL,
                UPDATE_TIME_nin         IN BOOLEAN := TRUE,
                update_institution_in   IN CLINICAL_DATA_REC.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
                UPDATE_INSTITUTION_nin  IN BOOLEAN := TRUE,
                clinical_data_in        IN CLINICAL_DATA_REC.CLINICAL_DATA%TYPE DEFAULT NULL,
                CLINICAL_DATA_nin       IN BOOLEAN := TRUE,
                handle_error_in         IN BOOLEAN := TRUE,
                rows_out                IN OUT TABLE_VARCHAR);

  PROCEDURE upd(id_clinical_data_rec_in IN CLINICAL_DATA_REC.ID_CLINICAL_DATA_REC%TYPE,
                doc_oid_in              IN CLINICAL_DATA_REC.DOC_OID%TYPE DEFAULT NULL,
                DOC_OID_nin             IN BOOLEAN := TRUE,
                doc_source_in           IN CLINICAL_DATA_REC.DOC_SOURCE%TYPE DEFAULT NULL,
                DOC_SOURCE_nin          IN BOOLEAN := TRUE,
                id_professional_in      IN CLINICAL_DATA_REC.ID_PROFESSIONAL%TYPE DEFAULT NULL,
                ID_PROFESSIONAL_nin     IN BOOLEAN := TRUE,
                id_institution_in       IN CLINICAL_DATA_REC.ID_INSTITUTION%TYPE DEFAULT NULL,
                ID_INSTITUTION_nin      IN BOOLEAN := TRUE,
                dt_operation_in         IN CLINICAL_DATA_REC.DT_OPERATION%TYPE DEFAULT NULL,
                DT_OPERATION_nin        IN BOOLEAN := TRUE,
                flg_status_in           IN CLINICAL_DATA_REC.FLG_STATUS%TYPE DEFAULT NULL,
                FLG_STATUS_nin          IN BOOLEAN := TRUE,
                create_user_in          IN CLINICAL_DATA_REC.CREATE_USER%TYPE DEFAULT NULL,
                CREATE_USER_nin         IN BOOLEAN := TRUE,
                create_time_in          IN CLINICAL_DATA_REC.CREATE_TIME%TYPE DEFAULT NULL,
                CREATE_TIME_nin         IN BOOLEAN := TRUE,
                create_institution_in   IN CLINICAL_DATA_REC.CREATE_INSTITUTION%TYPE DEFAULT NULL,
                CREATE_INSTITUTION_nin  IN BOOLEAN := TRUE,
                update_user_in          IN CLINICAL_DATA_REC.UPDATE_USER%TYPE DEFAULT NULL,
                UPDATE_USER_nin         IN BOOLEAN := TRUE,
                update_time_in          IN CLINICAL_DATA_REC.UPDATE_TIME%TYPE DEFAULT NULL,
                UPDATE_TIME_nin         IN BOOLEAN := TRUE,
                update_institution_in   IN CLINICAL_DATA_REC.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
                UPDATE_INSTITUTION_nin  IN BOOLEAN := TRUE,
                clinical_data_in        IN CLINICAL_DATA_REC.CLINICAL_DATA%TYPE DEFAULT NULL,
                CLINICAL_DATA_nin       IN BOOLEAN := TRUE,
                handle_error_in         IN BOOLEAN := TRUE);

  PROCEDURE upd(doc_oid_in             IN CLINICAL_DATA_REC.DOC_OID%TYPE DEFAULT NULL,
                DOC_OID_nin            IN BOOLEAN := TRUE,
                doc_source_in          IN CLINICAL_DATA_REC.DOC_SOURCE%TYPE DEFAULT NULL,
                DOC_SOURCE_nin         IN BOOLEAN := TRUE,
                id_professional_in     IN CLINICAL_DATA_REC.ID_PROFESSIONAL%TYPE DEFAULT NULL,
                ID_PROFESSIONAL_nin    IN BOOLEAN := TRUE,
                id_institution_in      IN CLINICAL_DATA_REC.ID_INSTITUTION%TYPE DEFAULT NULL,
                ID_INSTITUTION_nin     IN BOOLEAN := TRUE,
                dt_operation_in        IN CLINICAL_DATA_REC.DT_OPERATION%TYPE DEFAULT NULL,
                DT_OPERATION_nin       IN BOOLEAN := TRUE,
                flg_status_in          IN CLINICAL_DATA_REC.FLG_STATUS%TYPE DEFAULT NULL,
                FLG_STATUS_nin         IN BOOLEAN := TRUE,
                create_user_in         IN CLINICAL_DATA_REC.CREATE_USER%TYPE DEFAULT NULL,
                CREATE_USER_nin        IN BOOLEAN := TRUE,
                create_time_in         IN CLINICAL_DATA_REC.CREATE_TIME%TYPE DEFAULT NULL,
                CREATE_TIME_nin        IN BOOLEAN := TRUE,
                create_institution_in  IN CLINICAL_DATA_REC.CREATE_INSTITUTION%TYPE DEFAULT NULL,
                CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
                update_user_in         IN CLINICAL_DATA_REC.UPDATE_USER%TYPE DEFAULT NULL,
                UPDATE_USER_nin        IN BOOLEAN := TRUE,
                update_time_in         IN CLINICAL_DATA_REC.UPDATE_TIME%TYPE DEFAULT NULL,
                UPDATE_TIME_nin        IN BOOLEAN := TRUE,
                update_institution_in  IN CLINICAL_DATA_REC.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
                UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
                clinical_data_in       IN CLINICAL_DATA_REC.CLINICAL_DATA%TYPE DEFAULT NULL,
                CLINICAL_DATA_nin      IN BOOLEAN := TRUE,
                where_in               varchar2,
                handle_error_in        IN BOOLEAN := TRUE,
                rows_out               IN OUT TABLE_VARCHAR);

  PROCEDURE upd(doc_oid_in             IN CLINICAL_DATA_REC.DOC_OID%TYPE DEFAULT NULL,
                DOC_OID_nin            IN BOOLEAN := TRUE,
                doc_source_in          IN CLINICAL_DATA_REC.DOC_SOURCE%TYPE DEFAULT NULL,
                DOC_SOURCE_nin         IN BOOLEAN := TRUE,
                id_professional_in     IN CLINICAL_DATA_REC.ID_PROFESSIONAL%TYPE DEFAULT NULL,
                ID_PROFESSIONAL_nin    IN BOOLEAN := TRUE,
                id_institution_in      IN CLINICAL_DATA_REC.ID_INSTITUTION%TYPE DEFAULT NULL,
                ID_INSTITUTION_nin     IN BOOLEAN := TRUE,
                dt_operation_in        IN CLINICAL_DATA_REC.DT_OPERATION%TYPE DEFAULT NULL,
                DT_OPERATION_nin       IN BOOLEAN := TRUE,
                flg_status_in          IN CLINICAL_DATA_REC.FLG_STATUS%TYPE DEFAULT NULL,
                FLG_STATUS_nin         IN BOOLEAN := TRUE,
                create_user_in         IN CLINICAL_DATA_REC.CREATE_USER%TYPE DEFAULT NULL,
                CREATE_USER_nin        IN BOOLEAN := TRUE,
                create_time_in         IN CLINICAL_DATA_REC.CREATE_TIME%TYPE DEFAULT NULL,
                CREATE_TIME_nin        IN BOOLEAN := TRUE,
                create_institution_in  IN CLINICAL_DATA_REC.CREATE_INSTITUTION%TYPE DEFAULT NULL,
                CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
                update_user_in         IN CLINICAL_DATA_REC.UPDATE_USER%TYPE DEFAULT NULL,
                UPDATE_USER_nin        IN BOOLEAN := TRUE,
                update_time_in         IN CLINICAL_DATA_REC.UPDATE_TIME%TYPE DEFAULT NULL,
                UPDATE_TIME_nin        IN BOOLEAN := TRUE,
                update_institution_in  IN CLINICAL_DATA_REC.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
                UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
                clinical_data_in       IN CLINICAL_DATA_REC.CLINICAL_DATA%TYPE DEFAULT NULL,
                CLINICAL_DATA_nin      IN BOOLEAN := TRUE,
                where_in               varchar2,
                handle_error_in        IN BOOLEAN := TRUE);

  PROCEDURE upd_ins(id_clinical_data_rec_in IN CLINICAL_DATA_REC.ID_CLINICAL_DATA_REC%TYPE,
                    doc_oid_in              IN CLINICAL_DATA_REC.DOC_OID%TYPE DEFAULT NULL,
                    doc_source_in           IN CLINICAL_DATA_REC.DOC_SOURCE%TYPE DEFAULT NULL,
                    id_professional_in      IN CLINICAL_DATA_REC.ID_PROFESSIONAL%TYPE DEFAULT NULL,
                    id_institution_in       IN CLINICAL_DATA_REC.ID_INSTITUTION%TYPE DEFAULT NULL,
                    dt_operation_in         IN CLINICAL_DATA_REC.DT_OPERATION%TYPE DEFAULT NULL,
                    flg_status_in           IN CLINICAL_DATA_REC.FLG_STATUS%TYPE DEFAULT NULL,
                    create_user_in          IN CLINICAL_DATA_REC.CREATE_USER%TYPE DEFAULT NULL,
                    create_time_in          IN CLINICAL_DATA_REC.CREATE_TIME%TYPE DEFAULT NULL,
                    create_institution_in   IN CLINICAL_DATA_REC.CREATE_INSTITUTION%TYPE DEFAULT NULL,
                    update_user_in          IN CLINICAL_DATA_REC.UPDATE_USER%TYPE DEFAULT NULL,
                    update_time_in          IN CLINICAL_DATA_REC.UPDATE_TIME%TYPE DEFAULT NULL,
                    update_institution_in   IN CLINICAL_DATA_REC.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
                    clinical_data_in        IN CLINICAL_DATA_REC.CLINICAL_DATA%TYPE DEFAULT NULL,
                    handle_error_in         IN BOOLEAN := TRUE,
                    rows_out                OUT TABLE_VARCHAR);

  PROCEDURE upd_ins(id_clinical_data_rec_in IN CLINICAL_DATA_REC.ID_CLINICAL_DATA_REC%TYPE,
                    doc_oid_in              IN CLINICAL_DATA_REC.DOC_OID%TYPE DEFAULT NULL,
                    doc_source_in           IN CLINICAL_DATA_REC.DOC_SOURCE%TYPE DEFAULT NULL,
                    id_professional_in      IN CLINICAL_DATA_REC.ID_PROFESSIONAL%TYPE DEFAULT NULL,
                    id_institution_in       IN CLINICAL_DATA_REC.ID_INSTITUTION%TYPE DEFAULT NULL,
                    dt_operation_in         IN CLINICAL_DATA_REC.DT_OPERATION%TYPE DEFAULT NULL,
                    flg_status_in           IN CLINICAL_DATA_REC.FLG_STATUS%TYPE DEFAULT NULL,
                    create_user_in          IN CLINICAL_DATA_REC.CREATE_USER%TYPE DEFAULT NULL,
                    create_time_in          IN CLINICAL_DATA_REC.CREATE_TIME%TYPE DEFAULT NULL,
                    create_institution_in   IN CLINICAL_DATA_REC.CREATE_INSTITUTION%TYPE DEFAULT NULL,
                    update_user_in          IN CLINICAL_DATA_REC.UPDATE_USER%TYPE DEFAULT NULL,
                    update_time_in          IN CLINICAL_DATA_REC.UPDATE_TIME%TYPE DEFAULT NULL,
                    update_institution_in   IN CLINICAL_DATA_REC.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
                    clinical_data_in        IN CLINICAL_DATA_REC.CLINICAL_DATA%TYPE DEFAULT NULL,
                    handle_error_in         IN BOOLEAN := TRUE);

  PROCEDURE upd(rec_in          IN CLINICAL_DATA_REC%ROWTYPE,
                handle_error_in IN BOOLEAN := TRUE,
                rows_out        IN OUT TABLE_VARCHAR);

  PROCEDURE upd(rec_in          IN CLINICAL_DATA_REC%ROWTYPE,
                handle_error_in IN BOOLEAN := TRUE);

  PROCEDURE upd(col_in            IN CLINICAL_DATA_REC_tc,
                ignore_if_null_in IN BOOLEAN := TRUE,
                handle_error_in   IN BOOLEAN := TRUE,
                rows_out          IN OUT TABLE_VARCHAR);

  PROCEDURE upd(col_in            IN CLINICAL_DATA_REC_tc,
                ignore_if_null_in IN BOOLEAN := TRUE,
                handle_error_in   IN BOOLEAN := TRUE);

  -- Use Native Dynamic SQL increment a single NUMBER column
  -- for all rows specified by the dynamic WHERE clause
  PROCEDURE increment_onecol(colname_in         IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
                             where_in           IN VARCHAR2 := NULL,
                             increment_value_in IN NUMBER DEFAULT 1,
                             handle_error_in    IN BOOLEAN := TRUE,
                             rows_out           OUT TABLE_VARCHAR);

  PROCEDURE increment_onecol(colname_in         IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
                             where_in           IN VARCHAR2 := NULL,
                             increment_value_in IN NUMBER DEFAULT 1,
                             handle_error_in    IN BOOLEAN := TRUE);

  -- Delete one row by primary key
  PROCEDURE del(id_clinical_data_rec_in IN CLINICAL_DATA_REC.ID_CLINICAL_DATA_REC%TYPE,
                handle_error_in         IN BOOLEAN := TRUE);

  -- Delete one row by primary key
  PROCEDURE del(id_clinical_data_rec_in IN CLINICAL_DATA_REC.ID_CLINICAL_DATA_REC%TYPE,
                handle_error_in         IN BOOLEAN := TRUE,
                rows_out                OUT TABLE_VARCHAR);

  -- Delete all rows for primary key column ID_CLINICAL_DATA_REC
  PROCEDURE del_ID_CLINICAL_DATA_REC(id_clinical_data_rec_in IN CLINICAL_DATA_REC.ID_CLINICAL_DATA_REC%TYPE,
                                     handle_error_in         IN BOOLEAN := TRUE);

  -- Delete all rows for primary key column ID_CLINICAL_DATA_REC
  PROCEDURE del_ID_CLINICAL_DATA_REC(id_clinical_data_rec_in IN CLINICAL_DATA_REC.ID_CLINICAL_DATA_REC%TYPE,
                                     handle_error_in         IN BOOLEAN := TRUE,
                                     rows_out                OUT TABLE_VARCHAR);

  -- Delete all rows for this CDR_AI_FK foreign key value
  PROCEDURE del_CDR_AI_FK(id_institution_in IN CLINICAL_DATA_REC.ID_INSTITUTION%TYPE,
                          handle_error_in   IN BOOLEAN := TRUE);

  -- Delete all rows for this CDR_AI_FK foreign key value
  PROCEDURE del_CDR_AI_FK(id_institution_in IN CLINICAL_DATA_REC.ID_INSTITUTION%TYPE,
                          handle_error_in   IN BOOLEAN := TRUE,
                          rows_out          OUT TABLE_VARCHAR);

  -- Delete all rows for this CDR_P_FK foreign key value
  PROCEDURE del_CDR_P_FK(id_professional_in IN CLINICAL_DATA_REC.ID_PROFESSIONAL%TYPE,
                         handle_error_in    IN BOOLEAN := TRUE);

  -- Delete all rows for this CDR_P_FK foreign key value
  PROCEDURE del_CDR_P_FK(id_professional_in IN CLINICAL_DATA_REC.ID_PROFESSIONAL%TYPE,
                         handle_error_in    IN BOOLEAN := TRUE,
                         rows_out           OUT TABLE_VARCHAR);

  -- Delete all rows specified by dynamic WHERE clause
  PROCEDURE del_by(where_clause_in IN VARCHAR2,
                   handle_error_in IN BOOLEAN := TRUE);

  -- Delete all rows specified by dynamic WHERE clause
  PROCEDURE del_by(where_clause_in IN VARCHAR2,
                   handle_error_in IN BOOLEAN := TRUE,
                   rows_out        OUT TABLE_VARCHAR);

  -- Delete all rows where the specified VARCHAR2 column has
  -- a value that matches the specfified value.
  PROCEDURE del_by_col(colname_in      IN VARCHAR2,
                       colvalue_in     IN VARCHAR2,
                       handle_error_in IN BOOLEAN := TRUE);

  -- Delete all rows where the specified VARCHAR2 column has
  -- a value that matches the specfified value.
  PROCEDURE del_by_col(colname_in      IN VARCHAR2,
                       colvalue_in     IN VARCHAR2,
                       handle_error_in IN BOOLEAN := TRUE,
                       rows_out        OUT TABLE_VARCHAR);

  -- Delete all rows where the specified DATE column has
  -- a value that matches the specfified value.
  PROCEDURE del_by_col(colname_in      IN VARCHAR2,
                       colvalue_in     IN DATE,
                       handle_error_in IN BOOLEAN := TRUE);

  -- Delete all rows where the specified DATE column has
  -- a value that matches the specfified value.
  PROCEDURE del_by_col(colname_in      IN VARCHAR2,
                       colvalue_in     IN DATE,
                       handle_error_in IN BOOLEAN := TRUE,
                       rows_out        OUT TABLE_VARCHAR);

  -- Delete all rows where the specified TIMESTAMP column has
  -- a value that matches the specfified value.
  PROCEDURE del_by_col(colname_in      IN VARCHAR2,
                       colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
                       handle_error_in IN BOOLEAN := TRUE);

  -- Delete all rows where the specified TIMESTAMP column has
  -- a value that matches the specfified value.
  PROCEDURE del_by_col(colname_in      IN VARCHAR2,
                       colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
                       handle_error_in IN BOOLEAN := TRUE,
                       rows_out        OUT TABLE_VARCHAR);

  -- Delete all rows where the specified NUMBER column has
  -- a value that matches the specfified value.
  PROCEDURE del_by_col(colname_in      IN VARCHAR2,
                       colvalue_in     IN NUMBER,
                       handle_error_in IN BOOLEAN := TRUE);

  -- Delete all rows where the specified NUMBER column has
  -- a value that matches the specfified value.
  PROCEDURE del_by_col(colname_in      IN VARCHAR2,
                       colvalue_in     IN NUMBER,
                       handle_error_in IN BOOLEAN := TRUE,
                       rows_out        OUT TABLE_VARCHAR);

  -- Initialize a record with default values for columns in the table.
  PROCEDURE initrec(clinical_data_rec_inout IN OUT CLINICAL_DATA_REC%ROWTYPE);

  FUNCTION initrec RETURN CLINICAL_DATA_REC%ROWTYPE;

  FUNCTION get_data_rowid(rows_in IN TABLE_VARCHAR)
    RETURN CLINICAL_DATA_REC_tc;

  FUNCTION get_data_rowid_pat(rows_in IN TABLE_VARCHAR)
    RETURN CLINICAL_DATA_REC_tc;

END TS_CLINICAL_DATA_REC;
/
