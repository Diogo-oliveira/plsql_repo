/*-- Last Change Revision: $Rev: 2029404 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:51:29 +0100 (ter, 02 ago 2022) $*/

CREATE OR REPLACE PACKAGE ts_vaccine_det
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {1BD37A66-EA60-4927-9A64-F6DD89237236}
| Created On: Novembro 21, 2008 18:26:45
| Created By: ALERT
*/
 IS

    -- Collection of %ROWTYPE records based on "VACCINE_DET"
    TYPE vaccine_det_tc IS TABLE OF vaccine_det%ROWTYPE INDEX BY BINARY_INTEGER;
    TYPE vaccine_det_ntt IS TABLE OF vaccine_det%ROWTYPE;
    TYPE vaccine_det_vat IS VARRAY(100) OF vaccine_det%ROWTYPE;

    -- Same type structure, with a static name.
    TYPE aat IS TABLE OF vaccine_det%ROWTYPE INDEX BY BINARY_INTEGER;
    TYPE ntt IS TABLE OF vaccine_det%ROWTYPE;
    TYPE vat IS VARRAY(100) OF vaccine_det%ROWTYPE;

    -- Column Collection based on column "ID_VACCINE_DET"
    TYPE id_vaccine_det_cc IS TABLE OF vaccine_det.id_vaccine_det%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "MEDID"
    TYPE medid_cc IS TABLE OF vaccine_det.medid%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "FLG_CI"
    TYPE flg_ci_cc IS TABLE OF vaccine_det.flg_ci%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "FLG_TYPE"
    TYPE flg_type_cc IS TABLE OF vaccine_det.flg_type%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_PATIENT"
    TYPE id_patient_cc IS TABLE OF vaccine_det.id_patient%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_EPISODE"
    TYPE id_episode_cc IS TABLE OF vaccine_det.id_episode%TYPE INDEX BY BINARY_INTEGER;

    -- Insert one row, providing primary key if present
    PROCEDURE ins
    (
        id_vaccine_det_in IN vaccine_det.id_vaccine_det%TYPE,
        medid_in          IN vaccine_det.medid%TYPE DEFAULT NULL,
        flg_ci_in         IN vaccine_det.flg_ci%TYPE DEFAULT NULL,
        flg_type_in       IN vaccine_det.flg_type%TYPE DEFAULT NULL,
        id_patient_in     IN vaccine_det.id_patient%TYPE DEFAULT NULL,
        id_episode_in     IN vaccine_det.id_episode%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        id_vaccine_det_in IN vaccine_det.id_vaccine_det%TYPE,
        medid_in          IN vaccine_det.medid%TYPE DEFAULT NULL,
        flg_ci_in         IN vaccine_det.flg_ci%TYPE DEFAULT NULL,
        flg_type_in       IN vaccine_det.flg_type%TYPE DEFAULT NULL,
        id_patient_in     IN vaccine_det.id_patient%TYPE DEFAULT NULL,
        id_episode_in     IN vaccine_det.id_episode%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Insert a row based on a record.
    -- Specify whether or not a primary key value should be generated.
    PROCEDURE ins
    (
        rec_in          IN vaccine_det%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        rec_in          IN vaccine_det%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers.
    PROCEDURE ins
    (
        rows_in         IN vaccine_det_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        rows_in         IN vaccine_det_tc,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Return next primary key value using the named sequence.
    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN vaccine_det.id_vaccine_det%TYPE;

    -- Insert one row, generating hidden primary key using a sequence
    PROCEDURE ins
    (
        medid_in      IN vaccine_det.medid%TYPE DEFAULT NULL,
        flg_ci_in     IN vaccine_det.flg_ci%TYPE DEFAULT NULL,
        flg_type_in   IN vaccine_det.flg_type%TYPE DEFAULT NULL,
        id_patient_in IN vaccine_det.id_patient%TYPE DEFAULT NULL,
        id_episode_in IN vaccine_det.id_episode%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        medid_in      IN vaccine_det.medid%TYPE DEFAULT NULL,
        flg_ci_in     IN vaccine_det.flg_ci%TYPE DEFAULT NULL,
        flg_type_in   IN vaccine_det.flg_type%TYPE DEFAULT NULL,
        id_patient_in IN vaccine_det.id_patient%TYPE DEFAULT NULL,
        id_episode_in IN vaccine_det.id_episode%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Insert one row, returning primary key generated by sequence
    PROCEDURE ins
    (
        medid_in           IN vaccine_det.medid%TYPE DEFAULT NULL,
        flg_ci_in          IN vaccine_det.flg_ci%TYPE DEFAULT NULL,
        flg_type_in        IN vaccine_det.flg_type%TYPE DEFAULT NULL,
        id_patient_in      IN vaccine_det.id_patient%TYPE DEFAULT NULL,
        id_episode_in      IN vaccine_det.id_episode%TYPE DEFAULT NULL,
        id_vaccine_det_out IN OUT vaccine_det.id_vaccine_det%TYPE
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        medid_in           IN vaccine_det.medid%TYPE DEFAULT NULL,
        flg_ci_in          IN vaccine_det.flg_ci%TYPE DEFAULT NULL,
        flg_type_in        IN vaccine_det.flg_type%TYPE DEFAULT NULL,
        id_patient_in      IN vaccine_det.id_patient%TYPE DEFAULT NULL,
        id_episode_in      IN vaccine_det.id_episode%TYPE DEFAULT NULL,
        id_vaccine_det_out IN OUT vaccine_det.id_vaccine_det%TYPE
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Insert one row with function, return generated primary key
    FUNCTION ins
    (
        medid_in      IN vaccine_det.medid%TYPE DEFAULT NULL,
        flg_ci_in     IN vaccine_det.flg_ci%TYPE DEFAULT NULL,
        flg_type_in   IN vaccine_det.flg_type%TYPE DEFAULT NULL,
        id_patient_in IN vaccine_det.id_patient%TYPE DEFAULT NULL,
        id_episode_in IN vaccine_det.id_episode%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) RETURN vaccine_det.id_vaccine_det%TYPE;

    FUNCTION ins
    (
        medid_in      IN vaccine_det.medid%TYPE DEFAULT NULL,
        flg_ci_in     IN vaccine_det.flg_ci%TYPE DEFAULT NULL,
        flg_type_in   IN vaccine_det.flg_type%TYPE DEFAULT NULL,
        id_patient_in IN vaccine_det.id_patient%TYPE DEFAULT NULL,
        id_episode_in IN vaccine_det.id_episode%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE
    ) RETURN vaccine_det.id_vaccine_det%TYPE;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.

    PROCEDURE upd
    (
        id_vaccine_det_in IN vaccine_det.id_vaccine_det%TYPE,
        medid_in          IN vaccine_det.medid%TYPE DEFAULT NULL,
        medid_nin         IN BOOLEAN := TRUE,
        flg_ci_in         IN vaccine_det.flg_ci%TYPE DEFAULT NULL,
        flg_ci_nin        IN BOOLEAN := TRUE,
        flg_type_in       IN vaccine_det.flg_type%TYPE DEFAULT NULL,
        flg_type_nin      IN BOOLEAN := TRUE,
        id_patient_in     IN vaccine_det.id_patient%TYPE DEFAULT NULL,
        id_patient_nin    IN BOOLEAN := TRUE,
        id_episode_in     IN vaccine_det.id_episode%TYPE DEFAULT NULL,
        id_episode_nin    IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    );

    PROCEDURE upd
    (
        id_vaccine_det_in IN vaccine_det.id_vaccine_det%TYPE,
        medid_in          IN vaccine_det.medid%TYPE DEFAULT NULL,
        medid_nin         IN BOOLEAN := TRUE,
        flg_ci_in         IN vaccine_det.flg_ci%TYPE DEFAULT NULL,
        flg_ci_nin        IN BOOLEAN := TRUE,
        flg_type_in       IN vaccine_det.flg_type%TYPE DEFAULT NULL,
        flg_type_nin      IN BOOLEAN := TRUE,
        id_patient_in     IN vaccine_det.id_patient%TYPE DEFAULT NULL,
        id_patient_nin    IN BOOLEAN := TRUE,
        id_episode_in     IN vaccine_det.id_episode%TYPE DEFAULT NULL,
        id_episode_nin    IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    );

    PROCEDURE upd
    (
        medid_in        IN vaccine_det.medid%TYPE DEFAULT NULL,
        medid_nin       IN BOOLEAN := TRUE,
        flg_ci_in       IN vaccine_det.flg_ci%TYPE DEFAULT NULL,
        flg_ci_nin      IN BOOLEAN := TRUE,
        flg_type_in     IN vaccine_det.flg_type%TYPE DEFAULT NULL,
        flg_type_nin    IN BOOLEAN := TRUE,
        id_patient_in   IN vaccine_det.id_patient%TYPE DEFAULT NULL,
        id_patient_nin  IN BOOLEAN := TRUE,
        id_episode_in   IN vaccine_det.id_episode%TYPE DEFAULT NULL,
        id_episode_nin  IN BOOLEAN := TRUE,
        where_in        VARCHAR2 DEFAULT NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    );

    PROCEDURE upd
    (
        medid_in        IN vaccine_det.medid%TYPE DEFAULT NULL,
        medid_nin       IN BOOLEAN := TRUE,
        flg_ci_in       IN vaccine_det.flg_ci%TYPE DEFAULT NULL,
        flg_ci_nin      IN BOOLEAN := TRUE,
        flg_type_in     IN vaccine_det.flg_type%TYPE DEFAULT NULL,
        flg_type_nin    IN BOOLEAN := TRUE,
        id_patient_in   IN vaccine_det.id_patient%TYPE DEFAULT NULL,
        id_patient_nin  IN BOOLEAN := TRUE,
        id_episode_in   IN vaccine_det.id_episode%TYPE DEFAULT NULL,
        id_episode_nin  IN BOOLEAN := TRUE,
        where_in        VARCHAR2 DEFAULT NULL,
        handle_error_in IN BOOLEAN := TRUE
    );

    PROCEDURE upd_ins
    (
        id_vaccine_det_in IN vaccine_det.id_vaccine_det%TYPE,
        medid_in          IN vaccine_det.medid%TYPE DEFAULT NULL,
        flg_ci_in         IN vaccine_det.flg_ci%TYPE DEFAULT NULL,
        flg_type_in       IN vaccine_det.flg_type%TYPE DEFAULT NULL,
        id_patient_in     IN vaccine_det.id_patient%TYPE DEFAULT NULL,
        id_episode_in     IN vaccine_det.id_episode%TYPE DEFAULT NULL,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    );

    PROCEDURE upd_ins
    (
        id_vaccine_det_in IN vaccine_det.id_vaccine_det%TYPE,
        medid_in          IN vaccine_det.medid%TYPE DEFAULT NULL,
        flg_ci_in         IN vaccine_det.flg_ci%TYPE DEFAULT NULL,
        flg_type_in       IN vaccine_det.flg_type%TYPE DEFAULT NULL,
        id_patient_in     IN vaccine_det.id_patient%TYPE DEFAULT NULL,
        id_episode_in     IN vaccine_det.id_episode%TYPE DEFAULT NULL,
        handle_error_in   IN BOOLEAN := TRUE
    );

    PROCEDURE upd
    (
        rec_in          IN vaccine_det%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    );

    PROCEDURE upd
    (
        rec_in          IN vaccine_det%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    );

    PROCEDURE upd
    (
        col_in            IN vaccine_det_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    );

    PROCEDURE upd
    (
        col_in            IN vaccine_det_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    );

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    );

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    );

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_vaccine_det_in IN vaccine_det.id_vaccine_det%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    );

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_vaccine_det_in IN vaccine_det.id_vaccine_det%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    );

    -- Delete all rows for primary key column ID_VACCINE_DET
    PROCEDURE del_id_vaccine_det
    (
        id_vaccine_det_in IN vaccine_det.id_vaccine_det%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    );

    -- Delete all rows for primary key column ID_VACCINE_DET
    PROCEDURE del_id_vaccine_det
    (
        id_vaccine_det_in IN vaccine_det.id_vaccine_det%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    );

    -- Delete all rows for this VAC_EPIS_FK foreign key value
    PROCEDURE del_vac_epis_fk
    (
        id_episode_in   IN vaccine_det.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows for this VAC_EPIS_FK foreign key value
    PROCEDURE del_vac_epis_fk
    (
        id_episode_in   IN vaccine_det.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows for this VAC_PAT_FK foreign key value
    PROCEDURE del_vac_pat_fk
    (
        id_patient_in   IN vaccine_det.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows for this VAC_PAT_FK foreign key value
    PROCEDURE del_vac_pat_fk
    (
        id_patient_in   IN vaccine_det.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified VARCHAR2 column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified VARCHAR2 column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified DATE column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified DATE column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified TIMESTAMP column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified TIMESTAMP column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified NUMBER column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified NUMBER column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(vaccine_det_inout IN OUT vaccine_det%ROWTYPE);

    FUNCTION initrec RETURN vaccine_det%ROWTYPE;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN vaccine_det_tc;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN vaccine_det_tc;

END ts_vaccine_det;
/
