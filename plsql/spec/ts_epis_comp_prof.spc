/*-- Last Change Revision: $Rev: 451968 $*/
/*-- Last Change by: $Author: alexandre.santos $*/
/*-- Date of last change: $Date: 2010-03-25 15:09:59 +0000 (qui, 25 mar 2010) $*/

CREATE OR REPLACE PACKAGE ts_epis_comp_prof
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {1BD37A66-EA60-4927-9A64-F6DD89237236}
| Created On: Dezembro 22, 2009 8:22:35
| Created By: ALERT
*/
 IS

    -- Collection of %ROWTYPE records based on "EPIS_COMP_PROF"
    TYPE epis_comp_prof_tc IS TABLE OF epis_comp_prof%ROWTYPE INDEX BY BINARY_INTEGER;
    TYPE epis_comp_prof_ntt IS TABLE OF epis_comp_prof%ROWTYPE;
    TYPE epis_comp_prof_vat IS VARRAY(100) OF epis_comp_prof%ROWTYPE;

    -- Same type structure, with a static name.
    TYPE aat IS TABLE OF epis_comp_prof%ROWTYPE INDEX BY BINARY_INTEGER;
    TYPE ntt IS TABLE OF epis_comp_prof%ROWTYPE;
    TYPE vat IS VARRAY(100) OF epis_comp_prof%ROWTYPE;

    -- Column Collection based on column "ID_EPIS_COMP_PROF"
    TYPE id_epis_comp_prof_cc IS TABLE OF epis_comp_prof.id_epis_comp_prof%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_EPIS_COMPLICATION"
    TYPE id_epis_complication_cc IS TABLE OF epis_comp_prof.id_epis_complication%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_PROFESSIONAL"
    TYPE id_professional_cc IS TABLE OF epis_comp_prof.id_professional%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_EPIS_COMP_HIST"
    TYPE id_epis_comp_hist_cc IS TABLE OF epis_comp_prof.id_epis_comp_hist%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "CREATE_USER"
    TYPE create_user_cc IS TABLE OF epis_comp_prof.create_user%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "CREATE_TIME"
    TYPE create_time_cc IS TABLE OF epis_comp_prof.create_time%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "CREATE_INSTITUTION"
    TYPE create_institution_cc IS TABLE OF epis_comp_prof.create_institution%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "UPDATE_USER"
    TYPE update_user_cc IS TABLE OF epis_comp_prof.update_user%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "UPDATE_TIME"
    TYPE update_time_cc IS TABLE OF epis_comp_prof.update_time%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "UPDATE_INSTITUTION"
    TYPE update_institution_cc IS TABLE OF epis_comp_prof.update_institution%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "DT_EPIS_COMP_PROF"
    TYPE dt_epis_comp_prof_cc IS TABLE OF epis_comp_prof.dt_epis_comp_prof%TYPE INDEX BY BINARY_INTEGER;

    -- Insert one row, providing primary key if present
    PROCEDURE ins
    (
        id_epis_comp_prof_in    IN epis_comp_prof.id_epis_comp_prof%TYPE,
        id_epis_complication_in IN epis_comp_prof.id_epis_complication%TYPE DEFAULT NULL,
        id_professional_in      IN epis_comp_prof.id_professional%TYPE DEFAULT NULL,
        id_epis_comp_hist_in    IN epis_comp_prof.id_epis_comp_hist%TYPE DEFAULT NULL,
        create_user_in          IN epis_comp_prof.create_user%TYPE DEFAULT NULL,
        create_time_in          IN epis_comp_prof.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN epis_comp_prof.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN epis_comp_prof.update_user%TYPE DEFAULT NULL,
        update_time_in          IN epis_comp_prof.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN epis_comp_prof.update_institution%TYPE DEFAULT NULL,
        dt_epis_comp_prof_in    IN epis_comp_prof.dt_epis_comp_prof%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        id_epis_comp_prof_in    IN epis_comp_prof.id_epis_comp_prof%TYPE,
        id_epis_complication_in IN epis_comp_prof.id_epis_complication%TYPE DEFAULT NULL,
        id_professional_in      IN epis_comp_prof.id_professional%TYPE DEFAULT NULL,
        id_epis_comp_hist_in    IN epis_comp_prof.id_epis_comp_hist%TYPE DEFAULT NULL,
        create_user_in          IN epis_comp_prof.create_user%TYPE DEFAULT NULL,
        create_time_in          IN epis_comp_prof.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN epis_comp_prof.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN epis_comp_prof.update_user%TYPE DEFAULT NULL,
        update_time_in          IN epis_comp_prof.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN epis_comp_prof.update_institution%TYPE DEFAULT NULL,
        dt_epis_comp_prof_in    IN epis_comp_prof.dt_epis_comp_prof%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Insert a row based on a record.
    -- Specify whether or not a primary key value should be generated.
    PROCEDURE ins
    (
        rec_in          IN epis_comp_prof%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        rec_in          IN epis_comp_prof%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers.
    PROCEDURE ins
    (
        rows_in         IN epis_comp_prof_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        rows_in         IN epis_comp_prof_tc,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Return next primary key value using the named sequence.
    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN epis_comp_prof.id_epis_comp_prof%TYPE;

    -- Insert one row, generating hidden primary key using a sequence
    PROCEDURE ins
    (
        id_epis_complication_in IN epis_comp_prof.id_epis_complication%TYPE DEFAULT NULL,
        id_professional_in      IN epis_comp_prof.id_professional%TYPE DEFAULT NULL,
        id_epis_comp_hist_in    IN epis_comp_prof.id_epis_comp_hist%TYPE DEFAULT NULL,
        create_user_in          IN epis_comp_prof.create_user%TYPE DEFAULT NULL,
        create_time_in          IN epis_comp_prof.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN epis_comp_prof.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN epis_comp_prof.update_user%TYPE DEFAULT NULL,
        update_time_in          IN epis_comp_prof.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN epis_comp_prof.update_institution%TYPE DEFAULT NULL,
        dt_epis_comp_prof_in    IN epis_comp_prof.dt_epis_comp_prof%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        id_epis_complication_in IN epis_comp_prof.id_epis_complication%TYPE DEFAULT NULL,
        id_professional_in      IN epis_comp_prof.id_professional%TYPE DEFAULT NULL,
        id_epis_comp_hist_in    IN epis_comp_prof.id_epis_comp_hist%TYPE DEFAULT NULL,
        create_user_in          IN epis_comp_prof.create_user%TYPE DEFAULT NULL,
        create_time_in          IN epis_comp_prof.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN epis_comp_prof.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN epis_comp_prof.update_user%TYPE DEFAULT NULL,
        update_time_in          IN epis_comp_prof.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN epis_comp_prof.update_institution%TYPE DEFAULT NULL,
        dt_epis_comp_prof_in    IN epis_comp_prof.dt_epis_comp_prof%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Insert one row, returning primary key generated by sequence
    PROCEDURE ins
    (
        id_epis_complication_in IN epis_comp_prof.id_epis_complication%TYPE DEFAULT NULL,
        id_professional_in      IN epis_comp_prof.id_professional%TYPE DEFAULT NULL,
        id_epis_comp_hist_in    IN epis_comp_prof.id_epis_comp_hist%TYPE DEFAULT NULL,
        create_user_in          IN epis_comp_prof.create_user%TYPE DEFAULT NULL,
        create_time_in          IN epis_comp_prof.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN epis_comp_prof.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN epis_comp_prof.update_user%TYPE DEFAULT NULL,
        update_time_in          IN epis_comp_prof.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN epis_comp_prof.update_institution%TYPE DEFAULT NULL,
        dt_epis_comp_prof_in    IN epis_comp_prof.dt_epis_comp_prof%TYPE DEFAULT NULL,
        id_epis_comp_prof_out   IN OUT epis_comp_prof.id_epis_comp_prof%TYPE
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        id_epis_complication_in IN epis_comp_prof.id_epis_complication%TYPE DEFAULT NULL,
        id_professional_in      IN epis_comp_prof.id_professional%TYPE DEFAULT NULL,
        id_epis_comp_hist_in    IN epis_comp_prof.id_epis_comp_hist%TYPE DEFAULT NULL,
        create_user_in          IN epis_comp_prof.create_user%TYPE DEFAULT NULL,
        create_time_in          IN epis_comp_prof.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN epis_comp_prof.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN epis_comp_prof.update_user%TYPE DEFAULT NULL,
        update_time_in          IN epis_comp_prof.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN epis_comp_prof.update_institution%TYPE DEFAULT NULL,
        dt_epis_comp_prof_in    IN epis_comp_prof.dt_epis_comp_prof%TYPE DEFAULT NULL,
        id_epis_comp_prof_out   IN OUT epis_comp_prof.id_epis_comp_prof%TYPE
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Insert one row with function, return generated primary key
    FUNCTION ins
    (
        id_epis_complication_in IN epis_comp_prof.id_epis_complication%TYPE DEFAULT NULL,
        id_professional_in      IN epis_comp_prof.id_professional%TYPE DEFAULT NULL,
        id_epis_comp_hist_in    IN epis_comp_prof.id_epis_comp_hist%TYPE DEFAULT NULL,
        create_user_in          IN epis_comp_prof.create_user%TYPE DEFAULT NULL,
        create_time_in          IN epis_comp_prof.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN epis_comp_prof.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN epis_comp_prof.update_user%TYPE DEFAULT NULL,
        update_time_in          IN epis_comp_prof.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN epis_comp_prof.update_institution%TYPE DEFAULT NULL,
        dt_epis_comp_prof_in    IN epis_comp_prof.dt_epis_comp_prof%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) RETURN epis_comp_prof.id_epis_comp_prof%TYPE;

    FUNCTION ins
    (
        id_epis_complication_in IN epis_comp_prof.id_epis_complication%TYPE DEFAULT NULL,
        id_professional_in      IN epis_comp_prof.id_professional%TYPE DEFAULT NULL,
        id_epis_comp_hist_in    IN epis_comp_prof.id_epis_comp_hist%TYPE DEFAULT NULL,
        create_user_in          IN epis_comp_prof.create_user%TYPE DEFAULT NULL,
        create_time_in          IN epis_comp_prof.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN epis_comp_prof.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN epis_comp_prof.update_user%TYPE DEFAULT NULL,
        update_time_in          IN epis_comp_prof.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN epis_comp_prof.update_institution%TYPE DEFAULT NULL,
        dt_epis_comp_prof_in    IN epis_comp_prof.dt_epis_comp_prof%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE
    ) RETURN epis_comp_prof.id_epis_comp_prof%TYPE;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.

    PROCEDURE upd
    (
        id_epis_comp_prof_in     IN epis_comp_prof.id_epis_comp_prof%TYPE,
        id_epis_complication_in  IN epis_comp_prof.id_epis_complication%TYPE DEFAULT NULL,
        id_epis_complication_nin IN BOOLEAN := TRUE,
        id_professional_in       IN epis_comp_prof.id_professional%TYPE DEFAULT NULL,
        id_professional_nin      IN BOOLEAN := TRUE,
        id_epis_comp_hist_in     IN epis_comp_prof.id_epis_comp_hist%TYPE DEFAULT NULL,
        id_epis_comp_hist_nin    IN BOOLEAN := TRUE,
        create_user_in           IN epis_comp_prof.create_user%TYPE DEFAULT NULL,
        create_user_nin          IN BOOLEAN := TRUE,
        create_time_in           IN epis_comp_prof.create_time%TYPE DEFAULT NULL,
        create_time_nin          IN BOOLEAN := TRUE,
        create_institution_in    IN epis_comp_prof.create_institution%TYPE DEFAULT NULL,
        create_institution_nin   IN BOOLEAN := TRUE,
        update_user_in           IN epis_comp_prof.update_user%TYPE DEFAULT NULL,
        update_user_nin          IN BOOLEAN := TRUE,
        update_time_in           IN epis_comp_prof.update_time%TYPE DEFAULT NULL,
        update_time_nin          IN BOOLEAN := TRUE,
        update_institution_in    IN epis_comp_prof.update_institution%TYPE DEFAULT NULL,
        update_institution_nin   IN BOOLEAN := TRUE,
        dt_epis_comp_prof_in     IN epis_comp_prof.dt_epis_comp_prof%TYPE DEFAULT NULL,
        dt_epis_comp_prof_nin    IN BOOLEAN := TRUE,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 IN OUT table_varchar
    );

    PROCEDURE upd
    (
        id_epis_comp_prof_in     IN epis_comp_prof.id_epis_comp_prof%TYPE,
        id_epis_complication_in  IN epis_comp_prof.id_epis_complication%TYPE DEFAULT NULL,
        id_epis_complication_nin IN BOOLEAN := TRUE,
        id_professional_in       IN epis_comp_prof.id_professional%TYPE DEFAULT NULL,
        id_professional_nin      IN BOOLEAN := TRUE,
        id_epis_comp_hist_in     IN epis_comp_prof.id_epis_comp_hist%TYPE DEFAULT NULL,
        id_epis_comp_hist_nin    IN BOOLEAN := TRUE,
        create_user_in           IN epis_comp_prof.create_user%TYPE DEFAULT NULL,
        create_user_nin          IN BOOLEAN := TRUE,
        create_time_in           IN epis_comp_prof.create_time%TYPE DEFAULT NULL,
        create_time_nin          IN BOOLEAN := TRUE,
        create_institution_in    IN epis_comp_prof.create_institution%TYPE DEFAULT NULL,
        create_institution_nin   IN BOOLEAN := TRUE,
        update_user_in           IN epis_comp_prof.update_user%TYPE DEFAULT NULL,
        update_user_nin          IN BOOLEAN := TRUE,
        update_time_in           IN epis_comp_prof.update_time%TYPE DEFAULT NULL,
        update_time_nin          IN BOOLEAN := TRUE,
        update_institution_in    IN epis_comp_prof.update_institution%TYPE DEFAULT NULL,
        update_institution_nin   IN BOOLEAN := TRUE,
        dt_epis_comp_prof_in     IN epis_comp_prof.dt_epis_comp_prof%TYPE DEFAULT NULL,
        dt_epis_comp_prof_nin    IN BOOLEAN := TRUE,
        handle_error_in          IN BOOLEAN := TRUE
    );

    PROCEDURE upd
    (
        id_epis_complication_in  IN epis_comp_prof.id_epis_complication%TYPE DEFAULT NULL,
        id_epis_complication_nin IN BOOLEAN := TRUE,
        id_professional_in       IN epis_comp_prof.id_professional%TYPE DEFAULT NULL,
        id_professional_nin      IN BOOLEAN := TRUE,
        id_epis_comp_hist_in     IN epis_comp_prof.id_epis_comp_hist%TYPE DEFAULT NULL,
        id_epis_comp_hist_nin    IN BOOLEAN := TRUE,
        create_user_in           IN epis_comp_prof.create_user%TYPE DEFAULT NULL,
        create_user_nin          IN BOOLEAN := TRUE,
        create_time_in           IN epis_comp_prof.create_time%TYPE DEFAULT NULL,
        create_time_nin          IN BOOLEAN := TRUE,
        create_institution_in    IN epis_comp_prof.create_institution%TYPE DEFAULT NULL,
        create_institution_nin   IN BOOLEAN := TRUE,
        update_user_in           IN epis_comp_prof.update_user%TYPE DEFAULT NULL,
        update_user_nin          IN BOOLEAN := TRUE,
        update_time_in           IN epis_comp_prof.update_time%TYPE DEFAULT NULL,
        update_time_nin          IN BOOLEAN := TRUE,
        update_institution_in    IN epis_comp_prof.update_institution%TYPE DEFAULT NULL,
        update_institution_nin   IN BOOLEAN := TRUE,
        dt_epis_comp_prof_in     IN epis_comp_prof.dt_epis_comp_prof%TYPE DEFAULT NULL,
        dt_epis_comp_prof_nin    IN BOOLEAN := TRUE,
        where_in                 VARCHAR2 DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 IN OUT table_varchar
    );

    PROCEDURE upd
    (
        id_epis_complication_in  IN epis_comp_prof.id_epis_complication%TYPE DEFAULT NULL,
        id_epis_complication_nin IN BOOLEAN := TRUE,
        id_professional_in       IN epis_comp_prof.id_professional%TYPE DEFAULT NULL,
        id_professional_nin      IN BOOLEAN := TRUE,
        id_epis_comp_hist_in     IN epis_comp_prof.id_epis_comp_hist%TYPE DEFAULT NULL,
        id_epis_comp_hist_nin    IN BOOLEAN := TRUE,
        create_user_in           IN epis_comp_prof.create_user%TYPE DEFAULT NULL,
        create_user_nin          IN BOOLEAN := TRUE,
        create_time_in           IN epis_comp_prof.create_time%TYPE DEFAULT NULL,
        create_time_nin          IN BOOLEAN := TRUE,
        create_institution_in    IN epis_comp_prof.create_institution%TYPE DEFAULT NULL,
        create_institution_nin   IN BOOLEAN := TRUE,
        update_user_in           IN epis_comp_prof.update_user%TYPE DEFAULT NULL,
        update_user_nin          IN BOOLEAN := TRUE,
        update_time_in           IN epis_comp_prof.update_time%TYPE DEFAULT NULL,
        update_time_nin          IN BOOLEAN := TRUE,
        update_institution_in    IN epis_comp_prof.update_institution%TYPE DEFAULT NULL,
        update_institution_nin   IN BOOLEAN := TRUE,
        dt_epis_comp_prof_in     IN epis_comp_prof.dt_epis_comp_prof%TYPE DEFAULT NULL,
        dt_epis_comp_prof_nin    IN BOOLEAN := TRUE,
        where_in                 VARCHAR2 DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE
    );

    PROCEDURE upd_ins
    (
        id_epis_comp_prof_in    IN epis_comp_prof.id_epis_comp_prof%TYPE,
        id_epis_complication_in IN epis_comp_prof.id_epis_complication%TYPE DEFAULT NULL,
        id_professional_in      IN epis_comp_prof.id_professional%TYPE DEFAULT NULL,
        id_epis_comp_hist_in    IN epis_comp_prof.id_epis_comp_hist%TYPE DEFAULT NULL,
        create_user_in          IN epis_comp_prof.create_user%TYPE DEFAULT NULL,
        create_time_in          IN epis_comp_prof.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN epis_comp_prof.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN epis_comp_prof.update_user%TYPE DEFAULT NULL,
        update_time_in          IN epis_comp_prof.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN epis_comp_prof.update_institution%TYPE DEFAULT NULL,
        dt_epis_comp_prof_in    IN epis_comp_prof.dt_epis_comp_prof%TYPE DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    );

    PROCEDURE upd_ins
    (
        id_epis_comp_prof_in    IN epis_comp_prof.id_epis_comp_prof%TYPE,
        id_epis_complication_in IN epis_comp_prof.id_epis_complication%TYPE DEFAULT NULL,
        id_professional_in      IN epis_comp_prof.id_professional%TYPE DEFAULT NULL,
        id_epis_comp_hist_in    IN epis_comp_prof.id_epis_comp_hist%TYPE DEFAULT NULL,
        create_user_in          IN epis_comp_prof.create_user%TYPE DEFAULT NULL,
        create_time_in          IN epis_comp_prof.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN epis_comp_prof.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN epis_comp_prof.update_user%TYPE DEFAULT NULL,
        update_time_in          IN epis_comp_prof.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN epis_comp_prof.update_institution%TYPE DEFAULT NULL,
        dt_epis_comp_prof_in    IN epis_comp_prof.dt_epis_comp_prof%TYPE DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE
    );

    PROCEDURE upd
    (
        rec_in          IN epis_comp_prof%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    );

    PROCEDURE upd
    (
        rec_in          IN epis_comp_prof%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    );

    PROCEDURE upd
    (
        col_in            IN epis_comp_prof_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    );

    PROCEDURE upd
    (
        col_in            IN epis_comp_prof_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    );

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    );

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    );

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_epis_comp_prof_in IN epis_comp_prof.id_epis_comp_prof%TYPE,
        handle_error_in      IN BOOLEAN := TRUE
    );

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_epis_comp_prof_in IN epis_comp_prof.id_epis_comp_prof%TYPE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    );

    -- Delete all rows for primary key column ID_EPIS_COMP_PROF
    PROCEDURE del_id_epis_comp_prof
    (
        id_epis_comp_prof_in IN epis_comp_prof.id_epis_comp_prof%TYPE,
        handle_error_in      IN BOOLEAN := TRUE
    );

    -- Delete all rows for primary key column ID_EPIS_COMP_PROF
    PROCEDURE del_id_epis_comp_prof
    (
        id_epis_comp_prof_in IN epis_comp_prof.id_epis_comp_prof%TYPE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    );

    -- Delete all rows for this EPIS_CP_PRF_EPIS_CP_FK foreign key value
    PROCEDURE del_epis_cp_prf_epis_cp_fk
    (
        id_epis_complication_in IN epis_comp_prof.id_epis_complication%TYPE,
        handle_error_in         IN BOOLEAN := TRUE
    );

    -- Delete all rows for this EPIS_CP_PRF_EPIS_CP_FK foreign key value
    PROCEDURE del_epis_cp_prf_epis_cp_fk
    (
        id_epis_complication_in IN epis_comp_prof.id_epis_complication%TYPE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    );

    -- Delete all rows for this EPIS_CP_PRF_EPIS_CPH_FK foreign key value
    PROCEDURE del_epis_cp_prf_epis_cph_fk
    (
        id_epis_comp_hist_in IN epis_comp_prof.id_epis_comp_hist%TYPE,
        handle_error_in      IN BOOLEAN := TRUE
    );

    -- Delete all rows for this EPIS_CP_PRF_EPIS_CPH_FK foreign key value
    PROCEDURE del_epis_cp_prf_epis_cph_fk
    (
        id_epis_comp_hist_in IN epis_comp_prof.id_epis_comp_hist%TYPE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    );

    -- Delete all rows for this EPIS_CP_PRF_PROF_FK foreign key value
    PROCEDURE del_epis_cp_prf_prof_fk
    (
        id_professional_in IN epis_comp_prof.id_professional%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    );

    -- Delete all rows for this EPIS_CP_PRF_PROF_FK foreign key value
    PROCEDURE del_epis_cp_prf_prof_fk
    (
        id_professional_in IN epis_comp_prof.id_professional%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    );

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified VARCHAR2 column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified VARCHAR2 column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified DATE column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified DATE column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified TIMESTAMP column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified TIMESTAMP column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified NUMBER column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified NUMBER column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(epis_comp_prof_inout IN OUT epis_comp_prof%ROWTYPE);

    FUNCTION initrec RETURN epis_comp_prof%ROWTYPE;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN epis_comp_prof_tc;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN epis_comp_prof_tc;

END ts_epis_comp_prof;
/
