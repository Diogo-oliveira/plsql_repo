/*-- Last Change Revision: $Rev: 2029310 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:50:57 +0100 (ter, 02 ago 2022) $*/

CREATE OR REPLACE PACKAGE ts_prescription
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {1BD37A66-EA60-4927-9A64-F6DD89237236}
| Created On: Novembro 21, 2008 18:26:16
| Created By: ALERT
*/
 IS

    -- Collection of %ROWTYPE records based on "PRESCRIPTION"
    TYPE prescription_tc IS TABLE OF prescription%ROWTYPE INDEX BY BINARY_INTEGER;
    TYPE prescription_ntt IS TABLE OF prescription%ROWTYPE;
    TYPE prescription_vat IS VARRAY(100) OF prescription%ROWTYPE;

    -- Same type structure, with a static name.
    TYPE aat IS TABLE OF prescription%ROWTYPE INDEX BY BINARY_INTEGER;
    TYPE ntt IS TABLE OF prescription%ROWTYPE;
    TYPE vat IS VARRAY(100) OF prescription%ROWTYPE;

    -- Column Collection based on column "ID_PRESCRIPTION"
    TYPE id_prescription_cc IS TABLE OF prescription.id_prescription%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_EPISODE"
    TYPE id_episode_cc IS TABLE OF prescription.id_episode%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_PATIENT"
    TYPE id_patient_cc IS TABLE OF prescription.id_patient%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_PROFESSIONAL"
    TYPE id_professional_cc IS TABLE OF prescription.id_professional%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "FLG_STATUS"
    TYPE flg_status_cc IS TABLE OF prescription.flg_status%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_PROF_CANCEL"
    TYPE id_prof_cancel_cc IS TABLE OF prescription.id_prof_cancel%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "NOTES_CANCEL"
    TYPE notes_cancel_cc IS TABLE OF prescription.notes_cancel%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_INSTITUTION"
    TYPE id_institution_cc IS TABLE OF prescription.id_institution%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_SOFTWARE"
    TYPE id_software_cc IS TABLE OF prescription.id_software%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_INSTITUTION_CANCEL"
    TYPE id_institution_cancel_cc IS TABLE OF prescription.id_institution_cancel%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_SOFTWARE_CANCEL"
    TYPE id_software_cancel_cc IS TABLE OF prescription.id_software_cancel%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "FLG_TYPE"
    TYPE flg_type_cc IS TABLE OF prescription.flg_type%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "FLG_SUB_TYPE"
    TYPE flg_sub_type_cc IS TABLE OF prescription.flg_sub_type%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "FLG_PRINT_TYPE"
    TYPE flg_print_type_cc IS TABLE OF prescription.flg_print_type%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_PROF_PRINT"
    TYPE id_prof_print_cc IS TABLE OF prescription.id_prof_print%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_PREV_EPISODE"
    TYPE id_prev_episode_cc IS TABLE OF prescription.id_prev_episode%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "DT_PRESCRIPTION_TSTZ"
    TYPE dt_prescription_tstz_cc IS TABLE OF prescription.dt_prescription_tstz%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "DT_CANCEL_TSTZ"
    TYPE dt_cancel_tstz_cc IS TABLE OF prescription.dt_cancel_tstz%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "DT_PROF_PRINT_TSTZ"
    TYPE dt_prof_print_tstz_cc IS TABLE OF prescription.dt_prof_print_tstz%TYPE INDEX BY BINARY_INTEGER;

    -- Insert one row, providing primary key if present
    PROCEDURE ins
    (
        id_prescription_in       IN prescription.id_prescription%TYPE,
        id_episode_in            IN prescription.id_episode%TYPE DEFAULT NULL,
        id_patient_in            IN prescription.id_patient%TYPE DEFAULT NULL,
        id_professional_in       IN prescription.id_professional%TYPE DEFAULT NULL,
        flg_status_in            IN prescription.flg_status%TYPE DEFAULT NULL,
        id_prof_cancel_in        IN prescription.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in          IN prescription.notes_cancel%TYPE DEFAULT NULL,
        id_institution_in        IN prescription.id_institution%TYPE DEFAULT NULL,
        id_software_in           IN prescription.id_software%TYPE DEFAULT NULL,
        id_institution_cancel_in IN prescription.id_institution_cancel%TYPE DEFAULT NULL,
        id_software_cancel_in    IN prescription.id_software_cancel%TYPE DEFAULT NULL,
        flg_type_in              IN prescription.flg_type%TYPE DEFAULT NULL,
        flg_sub_type_in          IN prescription.flg_sub_type%TYPE DEFAULT NULL,
        flg_print_type_in        IN prescription.flg_print_type%TYPE DEFAULT NULL,
        id_prof_print_in         IN prescription.id_prof_print%TYPE DEFAULT NULL,
        id_prev_episode_in       IN prescription.id_prev_episode%TYPE DEFAULT NULL,
        dt_prescription_tstz_in  IN prescription.dt_prescription_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in        IN prescription.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_prof_print_tstz_in    IN prescription.dt_prof_print_tstz%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        id_prescription_in       IN prescription.id_prescription%TYPE,
        id_episode_in            IN prescription.id_episode%TYPE DEFAULT NULL,
        id_patient_in            IN prescription.id_patient%TYPE DEFAULT NULL,
        id_professional_in       IN prescription.id_professional%TYPE DEFAULT NULL,
        flg_status_in            IN prescription.flg_status%TYPE DEFAULT NULL,
        id_prof_cancel_in        IN prescription.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in          IN prescription.notes_cancel%TYPE DEFAULT NULL,
        id_institution_in        IN prescription.id_institution%TYPE DEFAULT NULL,
        id_software_in           IN prescription.id_software%TYPE DEFAULT NULL,
        id_institution_cancel_in IN prescription.id_institution_cancel%TYPE DEFAULT NULL,
        id_software_cancel_in    IN prescription.id_software_cancel%TYPE DEFAULT NULL,
        flg_type_in              IN prescription.flg_type%TYPE DEFAULT NULL,
        flg_sub_type_in          IN prescription.flg_sub_type%TYPE DEFAULT NULL,
        flg_print_type_in        IN prescription.flg_print_type%TYPE DEFAULT NULL,
        id_prof_print_in         IN prescription.id_prof_print%TYPE DEFAULT NULL,
        id_prev_episode_in       IN prescription.id_prev_episode%TYPE DEFAULT NULL,
        dt_prescription_tstz_in  IN prescription.dt_prescription_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in        IN prescription.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_prof_print_tstz_in    IN prescription.dt_prof_print_tstz%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Insert a row based on a record.
    -- Specify whether or not a primary key value should be generated.
    PROCEDURE ins
    (
        rec_in          IN prescription%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        rec_in          IN prescription%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers.
    PROCEDURE ins
    (
        rows_in         IN prescription_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        rows_in         IN prescription_tc,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Return next primary key value using the named sequence.
    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN prescription.id_prescription%TYPE;

    -- Insert one row, generating hidden primary key using a sequence
    PROCEDURE ins
    (
        id_episode_in            IN prescription.id_episode%TYPE DEFAULT NULL,
        id_patient_in            IN prescription.id_patient%TYPE DEFAULT NULL,
        id_professional_in       IN prescription.id_professional%TYPE DEFAULT NULL,
        flg_status_in            IN prescription.flg_status%TYPE DEFAULT NULL,
        id_prof_cancel_in        IN prescription.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in          IN prescription.notes_cancel%TYPE DEFAULT NULL,
        id_institution_in        IN prescription.id_institution%TYPE DEFAULT NULL,
        id_software_in           IN prescription.id_software%TYPE DEFAULT NULL,
        id_institution_cancel_in IN prescription.id_institution_cancel%TYPE DEFAULT NULL,
        id_software_cancel_in    IN prescription.id_software_cancel%TYPE DEFAULT NULL,
        flg_type_in              IN prescription.flg_type%TYPE DEFAULT NULL,
        flg_sub_type_in          IN prescription.flg_sub_type%TYPE DEFAULT NULL,
        flg_print_type_in        IN prescription.flg_print_type%TYPE DEFAULT NULL,
        id_prof_print_in         IN prescription.id_prof_print%TYPE DEFAULT NULL,
        id_prev_episode_in       IN prescription.id_prev_episode%TYPE DEFAULT NULL,
        dt_prescription_tstz_in  IN prescription.dt_prescription_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in        IN prescription.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_prof_print_tstz_in    IN prescription.dt_prof_print_tstz%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        id_episode_in            IN prescription.id_episode%TYPE DEFAULT NULL,
        id_patient_in            IN prescription.id_patient%TYPE DEFAULT NULL,
        id_professional_in       IN prescription.id_professional%TYPE DEFAULT NULL,
        flg_status_in            IN prescription.flg_status%TYPE DEFAULT NULL,
        id_prof_cancel_in        IN prescription.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in          IN prescription.notes_cancel%TYPE DEFAULT NULL,
        id_institution_in        IN prescription.id_institution%TYPE DEFAULT NULL,
        id_software_in           IN prescription.id_software%TYPE DEFAULT NULL,
        id_institution_cancel_in IN prescription.id_institution_cancel%TYPE DEFAULT NULL,
        id_software_cancel_in    IN prescription.id_software_cancel%TYPE DEFAULT NULL,
        flg_type_in              IN prescription.flg_type%TYPE DEFAULT NULL,
        flg_sub_type_in          IN prescription.flg_sub_type%TYPE DEFAULT NULL,
        flg_print_type_in        IN prescription.flg_print_type%TYPE DEFAULT NULL,
        id_prof_print_in         IN prescription.id_prof_print%TYPE DEFAULT NULL,
        id_prev_episode_in       IN prescription.id_prev_episode%TYPE DEFAULT NULL,
        dt_prescription_tstz_in  IN prescription.dt_prescription_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in        IN prescription.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_prof_print_tstz_in    IN prescription.dt_prof_print_tstz%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Insert one row, returning primary key generated by sequence
    PROCEDURE ins
    (
        id_episode_in            IN prescription.id_episode%TYPE DEFAULT NULL,
        id_patient_in            IN prescription.id_patient%TYPE DEFAULT NULL,
        id_professional_in       IN prescription.id_professional%TYPE DEFAULT NULL,
        flg_status_in            IN prescription.flg_status%TYPE DEFAULT NULL,
        id_prof_cancel_in        IN prescription.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in          IN prescription.notes_cancel%TYPE DEFAULT NULL,
        id_institution_in        IN prescription.id_institution%TYPE DEFAULT NULL,
        id_software_in           IN prescription.id_software%TYPE DEFAULT NULL,
        id_institution_cancel_in IN prescription.id_institution_cancel%TYPE DEFAULT NULL,
        id_software_cancel_in    IN prescription.id_software_cancel%TYPE DEFAULT NULL,
        flg_type_in              IN prescription.flg_type%TYPE DEFAULT NULL,
        flg_sub_type_in          IN prescription.flg_sub_type%TYPE DEFAULT NULL,
        flg_print_type_in        IN prescription.flg_print_type%TYPE DEFAULT NULL,
        id_prof_print_in         IN prescription.id_prof_print%TYPE DEFAULT NULL,
        id_prev_episode_in       IN prescription.id_prev_episode%TYPE DEFAULT NULL,
        dt_prescription_tstz_in  IN prescription.dt_prescription_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in        IN prescription.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_prof_print_tstz_in    IN prescription.dt_prof_print_tstz%TYPE DEFAULT NULL,
        id_prescription_out      IN OUT prescription.id_prescription%TYPE
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        id_episode_in            IN prescription.id_episode%TYPE DEFAULT NULL,
        id_patient_in            IN prescription.id_patient%TYPE DEFAULT NULL,
        id_professional_in       IN prescription.id_professional%TYPE DEFAULT NULL,
        flg_status_in            IN prescription.flg_status%TYPE DEFAULT NULL,
        id_prof_cancel_in        IN prescription.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in          IN prescription.notes_cancel%TYPE DEFAULT NULL,
        id_institution_in        IN prescription.id_institution%TYPE DEFAULT NULL,
        id_software_in           IN prescription.id_software%TYPE DEFAULT NULL,
        id_institution_cancel_in IN prescription.id_institution_cancel%TYPE DEFAULT NULL,
        id_software_cancel_in    IN prescription.id_software_cancel%TYPE DEFAULT NULL,
        flg_type_in              IN prescription.flg_type%TYPE DEFAULT NULL,
        flg_sub_type_in          IN prescription.flg_sub_type%TYPE DEFAULT NULL,
        flg_print_type_in        IN prescription.flg_print_type%TYPE DEFAULT NULL,
        id_prof_print_in         IN prescription.id_prof_print%TYPE DEFAULT NULL,
        id_prev_episode_in       IN prescription.id_prev_episode%TYPE DEFAULT NULL,
        dt_prescription_tstz_in  IN prescription.dt_prescription_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in        IN prescription.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_prof_print_tstz_in    IN prescription.dt_prof_print_tstz%TYPE DEFAULT NULL,
        id_prescription_out      IN OUT prescription.id_prescription%TYPE
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Insert one row with function, return generated primary key
    FUNCTION ins
    (
        id_episode_in            IN prescription.id_episode%TYPE DEFAULT NULL,
        id_patient_in            IN prescription.id_patient%TYPE DEFAULT NULL,
        id_professional_in       IN prescription.id_professional%TYPE DEFAULT NULL,
        flg_status_in            IN prescription.flg_status%TYPE DEFAULT NULL,
        id_prof_cancel_in        IN prescription.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in          IN prescription.notes_cancel%TYPE DEFAULT NULL,
        id_institution_in        IN prescription.id_institution%TYPE DEFAULT NULL,
        id_software_in           IN prescription.id_software%TYPE DEFAULT NULL,
        id_institution_cancel_in IN prescription.id_institution_cancel%TYPE DEFAULT NULL,
        id_software_cancel_in    IN prescription.id_software_cancel%TYPE DEFAULT NULL,
        flg_type_in              IN prescription.flg_type%TYPE DEFAULT NULL,
        flg_sub_type_in          IN prescription.flg_sub_type%TYPE DEFAULT NULL,
        flg_print_type_in        IN prescription.flg_print_type%TYPE DEFAULT NULL,
        id_prof_print_in         IN prescription.id_prof_print%TYPE DEFAULT NULL,
        id_prev_episode_in       IN prescription.id_prev_episode%TYPE DEFAULT NULL,
        dt_prescription_tstz_in  IN prescription.dt_prescription_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in        IN prescription.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_prof_print_tstz_in    IN prescription.dt_prof_print_tstz%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) RETURN prescription.id_prescription%TYPE;

    FUNCTION ins
    (
        id_episode_in            IN prescription.id_episode%TYPE DEFAULT NULL,
        id_patient_in            IN prescription.id_patient%TYPE DEFAULT NULL,
        id_professional_in       IN prescription.id_professional%TYPE DEFAULT NULL,
        flg_status_in            IN prescription.flg_status%TYPE DEFAULT NULL,
        id_prof_cancel_in        IN prescription.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in          IN prescription.notes_cancel%TYPE DEFAULT NULL,
        id_institution_in        IN prescription.id_institution%TYPE DEFAULT NULL,
        id_software_in           IN prescription.id_software%TYPE DEFAULT NULL,
        id_institution_cancel_in IN prescription.id_institution_cancel%TYPE DEFAULT NULL,
        id_software_cancel_in    IN prescription.id_software_cancel%TYPE DEFAULT NULL,
        flg_type_in              IN prescription.flg_type%TYPE DEFAULT NULL,
        flg_sub_type_in          IN prescription.flg_sub_type%TYPE DEFAULT NULL,
        flg_print_type_in        IN prescription.flg_print_type%TYPE DEFAULT NULL,
        id_prof_print_in         IN prescription.id_prof_print%TYPE DEFAULT NULL,
        id_prev_episode_in       IN prescription.id_prev_episode%TYPE DEFAULT NULL,
        dt_prescription_tstz_in  IN prescription.dt_prescription_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in        IN prescription.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_prof_print_tstz_in    IN prescription.dt_prof_print_tstz%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE
    ) RETURN prescription.id_prescription%TYPE;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.

    PROCEDURE upd
    (
        id_prescription_in        IN prescription.id_prescription%TYPE,
        id_episode_in             IN prescription.id_episode%TYPE DEFAULT NULL,
        id_episode_nin            IN BOOLEAN := TRUE,
        id_patient_in             IN prescription.id_patient%TYPE DEFAULT NULL,
        id_patient_nin            IN BOOLEAN := TRUE,
        id_professional_in        IN prescription.id_professional%TYPE DEFAULT NULL,
        id_professional_nin       IN BOOLEAN := TRUE,
        flg_status_in             IN prescription.flg_status%TYPE DEFAULT NULL,
        flg_status_nin            IN BOOLEAN := TRUE,
        id_prof_cancel_in         IN prescription.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin        IN BOOLEAN := TRUE,
        notes_cancel_in           IN prescription.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin          IN BOOLEAN := TRUE,
        id_institution_in         IN prescription.id_institution%TYPE DEFAULT NULL,
        id_institution_nin        IN BOOLEAN := TRUE,
        id_software_in            IN prescription.id_software%TYPE DEFAULT NULL,
        id_software_nin           IN BOOLEAN := TRUE,
        id_institution_cancel_in  IN prescription.id_institution_cancel%TYPE DEFAULT NULL,
        id_institution_cancel_nin IN BOOLEAN := TRUE,
        id_software_cancel_in     IN prescription.id_software_cancel%TYPE DEFAULT NULL,
        id_software_cancel_nin    IN BOOLEAN := TRUE,
        flg_type_in               IN prescription.flg_type%TYPE DEFAULT NULL,
        flg_type_nin              IN BOOLEAN := TRUE,
        flg_sub_type_in           IN prescription.flg_sub_type%TYPE DEFAULT NULL,
        flg_sub_type_nin          IN BOOLEAN := TRUE,
        flg_print_type_in         IN prescription.flg_print_type%TYPE DEFAULT NULL,
        flg_print_type_nin        IN BOOLEAN := TRUE,
        id_prof_print_in          IN prescription.id_prof_print%TYPE DEFAULT NULL,
        id_prof_print_nin         IN BOOLEAN := TRUE,
        id_prev_episode_in        IN prescription.id_prev_episode%TYPE DEFAULT NULL,
        id_prev_episode_nin       IN BOOLEAN := TRUE,
        dt_prescription_tstz_in   IN prescription.dt_prescription_tstz%TYPE DEFAULT NULL,
        dt_prescription_tstz_nin  IN BOOLEAN := TRUE,
        dt_cancel_tstz_in         IN prescription.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin        IN BOOLEAN := TRUE,
        dt_prof_print_tstz_in     IN prescription.dt_prof_print_tstz%TYPE DEFAULT NULL,
        dt_prof_print_tstz_nin    IN BOOLEAN := TRUE,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  IN OUT table_varchar
    );

    PROCEDURE upd
    (
        id_prescription_in        IN prescription.id_prescription%TYPE,
        id_episode_in             IN prescription.id_episode%TYPE DEFAULT NULL,
        id_episode_nin            IN BOOLEAN := TRUE,
        id_patient_in             IN prescription.id_patient%TYPE DEFAULT NULL,
        id_patient_nin            IN BOOLEAN := TRUE,
        id_professional_in        IN prescription.id_professional%TYPE DEFAULT NULL,
        id_professional_nin       IN BOOLEAN := TRUE,
        flg_status_in             IN prescription.flg_status%TYPE DEFAULT NULL,
        flg_status_nin            IN BOOLEAN := TRUE,
        id_prof_cancel_in         IN prescription.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin        IN BOOLEAN := TRUE,
        notes_cancel_in           IN prescription.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin          IN BOOLEAN := TRUE,
        id_institution_in         IN prescription.id_institution%TYPE DEFAULT NULL,
        id_institution_nin        IN BOOLEAN := TRUE,
        id_software_in            IN prescription.id_software%TYPE DEFAULT NULL,
        id_software_nin           IN BOOLEAN := TRUE,
        id_institution_cancel_in  IN prescription.id_institution_cancel%TYPE DEFAULT NULL,
        id_institution_cancel_nin IN BOOLEAN := TRUE,
        id_software_cancel_in     IN prescription.id_software_cancel%TYPE DEFAULT NULL,
        id_software_cancel_nin    IN BOOLEAN := TRUE,
        flg_type_in               IN prescription.flg_type%TYPE DEFAULT NULL,
        flg_type_nin              IN BOOLEAN := TRUE,
        flg_sub_type_in           IN prescription.flg_sub_type%TYPE DEFAULT NULL,
        flg_sub_type_nin          IN BOOLEAN := TRUE,
        flg_print_type_in         IN prescription.flg_print_type%TYPE DEFAULT NULL,
        flg_print_type_nin        IN BOOLEAN := TRUE,
        id_prof_print_in          IN prescription.id_prof_print%TYPE DEFAULT NULL,
        id_prof_print_nin         IN BOOLEAN := TRUE,
        id_prev_episode_in        IN prescription.id_prev_episode%TYPE DEFAULT NULL,
        id_prev_episode_nin       IN BOOLEAN := TRUE,
        dt_prescription_tstz_in   IN prescription.dt_prescription_tstz%TYPE DEFAULT NULL,
        dt_prescription_tstz_nin  IN BOOLEAN := TRUE,
        dt_cancel_tstz_in         IN prescription.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin        IN BOOLEAN := TRUE,
        dt_prof_print_tstz_in     IN prescription.dt_prof_print_tstz%TYPE DEFAULT NULL,
        dt_prof_print_tstz_nin    IN BOOLEAN := TRUE,
        handle_error_in           IN BOOLEAN := TRUE
    );

    PROCEDURE upd
    (
        id_episode_in             IN prescription.id_episode%TYPE DEFAULT NULL,
        id_episode_nin            IN BOOLEAN := TRUE,
        id_patient_in             IN prescription.id_patient%TYPE DEFAULT NULL,
        id_patient_nin            IN BOOLEAN := TRUE,
        id_professional_in        IN prescription.id_professional%TYPE DEFAULT NULL,
        id_professional_nin       IN BOOLEAN := TRUE,
        flg_status_in             IN prescription.flg_status%TYPE DEFAULT NULL,
        flg_status_nin            IN BOOLEAN := TRUE,
        id_prof_cancel_in         IN prescription.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin        IN BOOLEAN := TRUE,
        notes_cancel_in           IN prescription.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin          IN BOOLEAN := TRUE,
        id_institution_in         IN prescription.id_institution%TYPE DEFAULT NULL,
        id_institution_nin        IN BOOLEAN := TRUE,
        id_software_in            IN prescription.id_software%TYPE DEFAULT NULL,
        id_software_nin           IN BOOLEAN := TRUE,
        id_institution_cancel_in  IN prescription.id_institution_cancel%TYPE DEFAULT NULL,
        id_institution_cancel_nin IN BOOLEAN := TRUE,
        id_software_cancel_in     IN prescription.id_software_cancel%TYPE DEFAULT NULL,
        id_software_cancel_nin    IN BOOLEAN := TRUE,
        flg_type_in               IN prescription.flg_type%TYPE DEFAULT NULL,
        flg_type_nin              IN BOOLEAN := TRUE,
        flg_sub_type_in           IN prescription.flg_sub_type%TYPE DEFAULT NULL,
        flg_sub_type_nin          IN BOOLEAN := TRUE,
        flg_print_type_in         IN prescription.flg_print_type%TYPE DEFAULT NULL,
        flg_print_type_nin        IN BOOLEAN := TRUE,
        id_prof_print_in          IN prescription.id_prof_print%TYPE DEFAULT NULL,
        id_prof_print_nin         IN BOOLEAN := TRUE,
        id_prev_episode_in        IN prescription.id_prev_episode%TYPE DEFAULT NULL,
        id_prev_episode_nin       IN BOOLEAN := TRUE,
        dt_prescription_tstz_in   IN prescription.dt_prescription_tstz%TYPE DEFAULT NULL,
        dt_prescription_tstz_nin  IN BOOLEAN := TRUE,
        dt_cancel_tstz_in         IN prescription.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin        IN BOOLEAN := TRUE,
        dt_prof_print_tstz_in     IN prescription.dt_prof_print_tstz%TYPE DEFAULT NULL,
        dt_prof_print_tstz_nin    IN BOOLEAN := TRUE,
        where_in                  VARCHAR2 DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  IN OUT table_varchar
    );

    PROCEDURE upd
    (
        id_episode_in             IN prescription.id_episode%TYPE DEFAULT NULL,
        id_episode_nin            IN BOOLEAN := TRUE,
        id_patient_in             IN prescription.id_patient%TYPE DEFAULT NULL,
        id_patient_nin            IN BOOLEAN := TRUE,
        id_professional_in        IN prescription.id_professional%TYPE DEFAULT NULL,
        id_professional_nin       IN BOOLEAN := TRUE,
        flg_status_in             IN prescription.flg_status%TYPE DEFAULT NULL,
        flg_status_nin            IN BOOLEAN := TRUE,
        id_prof_cancel_in         IN prescription.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin        IN BOOLEAN := TRUE,
        notes_cancel_in           IN prescription.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin          IN BOOLEAN := TRUE,
        id_institution_in         IN prescription.id_institution%TYPE DEFAULT NULL,
        id_institution_nin        IN BOOLEAN := TRUE,
        id_software_in            IN prescription.id_software%TYPE DEFAULT NULL,
        id_software_nin           IN BOOLEAN := TRUE,
        id_institution_cancel_in  IN prescription.id_institution_cancel%TYPE DEFAULT NULL,
        id_institution_cancel_nin IN BOOLEAN := TRUE,
        id_software_cancel_in     IN prescription.id_software_cancel%TYPE DEFAULT NULL,
        id_software_cancel_nin    IN BOOLEAN := TRUE,
        flg_type_in               IN prescription.flg_type%TYPE DEFAULT NULL,
        flg_type_nin              IN BOOLEAN := TRUE,
        flg_sub_type_in           IN prescription.flg_sub_type%TYPE DEFAULT NULL,
        flg_sub_type_nin          IN BOOLEAN := TRUE,
        flg_print_type_in         IN prescription.flg_print_type%TYPE DEFAULT NULL,
        flg_print_type_nin        IN BOOLEAN := TRUE,
        id_prof_print_in          IN prescription.id_prof_print%TYPE DEFAULT NULL,
        id_prof_print_nin         IN BOOLEAN := TRUE,
        id_prev_episode_in        IN prescription.id_prev_episode%TYPE DEFAULT NULL,
        id_prev_episode_nin       IN BOOLEAN := TRUE,
        dt_prescription_tstz_in   IN prescription.dt_prescription_tstz%TYPE DEFAULT NULL,
        dt_prescription_tstz_nin  IN BOOLEAN := TRUE,
        dt_cancel_tstz_in         IN prescription.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin        IN BOOLEAN := TRUE,
        dt_prof_print_tstz_in     IN prescription.dt_prof_print_tstz%TYPE DEFAULT NULL,
        dt_prof_print_tstz_nin    IN BOOLEAN := TRUE,
        where_in                  VARCHAR2 DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE
    );

    PROCEDURE upd_ins
    (
        id_prescription_in       IN prescription.id_prescription%TYPE,
        id_episode_in            IN prescription.id_episode%TYPE DEFAULT NULL,
        id_patient_in            IN prescription.id_patient%TYPE DEFAULT NULL,
        id_professional_in       IN prescription.id_professional%TYPE DEFAULT NULL,
        flg_status_in            IN prescription.flg_status%TYPE DEFAULT NULL,
        id_prof_cancel_in        IN prescription.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in          IN prescription.notes_cancel%TYPE DEFAULT NULL,
        id_institution_in        IN prescription.id_institution%TYPE DEFAULT NULL,
        id_software_in           IN prescription.id_software%TYPE DEFAULT NULL,
        id_institution_cancel_in IN prescription.id_institution_cancel%TYPE DEFAULT NULL,
        id_software_cancel_in    IN prescription.id_software_cancel%TYPE DEFAULT NULL,
        flg_type_in              IN prescription.flg_type%TYPE DEFAULT NULL,
        flg_sub_type_in          IN prescription.flg_sub_type%TYPE DEFAULT NULL,
        flg_print_type_in        IN prescription.flg_print_type%TYPE DEFAULT NULL,
        id_prof_print_in         IN prescription.id_prof_print%TYPE DEFAULT NULL,
        id_prev_episode_in       IN prescription.id_prev_episode%TYPE DEFAULT NULL,
        dt_prescription_tstz_in  IN prescription.dt_prescription_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in        IN prescription.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_prof_print_tstz_in    IN prescription.dt_prof_print_tstz%TYPE DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 OUT table_varchar
    );

    PROCEDURE upd_ins
    (
        id_prescription_in       IN prescription.id_prescription%TYPE,
        id_episode_in            IN prescription.id_episode%TYPE DEFAULT NULL,
        id_patient_in            IN prescription.id_patient%TYPE DEFAULT NULL,
        id_professional_in       IN prescription.id_professional%TYPE DEFAULT NULL,
        flg_status_in            IN prescription.flg_status%TYPE DEFAULT NULL,
        id_prof_cancel_in        IN prescription.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in          IN prescription.notes_cancel%TYPE DEFAULT NULL,
        id_institution_in        IN prescription.id_institution%TYPE DEFAULT NULL,
        id_software_in           IN prescription.id_software%TYPE DEFAULT NULL,
        id_institution_cancel_in IN prescription.id_institution_cancel%TYPE DEFAULT NULL,
        id_software_cancel_in    IN prescription.id_software_cancel%TYPE DEFAULT NULL,
        flg_type_in              IN prescription.flg_type%TYPE DEFAULT NULL,
        flg_sub_type_in          IN prescription.flg_sub_type%TYPE DEFAULT NULL,
        flg_print_type_in        IN prescription.flg_print_type%TYPE DEFAULT NULL,
        id_prof_print_in         IN prescription.id_prof_print%TYPE DEFAULT NULL,
        id_prev_episode_in       IN prescription.id_prev_episode%TYPE DEFAULT NULL,
        dt_prescription_tstz_in  IN prescription.dt_prescription_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in        IN prescription.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_prof_print_tstz_in    IN prescription.dt_prof_print_tstz%TYPE DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE
    );

    PROCEDURE upd
    (
        rec_in          IN prescription%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    );

    PROCEDURE upd
    (
        rec_in          IN prescription%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    );

    PROCEDURE upd
    (
        col_in            IN prescription_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    );

    PROCEDURE upd
    (
        col_in            IN prescription_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    );

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    );

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    );

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_prescription_in IN prescription.id_prescription%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    );

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_prescription_in IN prescription.id_prescription%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    );

    -- Delete all rows for primary key column ID_PRESCRIPTION
    PROCEDURE del_id_prescription
    (
        id_prescription_in IN prescription.id_prescription%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    );

    -- Delete all rows for primary key column ID_PRESCRIPTION
    PROCEDURE del_id_prescription
    (
        id_prescription_in IN prescription.id_prescription%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    );

    -- Delete all rows for this PRN_EPIS_FK foreign key value
    PROCEDURE del_prn_epis_fk
    (
        id_episode_in   IN prescription.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows for this PRN_EPIS_FK foreign key value
    PROCEDURE del_prn_epis_fk
    (
        id_episode_in   IN prescription.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows for this PRN_EPIS_FK2 foreign key value
    PROCEDURE del_prn_epis_fk2
    (
        id_prev_episode_in IN prescription.id_prev_episode%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    );

    -- Delete all rows for this PRN_EPIS_FK2 foreign key value
    PROCEDURE del_prn_epis_fk2
    (
        id_prev_episode_in IN prescription.id_prev_episode%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    );

    -- Delete all rows for this PRN_INST_FK foreign key value
    PROCEDURE del_prn_inst_fk
    (
        id_institution_in IN prescription.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    );

    -- Delete all rows for this PRN_INST_FK foreign key value
    PROCEDURE del_prn_inst_fk
    (
        id_institution_in IN prescription.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    );

    -- Delete all rows for this PRN_INST_FK2 foreign key value
    PROCEDURE del_prn_inst_fk2
    (
        id_institution_cancel_in IN prescription.id_institution_cancel%TYPE,
        handle_error_in          IN BOOLEAN := TRUE
    );

    -- Delete all rows for this PRN_INST_FK2 foreign key value
    PROCEDURE del_prn_inst_fk2
    (
        id_institution_cancel_in IN prescription.id_institution_cancel%TYPE,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 OUT table_varchar
    );

    -- Delete all rows for this PRN_PAT_FK foreign key value
    PROCEDURE del_prn_pat_fk
    (
        id_patient_in   IN prescription.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows for this PRN_PAT_FK foreign key value
    PROCEDURE del_prn_pat_fk
    (
        id_patient_in   IN prescription.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows for this PRN_PROF_FK foreign key value
    PROCEDURE del_prn_prof_fk
    (
        id_professional_in IN prescription.id_professional%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    );

    -- Delete all rows for this PRN_PROF_FK foreign key value
    PROCEDURE del_prn_prof_fk
    (
        id_professional_in IN prescription.id_professional%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    );

    -- Delete all rows for this PRN_PROF_FK2 foreign key value
    PROCEDURE del_prn_prof_fk2
    (
        id_prof_cancel_in IN prescription.id_prof_cancel%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    );

    -- Delete all rows for this PRN_PROF_FK2 foreign key value
    PROCEDURE del_prn_prof_fk2
    (
        id_prof_cancel_in IN prescription.id_prof_cancel%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    );

    -- Delete all rows for this PRN_PROF_FK3 foreign key value
    PROCEDURE del_prn_prof_fk3
    (
        id_prof_print_in IN prescription.id_prof_print%TYPE,
        handle_error_in  IN BOOLEAN := TRUE
    );

    -- Delete all rows for this PRN_PROF_FK3 foreign key value
    PROCEDURE del_prn_prof_fk3
    (
        id_prof_print_in IN prescription.id_prof_print%TYPE,
        handle_error_in  IN BOOLEAN := TRUE,
        rows_out         OUT table_varchar
    );

    -- Delete all rows for this PRN_S_FK foreign key value
    PROCEDURE del_prn_s_fk
    (
        id_software_in  IN prescription.id_software%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows for this PRN_S_FK foreign key value
    PROCEDURE del_prn_s_fk
    (
        id_software_in  IN prescription.id_software%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows for this PRN_S_FK2 foreign key value
    PROCEDURE del_prn_s_fk2
    (
        id_software_cancel_in IN prescription.id_software_cancel%TYPE,
        handle_error_in       IN BOOLEAN := TRUE
    );

    -- Delete all rows for this PRN_S_FK2 foreign key value
    PROCEDURE del_prn_s_fk2
    (
        id_software_cancel_in IN prescription.id_software_cancel%TYPE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    );

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified VARCHAR2 column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified VARCHAR2 column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified DATE column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified DATE column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified TIMESTAMP column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified TIMESTAMP column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified NUMBER column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified NUMBER column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(prescription_inout IN OUT prescription%ROWTYPE);

    FUNCTION initrec RETURN prescription%ROWTYPE;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN prescription_tc;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN prescription_tc;

END ts_prescription;
/
