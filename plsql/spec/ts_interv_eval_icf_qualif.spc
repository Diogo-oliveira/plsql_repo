/*-- Last Change Revision: $Rev: 2029221 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:50:28 +0100 (ter, 02 ago 2022) $*/

CREATE OR REPLACE PACKAGE TS_INTERV_EVAL_ICF_QUALIF
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {1BD37A66-EA60-4927-9A64-F6DD89237236}
| Created On: Janeiro 27, 2009 16:37:11
| Created By: ALERT
*/
IS

  -- Collection of %ROWTYPE records based on "INTERV_EVAL_ICF_QUALIF"
     TYPE INTERV_EVAL_ICF_QUALIF_tc IS TABLE OF INTERV_EVAL_ICF_QUALIF%ROWTYPE INDEX BY BINARY_INTEGER;
     TYPE interv_eval_icf_qualif_ntt IS TABLE OF INTERV_EVAL_ICF_QUALIF%ROWTYPE;
     TYPE interv_eval_icf_qualif_vat IS VARRAY(100) OF INTERV_EVAL_ICF_QUALIF%ROWTYPE;

  -- Same type structure, with a static name.
     TYPE aat IS TABLE OF INTERV_EVAL_ICF_QUALIF%ROWTYPE INDEX BY BINARY_INTEGER;
     TYPE ntt IS TABLE OF INTERV_EVAL_ICF_QUALIF%ROWTYPE;
     TYPE vat IS VARRAY(100) OF INTERV_EVAL_ICF_QUALIF%ROWTYPE;

   -- Column Collection based on column "ID_ICF_QUALIFICATION"
   TYPE ID_ICF_QUALIFICATION_cc IS TABLE OF INTERV_EVAL_ICF_QUALIF.ID_ICF_QUALIFICATION%TYPE INDEX BY BINARY_INTEGER;
   -- Column Collection based on column "ID_ICF_QUALIFICATION_SCALE"
   TYPE ID_ICF_QUALIFICATION_SCALE_cc IS TABLE OF INTERV_EVAL_ICF_QUALIF.ID_ICF_QUALIFICATION_SCALE%TYPE INDEX BY BINARY_INTEGER;
   -- Column Collection based on column "ID_ICF"
   TYPE ID_ICF_cc IS TABLE OF INTERV_EVAL_ICF_QUALIF.ID_ICF%TYPE INDEX BY BINARY_INTEGER;
   -- Column Collection based on column "ID_INTERV_EVALUATION"
   TYPE ID_INTERV_EVALUATION_cc IS TABLE OF INTERV_EVAL_ICF_QUALIF.ID_INTERV_EVALUATION%TYPE INDEX BY BINARY_INTEGER;
   -- Column Collection based on column "FLG_LEVEL"
   TYPE FLG_LEVEL_cc IS TABLE OF INTERV_EVAL_ICF_QUALIF.FLG_LEVEL%TYPE INDEX BY BINARY_INTEGER;

   -- Insert one row, providing primary key if present
   PROCEDURE ins (
      id_icf_qualification_in IN INTERV_EVAL_ICF_QUALIF.ID_ICF_QUALIFICATION%TYPE DEFAULT NULL,
      id_icf_qualification_scale_in IN INTERV_EVAL_ICF_QUALIF.ID_ICF_QUALIFICATION_SCALE%TYPE DEFAULT NULL,
      id_icf_in IN INTERV_EVAL_ICF_QUALIF.ID_ICF%TYPE DEFAULT NULL,
      id_interv_evaluation_in IN INTERV_EVAL_ICF_QUALIF.ID_INTERV_EVALUATION%TYPE DEFAULT NULL,
      flg_level_in IN INTERV_EVAL_ICF_QUALIF.FLG_LEVEL%TYPE DEFAULT NULL
      -- Pass false if you want errors to propagate out unhandled
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      );

   PROCEDURE ins (
      id_icf_qualification_in IN INTERV_EVAL_ICF_QUALIF.ID_ICF_QUALIFICATION%TYPE DEFAULT NULL,
      id_icf_qualification_scale_in IN INTERV_EVAL_ICF_QUALIF.ID_ICF_QUALIFICATION_SCALE%TYPE DEFAULT NULL,
      id_icf_in IN INTERV_EVAL_ICF_QUALIF.ID_ICF%TYPE DEFAULT NULL,
      id_interv_evaluation_in IN INTERV_EVAL_ICF_QUALIF.ID_INTERV_EVALUATION%TYPE DEFAULT NULL,
      flg_level_in IN INTERV_EVAL_ICF_QUALIF.FLG_LEVEL%TYPE DEFAULT NULL
      -- Pass false if you want errors to propagate out unhandled
     ,handle_error_in IN BOOLEAN := TRUE
      );


   -- Insert a row based on a record.
   PROCEDURE ins (
      rec_in IN INTERV_EVAL_ICF_QUALIF%ROWTYPE
     ,sequence_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   );

   PROCEDURE ins (
      rec_in IN INTERV_EVAL_ICF_QUALIF%ROWTYPE
     ,sequence_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
   );

   -- Insert a collection of rows using FORALL; all primary key values
   -- must have already been generated, or are handled in triggers.
   PROCEDURE ins (
      rows_in IN INTERV_EVAL_ICF_QUALIF_tc
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   );

   PROCEDURE ins (
      rows_in IN INTERV_EVAL_ICF_QUALIF_tc
     ,handle_error_in IN BOOLEAN := TRUE
   );





   -- Use Native Dynamic SQL increment a single NUMBER column
   -- for all rows specified by the dynamic WHERE clause
   PROCEDURE increment_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL
      , increment_value_in IN NUMBER DEFAULT 1
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   );

   PROCEDURE increment_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL
      , increment_value_in IN NUMBER DEFAULT 1
     ,handle_error_in IN BOOLEAN := TRUE
   );







   -- Delete all rows for this IEIQ_IEI_FK foreign key value
   PROCEDURE del_IEIQ_IEI_FK (
      id_icf_in IN INTERV_EVAL_ICF_QUALIF.ID_ICF%TYPE,
      id_interv_evaluation_in IN INTERV_EVAL_ICF_QUALIF.ID_INTERV_EVALUATION%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      );

      -- Delete all rows for this IEIQ_IEI_FK foreign key value
   PROCEDURE del_IEIQ_IEI_FK (
      id_icf_in IN INTERV_EVAL_ICF_QUALIF.ID_ICF%TYPE,
      id_interv_evaluation_in IN INTERV_EVAL_ICF_QUALIF.ID_INTERV_EVALUATION%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      );

   -- Delete all rows for this IEIQ_IQL_FK foreign key value
   PROCEDURE del_IEIQ_IQL_FK (
      id_icf_qualification_scale_in IN INTERV_EVAL_ICF_QUALIF.ID_ICF_QUALIFICATION_SCALE%TYPE,
      id_icf_qualification_in IN INTERV_EVAL_ICF_QUALIF.ID_ICF_QUALIFICATION%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      );

      -- Delete all rows for this IEIQ_IQL_FK foreign key value
   PROCEDURE del_IEIQ_IQL_FK (
      id_icf_qualification_scale_in IN INTERV_EVAL_ICF_QUALIF.ID_ICF_QUALIFICATION_SCALE%TYPE,
      id_icf_qualification_in IN INTERV_EVAL_ICF_QUALIF.ID_ICF_QUALIFICATION%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      );

    -- Delete all rows specified by dynamic WHERE clause
   PROCEDURE del_by (
      where_clause_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
      );

      -- Delete all rows specified by dynamic WHERE clause
   PROCEDURE del_by (
      where_clause_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      );

    -- Delete all rows where the specified VARCHAR2 column has
   -- a value that matches the specfified value.
   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
      );


      -- Delete all rows where the specified VARCHAR2 column has
   -- a value that matches the specfified value.
   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      );

    -- Delete all rows where the specified DATE column has
   -- a value that matches the specfified value.
   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN DATE
     ,handle_error_in IN BOOLEAN := TRUE
      );

      -- Delete all rows where the specified DATE column has
   -- a value that matches the specfified value.
   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN DATE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      );


      -- Delete all rows where the specified TIMESTAMP column has
   -- a value that matches the specfified value.
   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN TIMESTAMP WITH LOCAL TIME ZONE
     ,handle_error_in IN BOOLEAN := TRUE
      );

      -- Delete all rows where the specified TIMESTAMP column has
   -- a value that matches the specfified value.
   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN TIMESTAMP WITH LOCAL TIME ZONE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      );

    -- Delete all rows where the specified NUMBER column has
   -- a value that matches the specfified value.
   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN NUMBER
     ,handle_error_in IN BOOLEAN := TRUE
      );

      -- Delete all rows where the specified NUMBER column has
   -- a value that matches the specfified value.
   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN NUMBER
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      );

   -- Initialize a record with default values for columns in the table.
   PROCEDURE initrec (
      interv_eval_icf_qualif_inout IN OUT INTERV_EVAL_ICF_QUALIF%ROWTYPE
   );

   FUNCTION initrec RETURN INTERV_EVAL_ICF_QUALIF%ROWTYPE;



   FUNCTION get_data_rowid(
        rows_in IN TABLE_VARCHAR
        ) RETURN INTERV_EVAL_ICF_QUALIF_tc;


   FUNCTION get_data_rowid_pat(
        rows_in IN TABLE_VARCHAR
        ) RETURN INTERV_EVAL_ICF_QUALIF_tc;

END TS_INTERV_EVAL_ICF_QUALIF;
/
