/*-- Last Change Revision: $Rev: 1201721 $*/
/*-- Last Change by: $Author: sofia.mendes $*/
/*-- Date of last change: $Date: 2012-01-09 17:06:47 +0000 (seg, 09 jan 2012) $*/
CREATE OR REPLACE PACKAGE ts_sr_danger_cont
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {1BD37A66-EA60-4927-9A64-F6DD89237236}
| Created On: Dezembro 20, 2011 14:35:34
| Created By: ALERT
*/
 IS

    -- Collection of %ROWTYPE records based on "SR_DANGER_CONT"
    TYPE sr_danger_cont_tc IS TABLE OF sr_danger_cont%ROWTYPE INDEX BY BINARY_INTEGER;
    TYPE sr_danger_cont_ntt IS TABLE OF sr_danger_cont%ROWTYPE;
    TYPE sr_danger_cont_vat IS VARRAY(100) OF sr_danger_cont%ROWTYPE;

    -- Same type structure, with a static name.
    TYPE aat IS TABLE OF sr_danger_cont%ROWTYPE INDEX BY BINARY_INTEGER;
    TYPE ntt IS TABLE OF sr_danger_cont%ROWTYPE;
    TYPE vat IS VARRAY(100) OF sr_danger_cont%ROWTYPE;

    -- Column Collection based on column "ID_SR_DANGER_CONT"
    TYPE id_sr_danger_cont_cc IS TABLE OF sr_danger_cont.id_sr_danger_cont%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_EPISODE"
    TYPE id_episode_cc IS TABLE OF sr_danger_cont.id_episode%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_PATIENT"
    TYPE id_patient_cc IS TABLE OF sr_danger_cont.id_patient%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_SCHEDULE_SR"
    TYPE id_schedule_sr_cc IS TABLE OF sr_danger_cont.id_schedule_sr%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_PROF_REG"
    TYPE id_prof_reg_cc IS TABLE OF sr_danger_cont.id_prof_reg%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "DT_REG"
    TYPE dt_reg_cc IS TABLE OF sr_danger_cont.dt_reg%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "FLG_STATUS"
    TYPE flg_status_cc IS TABLE OF sr_danger_cont.flg_status%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "CREATE_USER"
    TYPE create_user_cc IS TABLE OF sr_danger_cont.create_user%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "CREATE_TIME"
    TYPE create_time_cc IS TABLE OF sr_danger_cont.create_time%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "CREATE_INSTITUTION"
    TYPE create_institution_cc IS TABLE OF sr_danger_cont.create_institution%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "UPDATE_USER"
    TYPE update_user_cc IS TABLE OF sr_danger_cont.update_user%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "UPDATE_TIME"
    TYPE update_time_cc IS TABLE OF sr_danger_cont.update_time%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "UPDATE_INSTITUTION"
    TYPE update_institution_cc IS TABLE OF sr_danger_cont.update_institution%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_EPIS_DIAGNOSIS"
    TYPE id_epis_diagnosis_cc IS TABLE OF sr_danger_cont.id_epis_diagnosis%TYPE INDEX BY BINARY_INTEGER;

    -- Insert one row, providing primary key if present
    PROCEDURE ins
    (
        id_sr_danger_cont_in  IN sr_danger_cont.id_sr_danger_cont%TYPE,
        id_episode_in         IN sr_danger_cont.id_episode%TYPE DEFAULT NULL,
        id_patient_in         IN sr_danger_cont.id_patient%TYPE DEFAULT NULL,
        id_schedule_sr_in     IN sr_danger_cont.id_schedule_sr%TYPE DEFAULT NULL,
        id_prof_reg_in        IN sr_danger_cont.id_prof_reg%TYPE DEFAULT NULL,
        dt_reg_in             IN sr_danger_cont.dt_reg%TYPE DEFAULT NULL,
        flg_status_in         IN sr_danger_cont.flg_status%TYPE DEFAULT NULL,
        create_user_in        IN sr_danger_cont.create_user%TYPE DEFAULT NULL,
        create_time_in        IN sr_danger_cont.create_time%TYPE DEFAULT NULL,
        create_institution_in IN sr_danger_cont.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN sr_danger_cont.update_user%TYPE DEFAULT NULL,
        update_time_in        IN sr_danger_cont.update_time%TYPE DEFAULT NULL,
        update_institution_in IN sr_danger_cont.update_institution%TYPE DEFAULT NULL,
        id_epis_diagnosis_in  IN sr_danger_cont.id_epis_diagnosis%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        id_sr_danger_cont_in  IN sr_danger_cont.id_sr_danger_cont%TYPE,
        id_episode_in         IN sr_danger_cont.id_episode%TYPE DEFAULT NULL,
        id_patient_in         IN sr_danger_cont.id_patient%TYPE DEFAULT NULL,
        id_schedule_sr_in     IN sr_danger_cont.id_schedule_sr%TYPE DEFAULT NULL,
        id_prof_reg_in        IN sr_danger_cont.id_prof_reg%TYPE DEFAULT NULL,
        dt_reg_in             IN sr_danger_cont.dt_reg%TYPE DEFAULT NULL,
        flg_status_in         IN sr_danger_cont.flg_status%TYPE DEFAULT NULL,
        create_user_in        IN sr_danger_cont.create_user%TYPE DEFAULT NULL,
        create_time_in        IN sr_danger_cont.create_time%TYPE DEFAULT NULL,
        create_institution_in IN sr_danger_cont.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN sr_danger_cont.update_user%TYPE DEFAULT NULL,
        update_time_in        IN sr_danger_cont.update_time%TYPE DEFAULT NULL,
        update_institution_in IN sr_danger_cont.update_institution%TYPE DEFAULT NULL,
        id_epis_diagnosis_in  IN sr_danger_cont.id_epis_diagnosis%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Insert a row based on a record.
    -- Specify whether or not a primary key value should be generated.
    PROCEDURE ins
    (
        rec_in          IN sr_danger_cont%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        rec_in          IN sr_danger_cont%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers.
    PROCEDURE ins
    (
        rows_in         IN sr_danger_cont_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        rows_in         IN sr_danger_cont_tc,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Return next primary key value using the named sequence.
    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN sr_danger_cont.id_sr_danger_cont%TYPE;

    -- Insert one row, generating hidden primary key using a sequence
    PROCEDURE ins
    (
        id_episode_in         IN sr_danger_cont.id_episode%TYPE DEFAULT NULL,
        id_patient_in         IN sr_danger_cont.id_patient%TYPE DEFAULT NULL,
        id_schedule_sr_in     IN sr_danger_cont.id_schedule_sr%TYPE DEFAULT NULL,
        id_prof_reg_in        IN sr_danger_cont.id_prof_reg%TYPE DEFAULT NULL,
        dt_reg_in             IN sr_danger_cont.dt_reg%TYPE DEFAULT NULL,
        flg_status_in         IN sr_danger_cont.flg_status%TYPE DEFAULT NULL,
        create_user_in        IN sr_danger_cont.create_user%TYPE DEFAULT NULL,
        create_time_in        IN sr_danger_cont.create_time%TYPE DEFAULT NULL,
        create_institution_in IN sr_danger_cont.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN sr_danger_cont.update_user%TYPE DEFAULT NULL,
        update_time_in        IN sr_danger_cont.update_time%TYPE DEFAULT NULL,
        update_institution_in IN sr_danger_cont.update_institution%TYPE DEFAULT NULL,
        id_epis_diagnosis_in  IN sr_danger_cont.id_epis_diagnosis%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        id_episode_in         IN sr_danger_cont.id_episode%TYPE DEFAULT NULL,
        id_patient_in         IN sr_danger_cont.id_patient%TYPE DEFAULT NULL,
        id_schedule_sr_in     IN sr_danger_cont.id_schedule_sr%TYPE DEFAULT NULL,
        id_prof_reg_in        IN sr_danger_cont.id_prof_reg%TYPE DEFAULT NULL,
        dt_reg_in             IN sr_danger_cont.dt_reg%TYPE DEFAULT NULL,
        flg_status_in         IN sr_danger_cont.flg_status%TYPE DEFAULT NULL,
        create_user_in        IN sr_danger_cont.create_user%TYPE DEFAULT NULL,
        create_time_in        IN sr_danger_cont.create_time%TYPE DEFAULT NULL,
        create_institution_in IN sr_danger_cont.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN sr_danger_cont.update_user%TYPE DEFAULT NULL,
        update_time_in        IN sr_danger_cont.update_time%TYPE DEFAULT NULL,
        update_institution_in IN sr_danger_cont.update_institution%TYPE DEFAULT NULL,
        id_epis_diagnosis_in  IN sr_danger_cont.id_epis_diagnosis%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Insert one row, returning primary key generated by sequence
    PROCEDURE ins
    (
        id_episode_in         IN sr_danger_cont.id_episode%TYPE DEFAULT NULL,
        id_patient_in         IN sr_danger_cont.id_patient%TYPE DEFAULT NULL,
        id_schedule_sr_in     IN sr_danger_cont.id_schedule_sr%TYPE DEFAULT NULL,
        id_prof_reg_in        IN sr_danger_cont.id_prof_reg%TYPE DEFAULT NULL,
        dt_reg_in             IN sr_danger_cont.dt_reg%TYPE DEFAULT NULL,
        flg_status_in         IN sr_danger_cont.flg_status%TYPE DEFAULT NULL,
        create_user_in        IN sr_danger_cont.create_user%TYPE DEFAULT NULL,
        create_time_in        IN sr_danger_cont.create_time%TYPE DEFAULT NULL,
        create_institution_in IN sr_danger_cont.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN sr_danger_cont.update_user%TYPE DEFAULT NULL,
        update_time_in        IN sr_danger_cont.update_time%TYPE DEFAULT NULL,
        update_institution_in IN sr_danger_cont.update_institution%TYPE DEFAULT NULL,
        id_epis_diagnosis_in  IN sr_danger_cont.id_epis_diagnosis%TYPE DEFAULT NULL,
        id_sr_danger_cont_out IN OUT sr_danger_cont.id_sr_danger_cont%TYPE
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        id_episode_in         IN sr_danger_cont.id_episode%TYPE DEFAULT NULL,
        id_patient_in         IN sr_danger_cont.id_patient%TYPE DEFAULT NULL,
        id_schedule_sr_in     IN sr_danger_cont.id_schedule_sr%TYPE DEFAULT NULL,
        id_prof_reg_in        IN sr_danger_cont.id_prof_reg%TYPE DEFAULT NULL,
        dt_reg_in             IN sr_danger_cont.dt_reg%TYPE DEFAULT NULL,
        flg_status_in         IN sr_danger_cont.flg_status%TYPE DEFAULT NULL,
        create_user_in        IN sr_danger_cont.create_user%TYPE DEFAULT NULL,
        create_time_in        IN sr_danger_cont.create_time%TYPE DEFAULT NULL,
        create_institution_in IN sr_danger_cont.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN sr_danger_cont.update_user%TYPE DEFAULT NULL,
        update_time_in        IN sr_danger_cont.update_time%TYPE DEFAULT NULL,
        update_institution_in IN sr_danger_cont.update_institution%TYPE DEFAULT NULL,
        id_epis_diagnosis_in  IN sr_danger_cont.id_epis_diagnosis%TYPE DEFAULT NULL,
        id_sr_danger_cont_out IN OUT sr_danger_cont.id_sr_danger_cont%TYPE
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Insert one row with function, return generated primary key
    FUNCTION ins
    (
        id_episode_in         IN sr_danger_cont.id_episode%TYPE DEFAULT NULL,
        id_patient_in         IN sr_danger_cont.id_patient%TYPE DEFAULT NULL,
        id_schedule_sr_in     IN sr_danger_cont.id_schedule_sr%TYPE DEFAULT NULL,
        id_prof_reg_in        IN sr_danger_cont.id_prof_reg%TYPE DEFAULT NULL,
        dt_reg_in             IN sr_danger_cont.dt_reg%TYPE DEFAULT NULL,
        flg_status_in         IN sr_danger_cont.flg_status%TYPE DEFAULT NULL,
        create_user_in        IN sr_danger_cont.create_user%TYPE DEFAULT NULL,
        create_time_in        IN sr_danger_cont.create_time%TYPE DEFAULT NULL,
        create_institution_in IN sr_danger_cont.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN sr_danger_cont.update_user%TYPE DEFAULT NULL,
        update_time_in        IN sr_danger_cont.update_time%TYPE DEFAULT NULL,
        update_institution_in IN sr_danger_cont.update_institution%TYPE DEFAULT NULL,
        id_epis_diagnosis_in  IN sr_danger_cont.id_epis_diagnosis%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) RETURN sr_danger_cont.id_sr_danger_cont%TYPE;

    FUNCTION ins
    (
        id_episode_in         IN sr_danger_cont.id_episode%TYPE DEFAULT NULL,
        id_patient_in         IN sr_danger_cont.id_patient%TYPE DEFAULT NULL,
        id_schedule_sr_in     IN sr_danger_cont.id_schedule_sr%TYPE DEFAULT NULL,
        id_prof_reg_in        IN sr_danger_cont.id_prof_reg%TYPE DEFAULT NULL,
        dt_reg_in             IN sr_danger_cont.dt_reg%TYPE DEFAULT NULL,
        flg_status_in         IN sr_danger_cont.flg_status%TYPE DEFAULT NULL,
        create_user_in        IN sr_danger_cont.create_user%TYPE DEFAULT NULL,
        create_time_in        IN sr_danger_cont.create_time%TYPE DEFAULT NULL,
        create_institution_in IN sr_danger_cont.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN sr_danger_cont.update_user%TYPE DEFAULT NULL,
        update_time_in        IN sr_danger_cont.update_time%TYPE DEFAULT NULL,
        update_institution_in IN sr_danger_cont.update_institution%TYPE DEFAULT NULL,
        id_epis_diagnosis_in  IN sr_danger_cont.id_epis_diagnosis%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE
    ) RETURN sr_danger_cont.id_sr_danger_cont%TYPE;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.

    PROCEDURE upd
    (
        id_sr_danger_cont_in   IN sr_danger_cont.id_sr_danger_cont%TYPE,
        id_episode_in          IN sr_danger_cont.id_episode%TYPE DEFAULT NULL,
        id_episode_nin         IN BOOLEAN := TRUE,
        id_patient_in          IN sr_danger_cont.id_patient%TYPE DEFAULT NULL,
        id_patient_nin         IN BOOLEAN := TRUE,
        id_schedule_sr_in      IN sr_danger_cont.id_schedule_sr%TYPE DEFAULT NULL,
        id_schedule_sr_nin     IN BOOLEAN := TRUE,
        id_prof_reg_in         IN sr_danger_cont.id_prof_reg%TYPE DEFAULT NULL,
        id_prof_reg_nin        IN BOOLEAN := TRUE,
        dt_reg_in              IN sr_danger_cont.dt_reg%TYPE DEFAULT NULL,
        dt_reg_nin             IN BOOLEAN := TRUE,
        flg_status_in          IN sr_danger_cont.flg_status%TYPE DEFAULT NULL,
        flg_status_nin         IN BOOLEAN := TRUE,
        create_user_in         IN sr_danger_cont.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN sr_danger_cont.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN sr_danger_cont.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN sr_danger_cont.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN sr_danger_cont.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN sr_danger_cont.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        id_epis_diagnosis_in   IN sr_danger_cont.id_epis_diagnosis%TYPE DEFAULT NULL,
        id_epis_diagnosis_nin  IN BOOLEAN := TRUE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               IN OUT table_varchar
    );

    PROCEDURE upd
    (
        id_sr_danger_cont_in   IN sr_danger_cont.id_sr_danger_cont%TYPE,
        id_episode_in          IN sr_danger_cont.id_episode%TYPE DEFAULT NULL,
        id_episode_nin         IN BOOLEAN := TRUE,
        id_patient_in          IN sr_danger_cont.id_patient%TYPE DEFAULT NULL,
        id_patient_nin         IN BOOLEAN := TRUE,
        id_schedule_sr_in      IN sr_danger_cont.id_schedule_sr%TYPE DEFAULT NULL,
        id_schedule_sr_nin     IN BOOLEAN := TRUE,
        id_prof_reg_in         IN sr_danger_cont.id_prof_reg%TYPE DEFAULT NULL,
        id_prof_reg_nin        IN BOOLEAN := TRUE,
        dt_reg_in              IN sr_danger_cont.dt_reg%TYPE DEFAULT NULL,
        dt_reg_nin             IN BOOLEAN := TRUE,
        flg_status_in          IN sr_danger_cont.flg_status%TYPE DEFAULT NULL,
        flg_status_nin         IN BOOLEAN := TRUE,
        create_user_in         IN sr_danger_cont.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN sr_danger_cont.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN sr_danger_cont.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN sr_danger_cont.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN sr_danger_cont.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN sr_danger_cont.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        id_epis_diagnosis_in   IN sr_danger_cont.id_epis_diagnosis%TYPE DEFAULT NULL,
        id_epis_diagnosis_nin  IN BOOLEAN := TRUE,
        handle_error_in        IN BOOLEAN := TRUE
    );

    PROCEDURE upd
    (
        id_episode_in          IN sr_danger_cont.id_episode%TYPE DEFAULT NULL,
        id_episode_nin         IN BOOLEAN := TRUE,
        id_patient_in          IN sr_danger_cont.id_patient%TYPE DEFAULT NULL,
        id_patient_nin         IN BOOLEAN := TRUE,
        id_schedule_sr_in      IN sr_danger_cont.id_schedule_sr%TYPE DEFAULT NULL,
        id_schedule_sr_nin     IN BOOLEAN := TRUE,
        id_prof_reg_in         IN sr_danger_cont.id_prof_reg%TYPE DEFAULT NULL,
        id_prof_reg_nin        IN BOOLEAN := TRUE,
        dt_reg_in              IN sr_danger_cont.dt_reg%TYPE DEFAULT NULL,
        dt_reg_nin             IN BOOLEAN := TRUE,
        flg_status_in          IN sr_danger_cont.flg_status%TYPE DEFAULT NULL,
        flg_status_nin         IN BOOLEAN := TRUE,
        create_user_in         IN sr_danger_cont.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN sr_danger_cont.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN sr_danger_cont.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN sr_danger_cont.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN sr_danger_cont.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN sr_danger_cont.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        id_epis_diagnosis_in   IN sr_danger_cont.id_epis_diagnosis%TYPE DEFAULT NULL,
        id_epis_diagnosis_nin  IN BOOLEAN := TRUE,
        where_in               VARCHAR2,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               IN OUT table_varchar
    );

    PROCEDURE upd
    (
        id_episode_in          IN sr_danger_cont.id_episode%TYPE DEFAULT NULL,
        id_episode_nin         IN BOOLEAN := TRUE,
        id_patient_in          IN sr_danger_cont.id_patient%TYPE DEFAULT NULL,
        id_patient_nin         IN BOOLEAN := TRUE,
        id_schedule_sr_in      IN sr_danger_cont.id_schedule_sr%TYPE DEFAULT NULL,
        id_schedule_sr_nin     IN BOOLEAN := TRUE,
        id_prof_reg_in         IN sr_danger_cont.id_prof_reg%TYPE DEFAULT NULL,
        id_prof_reg_nin        IN BOOLEAN := TRUE,
        dt_reg_in              IN sr_danger_cont.dt_reg%TYPE DEFAULT NULL,
        dt_reg_nin             IN BOOLEAN := TRUE,
        flg_status_in          IN sr_danger_cont.flg_status%TYPE DEFAULT NULL,
        flg_status_nin         IN BOOLEAN := TRUE,
        create_user_in         IN sr_danger_cont.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN sr_danger_cont.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN sr_danger_cont.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN sr_danger_cont.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN sr_danger_cont.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN sr_danger_cont.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        id_epis_diagnosis_in   IN sr_danger_cont.id_epis_diagnosis%TYPE DEFAULT NULL,
        id_epis_diagnosis_nin  IN BOOLEAN := TRUE,
        where_in               VARCHAR2,
        handle_error_in        IN BOOLEAN := TRUE
    );

    PROCEDURE upd_ins
    (
        id_sr_danger_cont_in  IN sr_danger_cont.id_sr_danger_cont%TYPE,
        id_episode_in         IN sr_danger_cont.id_episode%TYPE DEFAULT NULL,
        id_patient_in         IN sr_danger_cont.id_patient%TYPE DEFAULT NULL,
        id_schedule_sr_in     IN sr_danger_cont.id_schedule_sr%TYPE DEFAULT NULL,
        id_prof_reg_in        IN sr_danger_cont.id_prof_reg%TYPE DEFAULT NULL,
        dt_reg_in             IN sr_danger_cont.dt_reg%TYPE DEFAULT NULL,
        flg_status_in         IN sr_danger_cont.flg_status%TYPE DEFAULT NULL,
        create_user_in        IN sr_danger_cont.create_user%TYPE DEFAULT NULL,
        create_time_in        IN sr_danger_cont.create_time%TYPE DEFAULT NULL,
        create_institution_in IN sr_danger_cont.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN sr_danger_cont.update_user%TYPE DEFAULT NULL,
        update_time_in        IN sr_danger_cont.update_time%TYPE DEFAULT NULL,
        update_institution_in IN sr_danger_cont.update_institution%TYPE DEFAULT NULL,
        id_epis_diagnosis_in  IN sr_danger_cont.id_epis_diagnosis%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    );

    PROCEDURE upd_ins
    (
        id_sr_danger_cont_in  IN sr_danger_cont.id_sr_danger_cont%TYPE,
        id_episode_in         IN sr_danger_cont.id_episode%TYPE DEFAULT NULL,
        id_patient_in         IN sr_danger_cont.id_patient%TYPE DEFAULT NULL,
        id_schedule_sr_in     IN sr_danger_cont.id_schedule_sr%TYPE DEFAULT NULL,
        id_prof_reg_in        IN sr_danger_cont.id_prof_reg%TYPE DEFAULT NULL,
        dt_reg_in             IN sr_danger_cont.dt_reg%TYPE DEFAULT NULL,
        flg_status_in         IN sr_danger_cont.flg_status%TYPE DEFAULT NULL,
        create_user_in        IN sr_danger_cont.create_user%TYPE DEFAULT NULL,
        create_time_in        IN sr_danger_cont.create_time%TYPE DEFAULT NULL,
        create_institution_in IN sr_danger_cont.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN sr_danger_cont.update_user%TYPE DEFAULT NULL,
        update_time_in        IN sr_danger_cont.update_time%TYPE DEFAULT NULL,
        update_institution_in IN sr_danger_cont.update_institution%TYPE DEFAULT NULL,
        id_epis_diagnosis_in  IN sr_danger_cont.id_epis_diagnosis%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE
    );

    PROCEDURE upd
    (
        rec_in          IN sr_danger_cont%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    );

    PROCEDURE upd
    (
        rec_in          IN sr_danger_cont%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    );

    PROCEDURE upd
    (
        col_in            IN sr_danger_cont_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    );

    PROCEDURE upd
    (
        col_in            IN sr_danger_cont_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    );

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    );

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    );

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_sr_danger_cont_in IN sr_danger_cont.id_sr_danger_cont%TYPE,
        handle_error_in      IN BOOLEAN := TRUE
    );

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_sr_danger_cont_in IN sr_danger_cont.id_sr_danger_cont%TYPE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    );

    -- Delete all rows for primary key column ID_SR_DANGER_CONT
    PROCEDURE del_id_sr_danger_cont
    (
        id_sr_danger_cont_in IN sr_danger_cont.id_sr_danger_cont%TYPE,
        handle_error_in      IN BOOLEAN := TRUE
    );

    -- Delete all rows for primary key column ID_SR_DANGER_CONT
    PROCEDURE del_id_sr_danger_cont
    (
        id_sr_danger_cont_in IN sr_danger_cont.id_sr_danger_cont%TYPE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    );

    -- Delete all rows for this DACT_EPIS_FK foreign key value
    PROCEDURE del_dact_epis_fk
    (
        id_episode_in   IN sr_danger_cont.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows for this DACT_EPIS_FK foreign key value
    PROCEDURE del_dact_epis_fk
    (
        id_episode_in   IN sr_danger_cont.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows for this DACT_PAT_FK foreign key value
    PROCEDURE del_dact_pat_fk
    (
        id_patient_in   IN sr_danger_cont.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows for this DACT_PAT_FK foreign key value
    PROCEDURE del_dact_pat_fk
    (
        id_patient_in   IN sr_danger_cont.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows for this DACT_PROF_FK foreign key value
    PROCEDURE del_dact_prof_fk
    (
        id_prof_reg_in  IN sr_danger_cont.id_prof_reg%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows for this DACT_PROF_FK foreign key value
    PROCEDURE del_dact_prof_fk
    (
        id_prof_reg_in  IN sr_danger_cont.id_prof_reg%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows for this DACT_SCHR_FK foreign key value
    PROCEDURE del_dact_schr_fk
    (
        id_schedule_sr_in IN sr_danger_cont.id_schedule_sr%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    );

    -- Delete all rows for this DACT_SCHR_FK foreign key value
    PROCEDURE del_dact_schr_fk
    (
        id_schedule_sr_in IN sr_danger_cont.id_schedule_sr%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    );

    -- Delete all rows for this SDC_EPIS_DIAG foreign key value
    PROCEDURE del_sdc_epis_diag
    (
        id_epis_diagnosis_in IN sr_danger_cont.id_epis_diagnosis%TYPE,
        handle_error_in      IN BOOLEAN := TRUE
    );

    -- Delete all rows for this SDC_EPIS_DIAG foreign key value
    PROCEDURE del_sdc_epis_diag
    (
        id_epis_diagnosis_in IN sr_danger_cont.id_epis_diagnosis%TYPE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    );

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified VARCHAR2 column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified VARCHAR2 column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified DATE column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified DATE column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified TIMESTAMP column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified TIMESTAMP column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified NUMBER column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified NUMBER column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(sr_danger_cont_inout IN OUT sr_danger_cont%ROWTYPE);

    FUNCTION initrec RETURN sr_danger_cont%ROWTYPE;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN sr_danger_cont_tc;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN sr_danger_cont_tc;

END ts_sr_danger_cont;
/
