/*-- Last Change Revision: $Rev: 2029327 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:51:03 +0100 (ter, 02 ago 2022) $*/

CREATE OR REPLACE PACKAGE TS_PROF_TEAM_BED
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {1BD37A66-EA60-4927-9A64-F6DD89237236}
| Created On: March 19, 2009 14:54:54
| Created By: ALERT
*/
IS

  -- Collection of %ROWTYPE records based on "PROF_TEAM_BED"
     TYPE PROF_TEAM_BED_tc IS TABLE OF PROF_TEAM_BED%ROWTYPE INDEX BY BINARY_INTEGER;
     TYPE prof_team_bed_ntt IS TABLE OF PROF_TEAM_BED%ROWTYPE;
     TYPE prof_team_bed_vat IS VARRAY(100) OF PROF_TEAM_BED%ROWTYPE;

  -- Same type structure, with a static name.
     TYPE aat IS TABLE OF PROF_TEAM_BED%ROWTYPE INDEX BY BINARY_INTEGER;
     TYPE ntt IS TABLE OF PROF_TEAM_BED%ROWTYPE;
     TYPE vat IS VARRAY(100) OF PROF_TEAM_BED%ROWTYPE;

   -- Column Collection based on column "ID_PROF_TEAM_ROOM"
   TYPE ID_PROF_TEAM_ROOM_cc IS TABLE OF PROF_TEAM_BED.ID_PROF_TEAM_ROOM%TYPE INDEX BY BINARY_INTEGER;
   -- Column Collection based on column "ID_BED"
   TYPE ID_BED_cc IS TABLE OF PROF_TEAM_BED.ID_BED%TYPE INDEX BY BINARY_INTEGER;

   -- Insert one row, providing primary key if present
   PROCEDURE ins (
      id_prof_team_room_in IN PROF_TEAM_BED.ID_PROF_TEAM_ROOM%TYPE,
      id_bed_in IN PROF_TEAM_BED.ID_BED%TYPE
      -- Pass false if you want errors to propagate out unhandled
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      );

   PROCEDURE ins (
      id_prof_team_room_in IN PROF_TEAM_BED.ID_PROF_TEAM_ROOM%TYPE,
      id_bed_in IN PROF_TEAM_BED.ID_BED%TYPE
      -- Pass false if you want errors to propagate out unhandled
     ,handle_error_in IN BOOLEAN := TRUE
      );


   -- Insert a row based on a record.
   PROCEDURE ins (
      rec_in IN PROF_TEAM_BED%ROWTYPE
     ,sequence_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   );

   PROCEDURE ins (
      rec_in IN PROF_TEAM_BED%ROWTYPE
     ,sequence_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
   );

   -- Insert a collection of rows using FORALL; all primary key values
   -- must have already been generated, or are handled in triggers.
   PROCEDURE ins (
      rows_in IN PROF_TEAM_BED_tc
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   );

   PROCEDURE ins (
      rows_in IN PROF_TEAM_BED_tc
     ,handle_error_in IN BOOLEAN := TRUE
   );





   -- Use Native Dynamic SQL increment a single NUMBER column
   -- for all rows specified by the dynamic WHERE clause
   PROCEDURE increment_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL
      , increment_value_in IN NUMBER DEFAULT 1
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   );

   PROCEDURE increment_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL
      , increment_value_in IN NUMBER DEFAULT 1
     ,handle_error_in IN BOOLEAN := TRUE
   );







   -- Delete all rows for this PROF_TEAMB_BED_FK foreign key value
   PROCEDURE del_PROF_TEAMB_BED_FK (
      id_bed_in IN PROF_TEAM_BED.ID_BED%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      );

      -- Delete all rows for this PROF_TEAMB_BED_FK foreign key value
   PROCEDURE del_PROF_TEAMB_BED_FK (
      id_bed_in IN PROF_TEAM_BED.ID_BED%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      );

   -- Delete all rows for this PROF_TEAMB_PTEAMR_FK foreign key value
   PROCEDURE del_PROF_TEAMB_PTEAMR_FK (
      id_prof_team_room_in IN PROF_TEAM_BED.ID_PROF_TEAM_ROOM%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      );

      -- Delete all rows for this PROF_TEAMB_PTEAMR_FK foreign key value
   PROCEDURE del_PROF_TEAMB_PTEAMR_FK (
      id_prof_team_room_in IN PROF_TEAM_BED.ID_PROF_TEAM_ROOM%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      );

    -- Delete all rows specified by dynamic WHERE clause
   PROCEDURE del_by (
      where_clause_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
      );

      -- Delete all rows specified by dynamic WHERE clause
   PROCEDURE del_by (
      where_clause_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      );

    -- Delete all rows where the specified VARCHAR2 column has
   -- a value that matches the specfified value.
   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
      );


      -- Delete all rows where the specified VARCHAR2 column has
   -- a value that matches the specfified value.
   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      );

    -- Delete all rows where the specified DATE column has
   -- a value that matches the specfified value.
   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN DATE
     ,handle_error_in IN BOOLEAN := TRUE
      );

      -- Delete all rows where the specified DATE column has
   -- a value that matches the specfified value.
   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN DATE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      );


      -- Delete all rows where the specified TIMESTAMP column has
   -- a value that matches the specfified value.
   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN TIMESTAMP WITH LOCAL TIME ZONE
     ,handle_error_in IN BOOLEAN := TRUE
      );

      -- Delete all rows where the specified TIMESTAMP column has
   -- a value that matches the specfified value.
   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN TIMESTAMP WITH LOCAL TIME ZONE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      );

    -- Delete all rows where the specified NUMBER column has
   -- a value that matches the specfified value.
   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN NUMBER
     ,handle_error_in IN BOOLEAN := TRUE
      );

      -- Delete all rows where the specified NUMBER column has
   -- a value that matches the specfified value.
   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN NUMBER
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      );

   -- Initialize a record with default values for columns in the table.
   PROCEDURE initrec (
      prof_team_bed_inout IN OUT PROF_TEAM_BED%ROWTYPE
   );

   FUNCTION initrec RETURN PROF_TEAM_BED%ROWTYPE;



   FUNCTION get_data_rowid(
        rows_in IN TABLE_VARCHAR
        ) RETURN PROF_TEAM_BED_tc;


   FUNCTION get_data_rowid_pat(
        rows_in IN TABLE_VARCHAR
        ) RETURN PROF_TEAM_BED_tc;

END TS_PROF_TEAM_BED;
/
