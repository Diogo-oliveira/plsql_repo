/*-- Last Change Revision: $Rev: 1766240 $*/
/*-- Last Change by: $Author: carlos.ferreira $*/
/*-- Date of last change: $Date: 2017-01-16 11:36:14 +0000 (seg, 16 jan 2017) $*/
CREATE OR REPLACE PACKAGE ts_sys_list
/*
| Generated by or retrieved - DO NOT MODIFY!
| Created On: 2016-12-07 14:46:01
| Created By: ALERT
*/
IS

-- Collection of %ROWTYPE records based on sys_list
TYPE sys_list_tc IS TABLE OF sys_list%ROWTYPE INDEX BY BINARY_INTEGER;
TYPE sys_list_ntt IS TABLE OF sys_list%ROWTYPE;
TYPE sys_list_vat IS VARRAY(100) OF sys_list%ROWTYPE;

-- Column Collection based on column ID_SYS_LIST
TYPE ID_SYS_LIST_CC IS TABLE OF sys_list.ID_SYS_LIST%TYPE INDEX BY BINARY_INTEGER;
-- Column Collection based on column CODE_SYS_LIST
TYPE CODE_SYS_LIST_CC IS TABLE OF sys_list.CODE_SYS_LIST%TYPE INDEX BY BINARY_INTEGER;
-- Column Collection based on column IMG_NAME
TYPE IMG_NAME_CC IS TABLE OF sys_list.IMG_NAME%TYPE INDEX BY BINARY_INTEGER;
-- Column Collection based on column CREATE_USER
TYPE CREATE_USER_CC IS TABLE OF sys_list.CREATE_USER%TYPE INDEX BY BINARY_INTEGER;
-- Column Collection based on column CREATE_TIME
TYPE CREATE_TIME_CC IS TABLE OF sys_list.CREATE_TIME%TYPE INDEX BY BINARY_INTEGER;
-- Column Collection based on column CREATE_INSTITUTION
TYPE CREATE_INSTITUTION_CC IS TABLE OF sys_list.CREATE_INSTITUTION%TYPE INDEX BY BINARY_INTEGER;
-- Column Collection based on column UPDATE_USER
TYPE UPDATE_USER_CC IS TABLE OF sys_list.UPDATE_USER%TYPE INDEX BY BINARY_INTEGER;
-- Column Collection based on column UPDATE_TIME
TYPE UPDATE_TIME_CC IS TABLE OF sys_list.UPDATE_TIME%TYPE INDEX BY BINARY_INTEGER;
-- Column Collection based on column UPDATE_INSTITUTION
TYPE UPDATE_INSTITUTION_CC IS TABLE OF sys_list.UPDATE_INSTITUTION%TYPE INDEX BY BINARY_INTEGER;
-- Column Collection based on column INTERNAL_NAME
TYPE INTERNAL_NAME_CC IS TABLE OF sys_list.INTERNAL_NAME%TYPE INDEX BY BINARY_INTEGER;

-- Insert one row, providing primary key if present (with rows_out)
PROCEDURE ins
(
ID_SYS_LIST_in IN sys_list.ID_SYS_LIST%TYPE,
CODE_SYS_LIST_in IN SYS_LIST.CODE_SYS_LIST%TYPE DEFAULT NULL,
IMG_NAME_in IN SYS_LIST.IMG_NAME%TYPE DEFAULT NULL,
CREATE_USER_in IN SYS_LIST.CREATE_USER%TYPE DEFAULT NULL,
CREATE_TIME_in IN SYS_LIST.CREATE_TIME%TYPE DEFAULT NULL,
CREATE_INSTITUTION_in IN SYS_LIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_USER_in IN SYS_LIST.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_TIME_in IN SYS_LIST.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_in IN SYS_LIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
INTERNAL_NAME_in IN SYS_LIST.INTERNAL_NAME%TYPE DEFAULT NULL,
handle_error_in IN BOOLEAN := TRUE,
rows_out OUT table_varchar
);

-- Insert one row, providing primary key if present (without rows_out)
PROCEDURE ins
(
ID_SYS_LIST_in IN sys_list.ID_SYS_LIST%TYPE,
CODE_SYS_LIST_in IN SYS_LIST.CODE_SYS_LIST%TYPE DEFAULT NULL,
IMG_NAME_in IN SYS_LIST.IMG_NAME%TYPE DEFAULT NULL,
CREATE_USER_in IN SYS_LIST.CREATE_USER%TYPE DEFAULT NULL,
CREATE_TIME_in IN SYS_LIST.CREATE_TIME%TYPE DEFAULT NULL,
CREATE_INSTITUTION_in IN SYS_LIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_USER_in IN SYS_LIST.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_TIME_in IN SYS_LIST.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_in IN SYS_LIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
INTERNAL_NAME_in IN SYS_LIST.INTERNAL_NAME%TYPE DEFAULT NULL,
handle_error_in IN BOOLEAN := TRUE
);

-- Insert a row based on a record
-- Specify whether or not a primary key value should be generated
PROCEDURE ins
(
rec_in          IN sys_list%ROWTYPE,
gen_pky_in      IN BOOLEAN DEFAULT FALSE,
sequence_in     IN VARCHAR2 := NULL,
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
);

-- Insert a row based on a record
-- Specify whether or not a primary key value should be generated
PROCEDURE ins
(
rec_in          IN sys_list%ROWTYPE,
gen_pky_in      IN BOOLEAN DEFAULT FALSE,
sequence_in     IN VARCHAR2 := NULL,
handle_error_in IN BOOLEAN := TRUE
);

-- Insert a collection of rows using FORALL; all primary key values
-- must have already been generated, or are handled in triggers
PROCEDURE ins
(
rows_in         IN sys_list_tc,
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
);

-- Insert a collection of rows using FORALL; all primary key values
-- must have already been generated, or are handled in triggers
PROCEDURE ins
(
rows_in         IN sys_list_tc,
handle_error_in IN BOOLEAN := TRUE
);

-- Return next primary key value using the named sequence
FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN sys_list.ID_SYS_LIST%TYPE;

-- Insert one row, generating hidden primary key using a sequence
PROCEDURE ins
(
CODE_SYS_LIST_in IN SYS_LIST.CODE_SYS_LIST%TYPE DEFAULT NULL,
IMG_NAME_in IN SYS_LIST.IMG_NAME%TYPE DEFAULT NULL,
CREATE_USER_in IN SYS_LIST.CREATE_USER%TYPE DEFAULT NULL,
CREATE_TIME_in IN SYS_LIST.CREATE_TIME%TYPE DEFAULT NULL,
CREATE_INSTITUTION_in IN SYS_LIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_USER_in IN SYS_LIST.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_TIME_in IN SYS_LIST.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_in IN SYS_LIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
INTERNAL_NAME_in IN SYS_LIST.INTERNAL_NAME%TYPE DEFAULT NULL,
-- Pass false if you want errors to propagate out unhandled
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
);

-- Insert one row, generating hidden primary key using a sequence
PROCEDURE ins
(
CODE_SYS_LIST_in IN SYS_LIST.CODE_SYS_LIST%TYPE DEFAULT NULL,
IMG_NAME_in IN SYS_LIST.IMG_NAME%TYPE DEFAULT NULL,
CREATE_USER_in IN SYS_LIST.CREATE_USER%TYPE DEFAULT NULL,
CREATE_TIME_in IN SYS_LIST.CREATE_TIME%TYPE DEFAULT NULL,
CREATE_INSTITUTION_in IN SYS_LIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_USER_in IN SYS_LIST.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_TIME_in IN SYS_LIST.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_in IN SYS_LIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
INTERNAL_NAME_in IN SYS_LIST.INTERNAL_NAME%TYPE DEFAULT NULL,
-- Pass false if you want errors to propagate out unhandled
handle_error_in IN BOOLEAN := TRUE
);

-- Insert one row, returning primary key generated by sequence
PROCEDURE ins
(
CODE_SYS_LIST_in IN SYS_LIST.CODE_SYS_LIST%TYPE DEFAULT NULL,
IMG_NAME_in IN SYS_LIST.IMG_NAME%TYPE DEFAULT NULL,
CREATE_USER_in IN SYS_LIST.CREATE_USER%TYPE DEFAULT NULL,
CREATE_TIME_in IN SYS_LIST.CREATE_TIME%TYPE DEFAULT NULL,
CREATE_INSTITUTION_in IN SYS_LIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_USER_in IN SYS_LIST.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_TIME_in IN SYS_LIST.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_in IN SYS_LIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
INTERNAL_NAME_in IN SYS_LIST.INTERNAL_NAME%TYPE DEFAULT NULL,
ID_SYS_LIST_OUT IN OUT sys_list.ID_SYS_LIST%TYPE,
-- Pass false if you want errors to propagate out unhandled
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
);

-- Insert one row, returning primary key generated by sequence
PROCEDURE ins
(
CODE_SYS_LIST_in IN SYS_LIST.CODE_SYS_LIST%TYPE DEFAULT NULL,
IMG_NAME_in IN SYS_LIST.IMG_NAME%TYPE DEFAULT NULL,
CREATE_USER_in IN SYS_LIST.CREATE_USER%TYPE DEFAULT NULL,
CREATE_TIME_in IN SYS_LIST.CREATE_TIME%TYPE DEFAULT NULL,
CREATE_INSTITUTION_in IN SYS_LIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_USER_in IN SYS_LIST.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_TIME_in IN SYS_LIST.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_in IN SYS_LIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
INTERNAL_NAME_in IN SYS_LIST.INTERNAL_NAME%TYPE DEFAULT NULL,
ID_SYS_LIST_OUT IN OUT sys_list.ID_SYS_LIST%TYPE,
-- Pass false if you want errors to propagate out unhandled
handle_error_in IN BOOLEAN := TRUE
);

-- Insert one row with function, return generated primary key
FUNCTION ins
(
CODE_SYS_LIST_in IN SYS_LIST.CODE_SYS_LIST%TYPE DEFAULT NULL,
IMG_NAME_in IN SYS_LIST.IMG_NAME%TYPE DEFAULT NULL,
CREATE_USER_in IN SYS_LIST.CREATE_USER%TYPE DEFAULT NULL,
CREATE_TIME_in IN SYS_LIST.CREATE_TIME%TYPE DEFAULT NULL,
CREATE_INSTITUTION_in IN SYS_LIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_USER_in IN SYS_LIST.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_TIME_in IN SYS_LIST.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_in IN SYS_LIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
INTERNAL_NAME_in IN SYS_LIST.INTERNAL_NAME%TYPE DEFAULT NULL,
-- Pass false if you want errors to propagate out unhandled
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
) RETURN sys_list.ID_SYS_LIST%TYPE;

-- Insert one row with function, return generated primary key
FUNCTION ins
(
CODE_SYS_LIST_in IN SYS_LIST.CODE_SYS_LIST%TYPE DEFAULT NULL,
IMG_NAME_in IN SYS_LIST.IMG_NAME%TYPE DEFAULT NULL,
CREATE_USER_in IN SYS_LIST.CREATE_USER%TYPE DEFAULT NULL,
CREATE_TIME_in IN SYS_LIST.CREATE_TIME%TYPE DEFAULT NULL,
CREATE_INSTITUTION_in IN SYS_LIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_USER_in IN SYS_LIST.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_TIME_in IN SYS_LIST.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_in IN SYS_LIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
INTERNAL_NAME_in IN SYS_LIST.INTERNAL_NAME%TYPE DEFAULT NULL,
-- Pass false if you want errors to propagate out unhandled
handle_error_in IN BOOLEAN := TRUE
) RETURN sys_list.ID_SYS_LIST%TYPE;

-- Update any/all columns by primary key. If you pass NULL, then
-- the current column value is set to itself. If you need a more
-- selected UPDATE then use one of the onecol procedures below.
PROCEDURE upd
(
ID_SYS_LIST_in IN sys_list.ID_SYS_LIST%TYPE,
CODE_SYS_LIST_in IN SYS_LIST.CODE_SYS_LIST%TYPE DEFAULT NULL,
CODE_SYS_LIST_nin IN BOOLEAN := TRUE,
IMG_NAME_in IN SYS_LIST.IMG_NAME%TYPE DEFAULT NULL,
IMG_NAME_nin IN BOOLEAN := TRUE,
CREATE_USER_in IN SYS_LIST.CREATE_USER%TYPE DEFAULT NULL,
CREATE_USER_nin IN BOOLEAN := TRUE,
CREATE_TIME_in IN SYS_LIST.CREATE_TIME%TYPE DEFAULT NULL,
CREATE_TIME_nin IN BOOLEAN := TRUE,
CREATE_INSTITUTION_in IN SYS_LIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
UPDATE_USER_in IN SYS_LIST.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_USER_nin IN BOOLEAN := TRUE,
UPDATE_TIME_in IN SYS_LIST.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_TIME_nin IN BOOLEAN := TRUE,
UPDATE_INSTITUTION_in IN SYS_LIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
INTERNAL_NAME_in IN SYS_LIST.INTERNAL_NAME%TYPE DEFAULT NULL,
INTERNAL_NAME_nin IN BOOLEAN := TRUE,
handle_error_in        IN BOOLEAN := TRUE,
rows_out               IN OUT table_varchar
);

-- Update any/all columns by primary key. If you pass NULL, then
-- the current column value is set to itself. If you need a more
-- selected UPDATE then use one of the onecol procedures below.
PROCEDURE upd
(
ID_SYS_LIST_in IN sys_list.ID_SYS_LIST%TYPE,
CODE_SYS_LIST_in IN SYS_LIST.CODE_SYS_LIST%TYPE DEFAULT NULL,
CODE_SYS_LIST_nin IN BOOLEAN := TRUE,
IMG_NAME_in IN SYS_LIST.IMG_NAME%TYPE DEFAULT NULL,
IMG_NAME_nin IN BOOLEAN := TRUE,
CREATE_USER_in IN SYS_LIST.CREATE_USER%TYPE DEFAULT NULL,
CREATE_USER_nin IN BOOLEAN := TRUE,
CREATE_TIME_in IN SYS_LIST.CREATE_TIME%TYPE DEFAULT NULL,
CREATE_TIME_nin IN BOOLEAN := TRUE,
CREATE_INSTITUTION_in IN SYS_LIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
UPDATE_USER_in IN SYS_LIST.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_USER_nin IN BOOLEAN := TRUE,
UPDATE_TIME_in IN SYS_LIST.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_TIME_nin IN BOOLEAN := TRUE,
UPDATE_INSTITUTION_in IN SYS_LIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
INTERNAL_NAME_in IN SYS_LIST.INTERNAL_NAME%TYPE DEFAULT NULL,
INTERNAL_NAME_nin IN BOOLEAN := TRUE,
handle_error_in        IN BOOLEAN := TRUE
);

--Update any/all columns by dynamic WHERE
-- If you pass NULL, then the current column value is set to itself
PROCEDURE upd
(
CODE_SYS_LIST_in IN SYS_LIST.CODE_SYS_LIST%TYPE DEFAULT NULL,
CODE_SYS_LIST_nin IN BOOLEAN := TRUE,
IMG_NAME_in IN SYS_LIST.IMG_NAME%TYPE DEFAULT NULL,
IMG_NAME_nin IN BOOLEAN := TRUE,
CREATE_USER_in IN SYS_LIST.CREATE_USER%TYPE DEFAULT NULL,
CREATE_USER_nin IN BOOLEAN := TRUE,
CREATE_TIME_in IN SYS_LIST.CREATE_TIME%TYPE DEFAULT NULL,
CREATE_TIME_nin IN BOOLEAN := TRUE,
CREATE_INSTITUTION_in IN SYS_LIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
UPDATE_USER_in IN SYS_LIST.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_USER_nin IN BOOLEAN := TRUE,
UPDATE_TIME_in IN SYS_LIST.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_TIME_nin IN BOOLEAN := TRUE,
UPDATE_INSTITUTION_in IN SYS_LIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
INTERNAL_NAME_in IN SYS_LIST.INTERNAL_NAME%TYPE DEFAULT NULL,
INTERNAL_NAME_nin IN BOOLEAN := TRUE,
where_in               IN VARCHAR2,
handle_error_in        IN BOOLEAN := TRUE,
rows_out               IN OUT table_varchar
);

--Update any/all columns by dynamic WHERE
-- If you pass NULL, then the current column value is set to itself
PROCEDURE upd
(
CODE_SYS_LIST_in IN SYS_LIST.CODE_SYS_LIST%TYPE DEFAULT NULL,
CODE_SYS_LIST_nin IN BOOLEAN := TRUE,
IMG_NAME_in IN SYS_LIST.IMG_NAME%TYPE DEFAULT NULL,
IMG_NAME_nin IN BOOLEAN := TRUE,
CREATE_USER_in IN SYS_LIST.CREATE_USER%TYPE DEFAULT NULL,
CREATE_USER_nin IN BOOLEAN := TRUE,
CREATE_TIME_in IN SYS_LIST.CREATE_TIME%TYPE DEFAULT NULL,
CREATE_TIME_nin IN BOOLEAN := TRUE,
CREATE_INSTITUTION_in IN SYS_LIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
UPDATE_USER_in IN SYS_LIST.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_USER_nin IN BOOLEAN := TRUE,
UPDATE_TIME_in IN SYS_LIST.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_TIME_nin IN BOOLEAN := TRUE,
UPDATE_INSTITUTION_in IN SYS_LIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
INTERNAL_NAME_in IN SYS_LIST.INTERNAL_NAME%TYPE DEFAULT NULL,
INTERNAL_NAME_nin IN BOOLEAN := TRUE,
where_in               IN VARCHAR2,
handle_error_in        IN BOOLEAN := TRUE
);

--Update/insert with columns (with rows_out)
PROCEDURE upd_ins
(
ID_SYS_LIST_in IN sys_list.ID_SYS_LIST%TYPE,
CODE_SYS_LIST_in IN SYS_LIST.CODE_SYS_LIST%TYPE DEFAULT NULL,
IMG_NAME_in IN SYS_LIST.IMG_NAME%TYPE DEFAULT NULL,
CREATE_USER_in IN SYS_LIST.CREATE_USER%TYPE DEFAULT NULL,
CREATE_TIME_in IN SYS_LIST.CREATE_TIME%TYPE DEFAULT NULL,
CREATE_INSTITUTION_in IN SYS_LIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_USER_in IN SYS_LIST.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_TIME_in IN SYS_LIST.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_in IN SYS_LIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
INTERNAL_NAME_in IN SYS_LIST.INTERNAL_NAME%TYPE DEFAULT NULL,
handle_error_in        IN BOOLEAN := TRUE,
rows_out               IN OUT table_varchar
);

--Update/insert with columns (without rows_out)
PROCEDURE upd_ins
(
ID_SYS_LIST_in IN sys_list.ID_SYS_LIST%TYPE,
CODE_SYS_LIST_in IN SYS_LIST.CODE_SYS_LIST%TYPE DEFAULT NULL,
IMG_NAME_in IN SYS_LIST.IMG_NAME%TYPE DEFAULT NULL,
CREATE_USER_in IN SYS_LIST.CREATE_USER%TYPE DEFAULT NULL,
CREATE_TIME_in IN SYS_LIST.CREATE_TIME%TYPE DEFAULT NULL,
CREATE_INSTITUTION_in IN SYS_LIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_USER_in IN SYS_LIST.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_TIME_in IN SYS_LIST.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_in IN SYS_LIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
INTERNAL_NAME_in IN SYS_LIST.INTERNAL_NAME%TYPE DEFAULT NULL,
handle_error_in        IN BOOLEAN := TRUE
);

--Update record (with rows_out)
PROCEDURE upd
(
rec_in          IN sys_list%ROWTYPE,
handle_error_in IN BOOLEAN := TRUE,
rows_out        IN OUT table_varchar
);

--Update record (without rows_out)
PROCEDURE upd
(
rec_in          IN sys_list%ROWTYPE,
handle_error_in IN BOOLEAN := TRUE
);

--Update collection (with rows_out)
PROCEDURE upd
(
col_in            IN sys_list_tc,
ignore_if_null_in IN BOOLEAN := TRUE,
handle_error_in   IN BOOLEAN := TRUE,
rows_out          IN OUT table_varchar
);

--Update collection (without rows_out)
PROCEDURE upd
(
col_in            IN sys_list_tc,
ignore_if_null_in IN BOOLEAN := TRUE,
handle_error_in   IN BOOLEAN := TRUE
);

-- Use Native Dynamic SQL increment a single NUMBER column
-- for all rows specified by the dynamic WHERE clause
PROCEDURE increment_onecol
(
colname_in         IN all_tab_columns.column_name%TYPE,
where_in           IN VARCHAR2,
increment_value_in IN NUMBER DEFAULT 1,
handle_error_in    IN BOOLEAN := TRUE,
rows_out           OUT table_varchar
);

--increment column value
PROCEDURE increment_onecol
(
colname_in         IN all_tab_columns.column_name%TYPE,
where_in           IN VARCHAR2,
increment_value_in IN NUMBER DEFAULT 1,
handle_error_in    IN BOOLEAN := TRUE
);

-- Delete one row by primary key
PROCEDURE del
(
ID_SYS_LIST_in IN sys_list.ID_SYS_LIST%TYPE,
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
);

-- Delete one row by primary key
PROCEDURE del
(
ID_SYS_LIST_in IN sys_list.ID_SYS_LIST%TYPE,
handle_error_in IN BOOLEAN := TRUE
);

-- Delete all rows specified by dynamic WHERE clause
PROCEDURE del_by
(
where_clause_in IN VARCHAR2,
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
);

-- Delete all rows specified by dynamic WHERE clause
PROCEDURE del_by
(
where_clause_in IN VARCHAR2,
handle_error_in IN BOOLEAN := TRUE
);

-- Initialize a record with default values for columns in the table (prc)
PROCEDURE initrec(sys_list_inout IN OUT sys_list%ROWTYPE);

-- Initialize a record with default values for columns in the table (fnc)
FUNCTION initrec RETURN sys_list%ROWTYPE;

-- Get data rowid
FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN sys_list_tc;

-- Get data rowid pragma autonomous transaccion
FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN sys_list_tc;

end ts_sys_list;
/
