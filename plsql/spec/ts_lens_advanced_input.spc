/*-- Last Change Revision: $Rev: 2029234 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:50:32 +0100 (ter, 02 ago 2022) $*/


CREATE OR REPLACE PACKAGE ts_lens_advanced_input
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {1BD37A66-EA60-4927-9A64-F6DD89237236}
| Created On: January 22, 2009 20:1:28
| Created By: ALERT
*/
 IS

    -- Collection of %ROWTYPE records based on "LENS_ADVANCED_INPUT"
    TYPE lens_advanced_input_tc IS TABLE OF lens_advanced_input%ROWTYPE INDEX BY BINARY_INTEGER;
    TYPE lens_advanced_input_ntt IS TABLE OF lens_advanced_input%ROWTYPE;
    TYPE lens_advanced_input_vat IS VARRAY(100) OF lens_advanced_input%ROWTYPE;

    -- Same type structure, with a static name.
    TYPE aat IS TABLE OF lens_advanced_input%ROWTYPE INDEX BY BINARY_INTEGER;
    TYPE ntt IS TABLE OF lens_advanced_input%ROWTYPE;
    TYPE vat IS VARRAY(100) OF lens_advanced_input%ROWTYPE;

    -- Column Collection based on column "ID_LENS"
    TYPE id_lens_cc IS TABLE OF lens_advanced_input.id_lens%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_ADVANCED_INPUT"
    TYPE id_advanced_input_cc IS TABLE OF lens_advanced_input.id_advanced_input%TYPE INDEX BY BINARY_INTEGER;

    -- Insert one row, providing primary key if present
    PROCEDURE ins
    (
        id_lens_in           IN lens_advanced_input.id_lens%TYPE,
        id_advanced_input_in IN lens_advanced_input.id_advanced_input%TYPE
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        id_lens_in           IN lens_advanced_input.id_lens%TYPE,
        id_advanced_input_in IN lens_advanced_input.id_advanced_input%TYPE
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Insert a row based on a record.
    PROCEDURE ins
    (
        rec_in          IN lens_advanced_input%ROWTYPE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        rec_in          IN lens_advanced_input%ROWTYPE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers.
    PROCEDURE ins
    (
        rows_in         IN lens_advanced_input_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        rows_in         IN lens_advanced_input_tc,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    );

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    );

    -- Delete all rows for this LAT_AIT_FK foreign key value
    PROCEDURE del_lat_ait_fk
    (
        id_advanced_input_in IN lens_advanced_input.id_advanced_input%TYPE,
        handle_error_in      IN BOOLEAN := TRUE
    );

    -- Delete all rows for this LAT_AIT_FK foreign key value
    PROCEDURE del_lat_ait_fk
    (
        id_advanced_input_in IN lens_advanced_input.id_advanced_input%TYPE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    );

    -- Delete all rows for this LAT_LEN_FK foreign key value
    PROCEDURE del_lat_len_fk
    (
        id_lens_in      IN lens_advanced_input.id_lens%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows for this LAT_LEN_FK foreign key value
    PROCEDURE del_lat_len_fk
    (
        id_lens_in      IN lens_advanced_input.id_lens%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified VARCHAR2 column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified VARCHAR2 column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified DATE column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified DATE column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified TIMESTAMP column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified TIMESTAMP column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified NUMBER column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified NUMBER column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(lens_advanced_input_inout IN OUT lens_advanced_input%ROWTYPE);

    FUNCTION initrec RETURN lens_advanced_input%ROWTYPE;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN lens_advanced_input_tc;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN lens_advanced_input_tc;

END ts_lens_advanced_input;
/
