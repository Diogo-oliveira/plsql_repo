/*-- Last Change Revision: $Rev: 2029130 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:49:56 +0100 (ter, 02 ago 2022) $*/
CREATE OR REPLACE PACKAGE ts_epis_diagram
/*
| Generated by or retrieved - DO NOT MODIFY!
| Created On: 2017-11-07 14:40:02
| Created By: ALERT
*/
 IS

    -- Collection of %ROWTYPE records based on epis_diagram
    TYPE epis_diagram_tc IS TABLE OF epis_diagram%ROWTYPE INDEX BY BINARY_INTEGER;
    TYPE epis_diagram_ntt IS TABLE OF epis_diagram%ROWTYPE;
    TYPE epis_diagram_vat IS VARRAY(100) OF epis_diagram%ROWTYPE;

    -- Column Collection based on column ID_EPIS_DIAGRAM
    TYPE id_epis_diagram_cc IS TABLE OF epis_diagram.id_epis_diagram%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column FLG_STATUS
    TYPE flg_status_cc IS TABLE OF epis_diagram.flg_status%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column ADW_LAST_UPDATE
    TYPE adw_last_update_cc IS TABLE OF epis_diagram.adw_last_update%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column ID_EPISODE
    TYPE id_episode_cc IS TABLE OF epis_diagram.id_episode%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column DIAGRAM_ORDER
    TYPE diagram_order_cc IS TABLE OF epis_diagram.diagram_order%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column DT_CREATION_TSTZ
    TYPE dt_creation_tstz_cc IS TABLE OF epis_diagram.dt_creation_tstz%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column ID_PATIENT
    TYPE id_patient_cc IS TABLE OF epis_diagram.id_patient%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column CREATE_USER
    TYPE create_user_cc IS TABLE OF epis_diagram.create_user%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column CREATE_TIME
    TYPE create_time_cc IS TABLE OF epis_diagram.create_time%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column CREATE_INSTITUTION
    TYPE create_institution_cc IS TABLE OF epis_diagram.create_institution%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column UPDATE_USER
    TYPE update_user_cc IS TABLE OF epis_diagram.update_user%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column UPDATE_TIME
    TYPE update_time_cc IS TABLE OF epis_diagram.update_time%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column UPDATE_INSTITUTION
    TYPE update_institution_cc IS TABLE OF epis_diagram.update_institution%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column DT_LAST_UPDATE_TSTZ
    TYPE dt_last_update_tstz_cc IS TABLE OF epis_diagram.dt_last_update_tstz%TYPE INDEX BY BINARY_INTEGER;

    -- Insert one row, providing primary key if present (with rows_out)
    PROCEDURE ins
    (
        id_epis_diagram_in     IN epis_diagram.id_epis_diagram%TYPE,
        flg_status_in          IN epis_diagram.flg_status%TYPE DEFAULT NULL,
        adw_last_update_in     IN epis_diagram.adw_last_update%TYPE DEFAULT SYSDATE,
        id_episode_in          IN epis_diagram.id_episode%TYPE DEFAULT NULL,
        diagram_order_in       IN epis_diagram.diagram_order%TYPE DEFAULT NULL,
        dt_creation_tstz_in    IN epis_diagram.dt_creation_tstz%TYPE DEFAULT NULL,
        id_patient_in          IN epis_diagram.id_patient%TYPE DEFAULT NULL,
        create_user_in         IN epis_diagram.create_user%TYPE DEFAULT NULL,
        create_time_in         IN epis_diagram.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN epis_diagram.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN epis_diagram.update_user%TYPE DEFAULT NULL,
        update_time_in         IN epis_diagram.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN epis_diagram.update_institution%TYPE DEFAULT NULL,
        dt_last_update_tstz_in IN epis_diagram.dt_last_update_tstz%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    );

    -- Insert one row, providing primary key if present (without rows_out)
    PROCEDURE ins
    (
        id_epis_diagram_in     IN epis_diagram.id_epis_diagram%TYPE,
        flg_status_in          IN epis_diagram.flg_status%TYPE DEFAULT NULL,
        adw_last_update_in     IN epis_diagram.adw_last_update%TYPE DEFAULT SYSDATE,
        id_episode_in          IN epis_diagram.id_episode%TYPE DEFAULT NULL,
        diagram_order_in       IN epis_diagram.diagram_order%TYPE DEFAULT NULL,
        dt_creation_tstz_in    IN epis_diagram.dt_creation_tstz%TYPE DEFAULT NULL,
        id_patient_in          IN epis_diagram.id_patient%TYPE DEFAULT NULL,
        create_user_in         IN epis_diagram.create_user%TYPE DEFAULT NULL,
        create_time_in         IN epis_diagram.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN epis_diagram.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN epis_diagram.update_user%TYPE DEFAULT NULL,
        update_time_in         IN epis_diagram.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN epis_diagram.update_institution%TYPE DEFAULT NULL,
        dt_last_update_tstz_in IN epis_diagram.dt_last_update_tstz%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    );

    -- Insert a row based on a record
    -- Specify whether or not a primary key value should be generated
    PROCEDURE ins
    (
        rec_in          IN epis_diagram%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Insert a row based on a record
    -- Specify whether or not a primary key value should be generated
    PROCEDURE ins
    (
        rec_in          IN epis_diagram%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN epis_diagram_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN epis_diagram_tc,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Return next primary key value using the named sequence
    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN epis_diagram.id_epis_diagram%TYPE;

    -- Insert one row, generating hidden primary key using a sequence
    PROCEDURE ins
    (
        flg_status_in          IN epis_diagram.flg_status%TYPE DEFAULT NULL,
        adw_last_update_in     IN epis_diagram.adw_last_update%TYPE DEFAULT SYSDATE,
        id_episode_in          IN epis_diagram.id_episode%TYPE DEFAULT NULL,
        diagram_order_in       IN epis_diagram.diagram_order%TYPE DEFAULT NULL,
        dt_creation_tstz_in    IN epis_diagram.dt_creation_tstz%TYPE DEFAULT NULL,
        id_patient_in          IN epis_diagram.id_patient%TYPE DEFAULT NULL,
        create_user_in         IN epis_diagram.create_user%TYPE DEFAULT NULL,
        create_time_in         IN epis_diagram.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN epis_diagram.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN epis_diagram.update_user%TYPE DEFAULT NULL,
        update_time_in         IN epis_diagram.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN epis_diagram.update_institution%TYPE DEFAULT NULL,
        dt_last_update_tstz_in IN epis_diagram.dt_last_update_tstz%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Insert one row, generating hidden primary key using a sequence
    PROCEDURE ins
    (
        flg_status_in          IN epis_diagram.flg_status%TYPE DEFAULT NULL,
        adw_last_update_in     IN epis_diagram.adw_last_update%TYPE DEFAULT SYSDATE,
        id_episode_in          IN epis_diagram.id_episode%TYPE DEFAULT NULL,
        diagram_order_in       IN epis_diagram.diagram_order%TYPE DEFAULT NULL,
        dt_creation_tstz_in    IN epis_diagram.dt_creation_tstz%TYPE DEFAULT NULL,
        id_patient_in          IN epis_diagram.id_patient%TYPE DEFAULT NULL,
        create_user_in         IN epis_diagram.create_user%TYPE DEFAULT NULL,
        create_time_in         IN epis_diagram.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN epis_diagram.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN epis_diagram.update_user%TYPE DEFAULT NULL,
        update_time_in         IN epis_diagram.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN epis_diagram.update_institution%TYPE DEFAULT NULL,
        dt_last_update_tstz_in IN epis_diagram.dt_last_update_tstz%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Insert one row, returning primary key generated by sequence
    PROCEDURE ins
    (
        flg_status_in          IN epis_diagram.flg_status%TYPE DEFAULT NULL,
        adw_last_update_in     IN epis_diagram.adw_last_update%TYPE DEFAULT SYSDATE,
        id_episode_in          IN epis_diagram.id_episode%TYPE DEFAULT NULL,
        diagram_order_in       IN epis_diagram.diagram_order%TYPE DEFAULT NULL,
        dt_creation_tstz_in    IN epis_diagram.dt_creation_tstz%TYPE DEFAULT NULL,
        id_patient_in          IN epis_diagram.id_patient%TYPE DEFAULT NULL,
        create_user_in         IN epis_diagram.create_user%TYPE DEFAULT NULL,
        create_time_in         IN epis_diagram.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN epis_diagram.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN epis_diagram.update_user%TYPE DEFAULT NULL,
        update_time_in         IN epis_diagram.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN epis_diagram.update_institution%TYPE DEFAULT NULL,
        dt_last_update_tstz_in IN epis_diagram.dt_last_update_tstz%TYPE DEFAULT NULL,
        id_epis_diagram_out    IN OUT epis_diagram.id_epis_diagram%TYPE,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Insert one row, returning primary key generated by sequence
    PROCEDURE ins
    (
        flg_status_in          IN epis_diagram.flg_status%TYPE DEFAULT NULL,
        adw_last_update_in     IN epis_diagram.adw_last_update%TYPE DEFAULT SYSDATE,
        id_episode_in          IN epis_diagram.id_episode%TYPE DEFAULT NULL,
        diagram_order_in       IN epis_diagram.diagram_order%TYPE DEFAULT NULL,
        dt_creation_tstz_in    IN epis_diagram.dt_creation_tstz%TYPE DEFAULT NULL,
        id_patient_in          IN epis_diagram.id_patient%TYPE DEFAULT NULL,
        create_user_in         IN epis_diagram.create_user%TYPE DEFAULT NULL,
        create_time_in         IN epis_diagram.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN epis_diagram.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN epis_diagram.update_user%TYPE DEFAULT NULL,
        update_time_in         IN epis_diagram.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN epis_diagram.update_institution%TYPE DEFAULT NULL,
        dt_last_update_tstz_in IN epis_diagram.dt_last_update_tstz%TYPE DEFAULT NULL,
        id_epis_diagram_out    IN OUT epis_diagram.id_epis_diagram%TYPE,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Insert one row with function, return generated primary key
    FUNCTION ins
    (
        flg_status_in          IN epis_diagram.flg_status%TYPE DEFAULT NULL,
        adw_last_update_in     IN epis_diagram.adw_last_update%TYPE DEFAULT SYSDATE,
        id_episode_in          IN epis_diagram.id_episode%TYPE DEFAULT NULL,
        diagram_order_in       IN epis_diagram.diagram_order%TYPE DEFAULT NULL,
        dt_creation_tstz_in    IN epis_diagram.dt_creation_tstz%TYPE DEFAULT NULL,
        id_patient_in          IN epis_diagram.id_patient%TYPE DEFAULT NULL,
        create_user_in         IN epis_diagram.create_user%TYPE DEFAULT NULL,
        create_time_in         IN epis_diagram.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN epis_diagram.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN epis_diagram.update_user%TYPE DEFAULT NULL,
        update_time_in         IN epis_diagram.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN epis_diagram.update_institution%TYPE DEFAULT NULL,
        dt_last_update_tstz_in IN epis_diagram.dt_last_update_tstz%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) RETURN epis_diagram.id_epis_diagram%TYPE;

    -- Insert one row with function, return generated primary key
    FUNCTION ins
    (
        flg_status_in          IN epis_diagram.flg_status%TYPE DEFAULT NULL,
        adw_last_update_in     IN epis_diagram.adw_last_update%TYPE DEFAULT SYSDATE,
        id_episode_in          IN epis_diagram.id_episode%TYPE DEFAULT NULL,
        diagram_order_in       IN epis_diagram.diagram_order%TYPE DEFAULT NULL,
        dt_creation_tstz_in    IN epis_diagram.dt_creation_tstz%TYPE DEFAULT NULL,
        id_patient_in          IN epis_diagram.id_patient%TYPE DEFAULT NULL,
        create_user_in         IN epis_diagram.create_user%TYPE DEFAULT NULL,
        create_time_in         IN epis_diagram.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN epis_diagram.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN epis_diagram.update_user%TYPE DEFAULT NULL,
        update_time_in         IN epis_diagram.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN epis_diagram.update_institution%TYPE DEFAULT NULL,
        dt_last_update_tstz_in IN epis_diagram.dt_last_update_tstz%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE
    ) RETURN epis_diagram.id_epis_diagram%TYPE;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_epis_diagram_in      IN epis_diagram.id_epis_diagram%TYPE,
        flg_status_in           IN epis_diagram.flg_status%TYPE DEFAULT NULL,
        flg_status_nin          IN BOOLEAN := TRUE,
        adw_last_update_in      IN epis_diagram.adw_last_update%TYPE DEFAULT NULL,
        adw_last_update_nin     IN BOOLEAN := TRUE,
        id_episode_in           IN epis_diagram.id_episode%TYPE DEFAULT NULL,
        id_episode_nin          IN BOOLEAN := TRUE,
        diagram_order_in        IN epis_diagram.diagram_order%TYPE DEFAULT NULL,
        diagram_order_nin       IN BOOLEAN := TRUE,
        dt_creation_tstz_in     IN epis_diagram.dt_creation_tstz%TYPE DEFAULT NULL,
        dt_creation_tstz_nin    IN BOOLEAN := TRUE,
        id_patient_in           IN epis_diagram.id_patient%TYPE DEFAULT NULL,
        id_patient_nin          IN BOOLEAN := TRUE,
        create_user_in          IN epis_diagram.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN epis_diagram.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN epis_diagram.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN epis_diagram.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN epis_diagram.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN epis_diagram.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        dt_last_update_tstz_in  IN epis_diagram.dt_last_update_tstz%TYPE DEFAULT NULL,
        dt_last_update_tstz_nin IN BOOLEAN := TRUE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                IN OUT table_varchar
    );

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_epis_diagram_in      IN epis_diagram.id_epis_diagram%TYPE,
        flg_status_in           IN epis_diagram.flg_status%TYPE DEFAULT NULL,
        flg_status_nin          IN BOOLEAN := TRUE,
        adw_last_update_in      IN epis_diagram.adw_last_update%TYPE DEFAULT NULL,
        adw_last_update_nin     IN BOOLEAN := TRUE,
        id_episode_in           IN epis_diagram.id_episode%TYPE DEFAULT NULL,
        id_episode_nin          IN BOOLEAN := TRUE,
        diagram_order_in        IN epis_diagram.diagram_order%TYPE DEFAULT NULL,
        diagram_order_nin       IN BOOLEAN := TRUE,
        dt_creation_tstz_in     IN epis_diagram.dt_creation_tstz%TYPE DEFAULT NULL,
        dt_creation_tstz_nin    IN BOOLEAN := TRUE,
        id_patient_in           IN epis_diagram.id_patient%TYPE DEFAULT NULL,
        id_patient_nin          IN BOOLEAN := TRUE,
        create_user_in          IN epis_diagram.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN epis_diagram.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN epis_diagram.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN epis_diagram.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN epis_diagram.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN epis_diagram.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        dt_last_update_tstz_in  IN epis_diagram.dt_last_update_tstz%TYPE DEFAULT NULL,
        dt_last_update_tstz_nin IN BOOLEAN := TRUE,
        handle_error_in         IN BOOLEAN := TRUE
    );

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        flg_status_in           IN epis_diagram.flg_status%TYPE DEFAULT NULL,
        flg_status_nin          IN BOOLEAN := TRUE,
        adw_last_update_in      IN epis_diagram.adw_last_update%TYPE DEFAULT NULL,
        adw_last_update_nin     IN BOOLEAN := TRUE,
        id_episode_in           IN epis_diagram.id_episode%TYPE DEFAULT NULL,
        id_episode_nin          IN BOOLEAN := TRUE,
        diagram_order_in        IN epis_diagram.diagram_order%TYPE DEFAULT NULL,
        diagram_order_nin       IN BOOLEAN := TRUE,
        dt_creation_tstz_in     IN epis_diagram.dt_creation_tstz%TYPE DEFAULT NULL,
        dt_creation_tstz_nin    IN BOOLEAN := TRUE,
        id_patient_in           IN epis_diagram.id_patient%TYPE DEFAULT NULL,
        id_patient_nin          IN BOOLEAN := TRUE,
        create_user_in          IN epis_diagram.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN epis_diagram.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN epis_diagram.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN epis_diagram.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN epis_diagram.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN epis_diagram.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        dt_last_update_tstz_in  IN epis_diagram.dt_last_update_tstz%TYPE DEFAULT NULL,
        dt_last_update_tstz_nin IN BOOLEAN := TRUE,
        where_in                IN VARCHAR2,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                IN OUT table_varchar
    );

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        flg_status_in           IN epis_diagram.flg_status%TYPE DEFAULT NULL,
        flg_status_nin          IN BOOLEAN := TRUE,
        adw_last_update_in      IN epis_diagram.adw_last_update%TYPE DEFAULT NULL,
        adw_last_update_nin     IN BOOLEAN := TRUE,
        id_episode_in           IN epis_diagram.id_episode%TYPE DEFAULT NULL,
        id_episode_nin          IN BOOLEAN := TRUE,
        diagram_order_in        IN epis_diagram.diagram_order%TYPE DEFAULT NULL,
        diagram_order_nin       IN BOOLEAN := TRUE,
        dt_creation_tstz_in     IN epis_diagram.dt_creation_tstz%TYPE DEFAULT NULL,
        dt_creation_tstz_nin    IN BOOLEAN := TRUE,
        id_patient_in           IN epis_diagram.id_patient%TYPE DEFAULT NULL,
        id_patient_nin          IN BOOLEAN := TRUE,
        create_user_in          IN epis_diagram.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN epis_diagram.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN epis_diagram.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN epis_diagram.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN epis_diagram.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN epis_diagram.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        dt_last_update_tstz_in  IN epis_diagram.dt_last_update_tstz%TYPE DEFAULT NULL,
        dt_last_update_tstz_nin IN BOOLEAN := TRUE,
        where_in                IN VARCHAR2,
        handle_error_in         IN BOOLEAN := TRUE
    );

    --Update/insert with columns (with rows_out)
    PROCEDURE upd_ins
    (
        id_epis_diagram_in     IN epis_diagram.id_epis_diagram%TYPE,
        flg_status_in          IN epis_diagram.flg_status%TYPE DEFAULT NULL,
        adw_last_update_in     IN epis_diagram.adw_last_update%TYPE DEFAULT NULL,
        id_episode_in          IN epis_diagram.id_episode%TYPE DEFAULT NULL,
        diagram_order_in       IN epis_diagram.diagram_order%TYPE DEFAULT NULL,
        dt_creation_tstz_in    IN epis_diagram.dt_creation_tstz%TYPE DEFAULT NULL,
        id_patient_in          IN epis_diagram.id_patient%TYPE DEFAULT NULL,
        create_user_in         IN epis_diagram.create_user%TYPE DEFAULT NULL,
        create_time_in         IN epis_diagram.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN epis_diagram.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN epis_diagram.update_user%TYPE DEFAULT NULL,
        update_time_in         IN epis_diagram.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN epis_diagram.update_institution%TYPE DEFAULT NULL,
        dt_last_update_tstz_in IN epis_diagram.dt_last_update_tstz%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               IN OUT table_varchar
    );

    --Update/insert with columns (without rows_out)
    PROCEDURE upd_ins
    (
        id_epis_diagram_in     IN epis_diagram.id_epis_diagram%TYPE,
        flg_status_in          IN epis_diagram.flg_status%TYPE DEFAULT NULL,
        adw_last_update_in     IN epis_diagram.adw_last_update%TYPE DEFAULT NULL,
        id_episode_in          IN epis_diagram.id_episode%TYPE DEFAULT NULL,
        diagram_order_in       IN epis_diagram.diagram_order%TYPE DEFAULT NULL,
        dt_creation_tstz_in    IN epis_diagram.dt_creation_tstz%TYPE DEFAULT NULL,
        id_patient_in          IN epis_diagram.id_patient%TYPE DEFAULT NULL,
        create_user_in         IN epis_diagram.create_user%TYPE DEFAULT NULL,
        create_time_in         IN epis_diagram.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN epis_diagram.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN epis_diagram.update_user%TYPE DEFAULT NULL,
        update_time_in         IN epis_diagram.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN epis_diagram.update_institution%TYPE DEFAULT NULL,
        dt_last_update_tstz_in IN epis_diagram.dt_last_update_tstz%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    );

    --Update record (with rows_out)
    PROCEDURE upd
    (
        rec_in          IN epis_diagram%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    );

    --Update record (without rows_out)
    PROCEDURE upd
    (
        rec_in          IN epis_diagram%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    );

    --Update collection (with rows_out)
    PROCEDURE upd
    (
        col_in            IN epis_diagram_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    );

    --Update collection (without rows_out)
    PROCEDURE upd
    (
        col_in            IN epis_diagram_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    );

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    );

    --increment column value
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    );

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_epis_diagram_in IN epis_diagram.id_epis_diagram%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    );

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_epis_diagram_in IN epis_diagram.id_epis_diagram%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    );

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows for this EPD_EPIS_FK foreign key value
    PROCEDURE del_epd_epis_fk
    (
        id_episode_in   IN epis_diagram.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows for this EPD_PAT_FK foreign key value
    PROCEDURE del_epd_pat_fk
    (
        id_patient_in   IN epis_diagram.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows for this EPD_EPIS_FK foreign key value
    PROCEDURE del_epd_epis_fk
    (
        id_episode_in   IN epis_diagram.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows for this EPD_PAT_FK foreign key value
    PROCEDURE del_epd_pat_fk
    (
        id_patient_in   IN epis_diagram.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Initialize a record with default values for columns in the table (prc)
    PROCEDURE initrec(epis_diagram_inout IN OUT epis_diagram%ROWTYPE);

    -- Initialize a record with default values for columns in the table (fnc)
    FUNCTION initrec RETURN epis_diagram%ROWTYPE;

    -- Get data rowid
    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN epis_diagram_tc;

    -- Get data rowid pragma autonomous transaccion
    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN epis_diagram_tc;

END ts_epis_diagram;
/
