/*-- Last Change Revision: $Rev: 2029285 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:50:49 +0100 (ter, 02 ago 2022) $*/

CREATE OR REPLACE PACKAGE ts_pat_family_member
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {1BD37A66-EA60-4927-9A64-F6DD89237236}
| Created On: Novembro 21, 2008 18:24:30
| Created By: ALERT
*/
 IS

    -- Collection of %ROWTYPE records based on "PAT_FAMILY_MEMBER"
    TYPE pat_family_member_tc IS TABLE OF pat_family_member%ROWTYPE INDEX BY BINARY_INTEGER;
    TYPE pat_family_member_ntt IS TABLE OF pat_family_member%ROWTYPE;
    TYPE pat_family_member_vat IS VARRAY(100) OF pat_family_member%ROWTYPE;

    -- Same type structure, with a static name.
    TYPE aat IS TABLE OF pat_family_member%ROWTYPE INDEX BY BINARY_INTEGER;
    TYPE ntt IS TABLE OF pat_family_member%ROWTYPE;
    TYPE vat IS VARRAY(100) OF pat_family_member%ROWTYPE;

    -- Column Collection based on column "ID_PAT_FAMILY_MEMBER"
    TYPE id_pat_family_member_cc IS TABLE OF pat_family_member.id_pat_family_member%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_PAT_FAMILY"
    TYPE id_pat_family_cc IS TABLE OF pat_family_member.id_pat_family%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_INSTITUTION"
    TYPE id_institution_cc IS TABLE OF pat_family_member.id_institution%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_PATIENT"
    TYPE id_patient_cc IS TABLE OF pat_family_member.id_patient%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_FAMILY_RELATIONSHIP"
    TYPE id_family_relationship_cc IS TABLE OF pat_family_member.id_family_relationship%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_PAT_RELATED"
    TYPE id_pat_related_cc IS TABLE OF pat_family_member.id_pat_related%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "FLG_STATUS"
    TYPE flg_status_cc IS TABLE OF pat_family_member.flg_status%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_PROF_CANCEL"
    TYPE id_prof_cancel_cc IS TABLE OF pat_family_member.id_prof_cancel%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "DT_CANCEL_TSTZ"
    TYPE dt_cancel_tstz_cc IS TABLE OF pat_family_member.dt_cancel_tstz%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "NOTES_CANCEL"
    TYPE notes_cancel_cc IS TABLE OF pat_family_member.notes_cancel%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_EPISODE"
    TYPE id_episode_cc IS TABLE OF pat_family_member.id_episode%TYPE INDEX BY BINARY_INTEGER;

    -- Insert one row, providing primary key if present
    PROCEDURE ins
    (
        id_pat_family_member_in   IN pat_family_member.id_pat_family_member%TYPE,
        id_pat_family_in          IN pat_family_member.id_pat_family%TYPE DEFAULT NULL,
        id_institution_in         IN pat_family_member.id_institution%TYPE DEFAULT NULL,
        id_patient_in             IN pat_family_member.id_patient%TYPE DEFAULT NULL,
        id_family_relationship_in IN pat_family_member.id_family_relationship%TYPE DEFAULT NULL,
        id_pat_related_in         IN pat_family_member.id_pat_related%TYPE DEFAULT NULL,
        flg_status_in             IN pat_family_member.flg_status%TYPE DEFAULT NULL,
        id_prof_cancel_in         IN pat_family_member.id_prof_cancel%TYPE DEFAULT NULL,
        dt_cancel_tstz_in         IN pat_family_member.dt_cancel_tstz%TYPE DEFAULT NULL,
        notes_cancel_in           IN pat_family_member.notes_cancel%TYPE DEFAULT NULL,
        id_episode_in             IN pat_family_member.id_episode%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        id_pat_family_member_in   IN pat_family_member.id_pat_family_member%TYPE,
        id_pat_family_in          IN pat_family_member.id_pat_family%TYPE DEFAULT NULL,
        id_institution_in         IN pat_family_member.id_institution%TYPE DEFAULT NULL,
        id_patient_in             IN pat_family_member.id_patient%TYPE DEFAULT NULL,
        id_family_relationship_in IN pat_family_member.id_family_relationship%TYPE DEFAULT NULL,
        id_pat_related_in         IN pat_family_member.id_pat_related%TYPE DEFAULT NULL,
        flg_status_in             IN pat_family_member.flg_status%TYPE DEFAULT NULL,
        id_prof_cancel_in         IN pat_family_member.id_prof_cancel%TYPE DEFAULT NULL,
        dt_cancel_tstz_in         IN pat_family_member.dt_cancel_tstz%TYPE DEFAULT NULL,
        notes_cancel_in           IN pat_family_member.notes_cancel%TYPE DEFAULT NULL,
        id_episode_in             IN pat_family_member.id_episode%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Insert a row based on a record.
    -- Specify whether or not a primary key value should be generated.
    PROCEDURE ins
    (
        rec_in          IN pat_family_member%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        rec_in          IN pat_family_member%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers.
    PROCEDURE ins
    (
        rows_in         IN pat_family_member_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        rows_in         IN pat_family_member_tc,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Return next primary key value using the named sequence.
    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN pat_family_member.id_pat_family_member%TYPE;

    -- Insert one row, generating hidden primary key using a sequence
    PROCEDURE ins
    (
        id_pat_family_in          IN pat_family_member.id_pat_family%TYPE DEFAULT NULL,
        id_institution_in         IN pat_family_member.id_institution%TYPE DEFAULT NULL,
        id_patient_in             IN pat_family_member.id_patient%TYPE DEFAULT NULL,
        id_family_relationship_in IN pat_family_member.id_family_relationship%TYPE DEFAULT NULL,
        id_pat_related_in         IN pat_family_member.id_pat_related%TYPE DEFAULT NULL,
        flg_status_in             IN pat_family_member.flg_status%TYPE DEFAULT NULL,
        id_prof_cancel_in         IN pat_family_member.id_prof_cancel%TYPE DEFAULT NULL,
        dt_cancel_tstz_in         IN pat_family_member.dt_cancel_tstz%TYPE DEFAULT NULL,
        notes_cancel_in           IN pat_family_member.notes_cancel%TYPE DEFAULT NULL,
        id_episode_in             IN pat_family_member.id_episode%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        id_pat_family_in          IN pat_family_member.id_pat_family%TYPE DEFAULT NULL,
        id_institution_in         IN pat_family_member.id_institution%TYPE DEFAULT NULL,
        id_patient_in             IN pat_family_member.id_patient%TYPE DEFAULT NULL,
        id_family_relationship_in IN pat_family_member.id_family_relationship%TYPE DEFAULT NULL,
        id_pat_related_in         IN pat_family_member.id_pat_related%TYPE DEFAULT NULL,
        flg_status_in             IN pat_family_member.flg_status%TYPE DEFAULT NULL,
        id_prof_cancel_in         IN pat_family_member.id_prof_cancel%TYPE DEFAULT NULL,
        dt_cancel_tstz_in         IN pat_family_member.dt_cancel_tstz%TYPE DEFAULT NULL,
        notes_cancel_in           IN pat_family_member.notes_cancel%TYPE DEFAULT NULL,
        id_episode_in             IN pat_family_member.id_episode%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Insert one row, returning primary key generated by sequence
    PROCEDURE ins
    (
        id_pat_family_in          IN pat_family_member.id_pat_family%TYPE DEFAULT NULL,
        id_institution_in         IN pat_family_member.id_institution%TYPE DEFAULT NULL,
        id_patient_in             IN pat_family_member.id_patient%TYPE DEFAULT NULL,
        id_family_relationship_in IN pat_family_member.id_family_relationship%TYPE DEFAULT NULL,
        id_pat_related_in         IN pat_family_member.id_pat_related%TYPE DEFAULT NULL,
        flg_status_in             IN pat_family_member.flg_status%TYPE DEFAULT NULL,
        id_prof_cancel_in         IN pat_family_member.id_prof_cancel%TYPE DEFAULT NULL,
        dt_cancel_tstz_in         IN pat_family_member.dt_cancel_tstz%TYPE DEFAULT NULL,
        notes_cancel_in           IN pat_family_member.notes_cancel%TYPE DEFAULT NULL,
        id_episode_in             IN pat_family_member.id_episode%TYPE DEFAULT NULL,
        id_pat_family_member_out  IN OUT pat_family_member.id_pat_family_member%TYPE
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        id_pat_family_in          IN pat_family_member.id_pat_family%TYPE DEFAULT NULL,
        id_institution_in         IN pat_family_member.id_institution%TYPE DEFAULT NULL,
        id_patient_in             IN pat_family_member.id_patient%TYPE DEFAULT NULL,
        id_family_relationship_in IN pat_family_member.id_family_relationship%TYPE DEFAULT NULL,
        id_pat_related_in         IN pat_family_member.id_pat_related%TYPE DEFAULT NULL,
        flg_status_in             IN pat_family_member.flg_status%TYPE DEFAULT NULL,
        id_prof_cancel_in         IN pat_family_member.id_prof_cancel%TYPE DEFAULT NULL,
        dt_cancel_tstz_in         IN pat_family_member.dt_cancel_tstz%TYPE DEFAULT NULL,
        notes_cancel_in           IN pat_family_member.notes_cancel%TYPE DEFAULT NULL,
        id_episode_in             IN pat_family_member.id_episode%TYPE DEFAULT NULL,
        id_pat_family_member_out  IN OUT pat_family_member.id_pat_family_member%TYPE
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Insert one row with function, return generated primary key
    FUNCTION ins
    (
        id_pat_family_in          IN pat_family_member.id_pat_family%TYPE DEFAULT NULL,
        id_institution_in         IN pat_family_member.id_institution%TYPE DEFAULT NULL,
        id_patient_in             IN pat_family_member.id_patient%TYPE DEFAULT NULL,
        id_family_relationship_in IN pat_family_member.id_family_relationship%TYPE DEFAULT NULL,
        id_pat_related_in         IN pat_family_member.id_pat_related%TYPE DEFAULT NULL,
        flg_status_in             IN pat_family_member.flg_status%TYPE DEFAULT NULL,
        id_prof_cancel_in         IN pat_family_member.id_prof_cancel%TYPE DEFAULT NULL,
        dt_cancel_tstz_in         IN pat_family_member.dt_cancel_tstz%TYPE DEFAULT NULL,
        notes_cancel_in           IN pat_family_member.notes_cancel%TYPE DEFAULT NULL,
        id_episode_in             IN pat_family_member.id_episode%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) RETURN pat_family_member.id_pat_family_member%TYPE;

    FUNCTION ins
    (
        id_pat_family_in          IN pat_family_member.id_pat_family%TYPE DEFAULT NULL,
        id_institution_in         IN pat_family_member.id_institution%TYPE DEFAULT NULL,
        id_patient_in             IN pat_family_member.id_patient%TYPE DEFAULT NULL,
        id_family_relationship_in IN pat_family_member.id_family_relationship%TYPE DEFAULT NULL,
        id_pat_related_in         IN pat_family_member.id_pat_related%TYPE DEFAULT NULL,
        flg_status_in             IN pat_family_member.flg_status%TYPE DEFAULT NULL,
        id_prof_cancel_in         IN pat_family_member.id_prof_cancel%TYPE DEFAULT NULL,
        dt_cancel_tstz_in         IN pat_family_member.dt_cancel_tstz%TYPE DEFAULT NULL,
        notes_cancel_in           IN pat_family_member.notes_cancel%TYPE DEFAULT NULL,
        id_episode_in             IN pat_family_member.id_episode%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE
    ) RETURN pat_family_member.id_pat_family_member%TYPE;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.

    PROCEDURE upd
    (
        id_pat_family_member_in    IN pat_family_member.id_pat_family_member%TYPE,
        id_pat_family_in           IN pat_family_member.id_pat_family%TYPE DEFAULT NULL,
        id_pat_family_nin          IN BOOLEAN := TRUE,
        id_institution_in          IN pat_family_member.id_institution%TYPE DEFAULT NULL,
        id_institution_nin         IN BOOLEAN := TRUE,
        id_patient_in              IN pat_family_member.id_patient%TYPE DEFAULT NULL,
        id_patient_nin             IN BOOLEAN := TRUE,
        id_family_relationship_in  IN pat_family_member.id_family_relationship%TYPE DEFAULT NULL,
        id_family_relationship_nin IN BOOLEAN := TRUE,
        id_pat_related_in          IN pat_family_member.id_pat_related%TYPE DEFAULT NULL,
        id_pat_related_nin         IN BOOLEAN := TRUE,
        flg_status_in              IN pat_family_member.flg_status%TYPE DEFAULT NULL,
        flg_status_nin             IN BOOLEAN := TRUE,
        id_prof_cancel_in          IN pat_family_member.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin         IN BOOLEAN := TRUE,
        dt_cancel_tstz_in          IN pat_family_member.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin         IN BOOLEAN := TRUE,
        notes_cancel_in            IN pat_family_member.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin           IN BOOLEAN := TRUE,
        id_episode_in              IN pat_family_member.id_episode%TYPE DEFAULT NULL,
        id_episode_nin             IN BOOLEAN := TRUE,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   IN OUT table_varchar
    );

    PROCEDURE upd
    (
        id_pat_family_member_in    IN pat_family_member.id_pat_family_member%TYPE,
        id_pat_family_in           IN pat_family_member.id_pat_family%TYPE DEFAULT NULL,
        id_pat_family_nin          IN BOOLEAN := TRUE,
        id_institution_in          IN pat_family_member.id_institution%TYPE DEFAULT NULL,
        id_institution_nin         IN BOOLEAN := TRUE,
        id_patient_in              IN pat_family_member.id_patient%TYPE DEFAULT NULL,
        id_patient_nin             IN BOOLEAN := TRUE,
        id_family_relationship_in  IN pat_family_member.id_family_relationship%TYPE DEFAULT NULL,
        id_family_relationship_nin IN BOOLEAN := TRUE,
        id_pat_related_in          IN pat_family_member.id_pat_related%TYPE DEFAULT NULL,
        id_pat_related_nin         IN BOOLEAN := TRUE,
        flg_status_in              IN pat_family_member.flg_status%TYPE DEFAULT NULL,
        flg_status_nin             IN BOOLEAN := TRUE,
        id_prof_cancel_in          IN pat_family_member.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin         IN BOOLEAN := TRUE,
        dt_cancel_tstz_in          IN pat_family_member.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin         IN BOOLEAN := TRUE,
        notes_cancel_in            IN pat_family_member.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin           IN BOOLEAN := TRUE,
        id_episode_in              IN pat_family_member.id_episode%TYPE DEFAULT NULL,
        id_episode_nin             IN BOOLEAN := TRUE,
        handle_error_in            IN BOOLEAN := TRUE
    );

    PROCEDURE upd
    (
        id_pat_family_in           IN pat_family_member.id_pat_family%TYPE DEFAULT NULL,
        id_pat_family_nin          IN BOOLEAN := TRUE,
        id_institution_in          IN pat_family_member.id_institution%TYPE DEFAULT NULL,
        id_institution_nin         IN BOOLEAN := TRUE,
        id_patient_in              IN pat_family_member.id_patient%TYPE DEFAULT NULL,
        id_patient_nin             IN BOOLEAN := TRUE,
        id_family_relationship_in  IN pat_family_member.id_family_relationship%TYPE DEFAULT NULL,
        id_family_relationship_nin IN BOOLEAN := TRUE,
        id_pat_related_in          IN pat_family_member.id_pat_related%TYPE DEFAULT NULL,
        id_pat_related_nin         IN BOOLEAN := TRUE,
        flg_status_in              IN pat_family_member.flg_status%TYPE DEFAULT NULL,
        flg_status_nin             IN BOOLEAN := TRUE,
        id_prof_cancel_in          IN pat_family_member.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin         IN BOOLEAN := TRUE,
        dt_cancel_tstz_in          IN pat_family_member.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin         IN BOOLEAN := TRUE,
        notes_cancel_in            IN pat_family_member.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin           IN BOOLEAN := TRUE,
        id_episode_in              IN pat_family_member.id_episode%TYPE DEFAULT NULL,
        id_episode_nin             IN BOOLEAN := TRUE,
        where_in                   VARCHAR2 DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   IN OUT table_varchar
    );

    PROCEDURE upd
    (
        id_pat_family_in           IN pat_family_member.id_pat_family%TYPE DEFAULT NULL,
        id_pat_family_nin          IN BOOLEAN := TRUE,
        id_institution_in          IN pat_family_member.id_institution%TYPE DEFAULT NULL,
        id_institution_nin         IN BOOLEAN := TRUE,
        id_patient_in              IN pat_family_member.id_patient%TYPE DEFAULT NULL,
        id_patient_nin             IN BOOLEAN := TRUE,
        id_family_relationship_in  IN pat_family_member.id_family_relationship%TYPE DEFAULT NULL,
        id_family_relationship_nin IN BOOLEAN := TRUE,
        id_pat_related_in          IN pat_family_member.id_pat_related%TYPE DEFAULT NULL,
        id_pat_related_nin         IN BOOLEAN := TRUE,
        flg_status_in              IN pat_family_member.flg_status%TYPE DEFAULT NULL,
        flg_status_nin             IN BOOLEAN := TRUE,
        id_prof_cancel_in          IN pat_family_member.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin         IN BOOLEAN := TRUE,
        dt_cancel_tstz_in          IN pat_family_member.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin         IN BOOLEAN := TRUE,
        notes_cancel_in            IN pat_family_member.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin           IN BOOLEAN := TRUE,
        id_episode_in              IN pat_family_member.id_episode%TYPE DEFAULT NULL,
        id_episode_nin             IN BOOLEAN := TRUE,
        where_in                   VARCHAR2 DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE
    );

    PROCEDURE upd_ins
    (
        id_pat_family_member_in   IN pat_family_member.id_pat_family_member%TYPE,
        id_pat_family_in          IN pat_family_member.id_pat_family%TYPE DEFAULT NULL,
        id_institution_in         IN pat_family_member.id_institution%TYPE DEFAULT NULL,
        id_patient_in             IN pat_family_member.id_patient%TYPE DEFAULT NULL,
        id_family_relationship_in IN pat_family_member.id_family_relationship%TYPE DEFAULT NULL,
        id_pat_related_in         IN pat_family_member.id_pat_related%TYPE DEFAULT NULL,
        flg_status_in             IN pat_family_member.flg_status%TYPE DEFAULT NULL,
        id_prof_cancel_in         IN pat_family_member.id_prof_cancel%TYPE DEFAULT NULL,
        dt_cancel_tstz_in         IN pat_family_member.dt_cancel_tstz%TYPE DEFAULT NULL,
        notes_cancel_in           IN pat_family_member.notes_cancel%TYPE DEFAULT NULL,
        id_episode_in             IN pat_family_member.id_episode%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    );

    PROCEDURE upd_ins
    (
        id_pat_family_member_in   IN pat_family_member.id_pat_family_member%TYPE,
        id_pat_family_in          IN pat_family_member.id_pat_family%TYPE DEFAULT NULL,
        id_institution_in         IN pat_family_member.id_institution%TYPE DEFAULT NULL,
        id_patient_in             IN pat_family_member.id_patient%TYPE DEFAULT NULL,
        id_family_relationship_in IN pat_family_member.id_family_relationship%TYPE DEFAULT NULL,
        id_pat_related_in         IN pat_family_member.id_pat_related%TYPE DEFAULT NULL,
        flg_status_in             IN pat_family_member.flg_status%TYPE DEFAULT NULL,
        id_prof_cancel_in         IN pat_family_member.id_prof_cancel%TYPE DEFAULT NULL,
        dt_cancel_tstz_in         IN pat_family_member.dt_cancel_tstz%TYPE DEFAULT NULL,
        notes_cancel_in           IN pat_family_member.notes_cancel%TYPE DEFAULT NULL,
        id_episode_in             IN pat_family_member.id_episode%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE
    );

    PROCEDURE upd
    (
        rec_in          IN pat_family_member%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    );

    PROCEDURE upd
    (
        rec_in          IN pat_family_member%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    );

    PROCEDURE upd
    (
        col_in            IN pat_family_member_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    );

    PROCEDURE upd
    (
        col_in            IN pat_family_member_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    );

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    );

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    );

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_pat_family_member_in IN pat_family_member.id_pat_family_member%TYPE,
        handle_error_in         IN BOOLEAN := TRUE
    );

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_pat_family_member_in IN pat_family_member.id_pat_family_member%TYPE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    );

    -- Delete all rows for primary key column ID_PAT_FAMILY_MEMBER
    PROCEDURE del_id_pat_family_member
    (
        id_pat_family_member_in IN pat_family_member.id_pat_family_member%TYPE,
        handle_error_in         IN BOOLEAN := TRUE
    );

    -- Delete all rows for primary key column ID_PAT_FAMILY_MEMBER
    PROCEDURE del_id_pat_family_member
    (
        id_pat_family_member_in IN pat_family_member.id_pat_family_member%TYPE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    );

    -- Delete all rows for this PFM_PROF_CANCEL_FK foreign key value
    PROCEDURE del_pfm_prof_cancel_fk
    (
        id_prof_cancel_in IN pat_family_member.id_prof_cancel%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    );

    -- Delete all rows for this PFM_PROF_CANCEL_FK foreign key value
    PROCEDURE del_pfm_prof_cancel_fk
    (
        id_prof_cancel_in IN pat_family_member.id_prof_cancel%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    );

    -- Delete all rows for this PTFMM_EPIS_FK foreign key value
    PROCEDURE del_ptfmm_epis_fk
    (
        id_episode_in   IN pat_family_member.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows for this PTFMM_EPIS_FK foreign key value
    PROCEDURE del_ptfmm_epis_fk
    (
        id_episode_in   IN pat_family_member.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows for this PTFMM_FRP_FK foreign key value
    PROCEDURE del_ptfmm_frp_fk
    (
        id_family_relationship_in IN pat_family_member.id_family_relationship%TYPE,
        handle_error_in           IN BOOLEAN := TRUE
    );

    -- Delete all rows for this PTFMM_FRP_FK foreign key value
    PROCEDURE del_ptfmm_frp_fk
    (
        id_family_relationship_in IN pat_family_member.id_family_relationship%TYPE,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    );

    -- Delete all rows for this PTFMM_INST_FK foreign key value
    PROCEDURE del_ptfmm_inst_fk
    (
        id_institution_in IN pat_family_member.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    );

    -- Delete all rows for this PTFMM_INST_FK foreign key value
    PROCEDURE del_ptfmm_inst_fk
    (
        id_institution_in IN pat_family_member.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    );

    -- Delete all rows for this PTFMM_PAT_FK foreign key value
    PROCEDURE del_ptfmm_pat_fk
    (
        id_patient_in   IN pat_family_member.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows for this PTFMM_PAT_FK foreign key value
    PROCEDURE del_ptfmm_pat_fk
    (
        id_patient_in   IN pat_family_member.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows for this PTFMM_PTFAM_FK foreign key value
    PROCEDURE del_ptfmm_ptfam_fk
    (
        id_pat_family_in IN pat_family_member.id_pat_family%TYPE,
        handle_error_in  IN BOOLEAN := TRUE
    );

    -- Delete all rows for this PTFMM_PTFAM_FK foreign key value
    PROCEDURE del_ptfmm_ptfam_fk
    (
        id_pat_family_in IN pat_family_member.id_pat_family%TYPE,
        handle_error_in  IN BOOLEAN := TRUE,
        rows_out         OUT table_varchar
    );

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified VARCHAR2 column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified VARCHAR2 column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified DATE column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified DATE column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified TIMESTAMP column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified TIMESTAMP column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified NUMBER column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified NUMBER column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(pat_family_member_inout IN OUT pat_family_member%ROWTYPE);

    FUNCTION initrec RETURN pat_family_member%ROWTYPE;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN pat_family_member_tc;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN pat_family_member_tc;

END ts_pat_family_member;
/
