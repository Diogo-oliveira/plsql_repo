/*-- Last Change Revision: $Rev: 1686632 $*/
/*-- Last Change by: $Author: luis.r.silva $*/
/*-- Date of last change: $Date: 2015-03-02 11:36:04 +0000 (seg, 02 mar 2015) $*/

CREATE OR REPLACE PACKAGE ts_po_param_sets
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {1BD37A66-EA60-4927-9A64-F6DD89237236}
| Created On: Fevereiro 9, 2015 9:48:31
| Created By: ALERT
*/
 IS

    -- Collection of %ROWTYPE records based on "PO_PARAM_SETS"
    TYPE po_param_sets_tc IS TABLE OF po_param_sets%ROWTYPE INDEX BY BINARY_INTEGER;
    TYPE po_param_sets_ntt IS TABLE OF po_param_sets%ROWTYPE;
    TYPE po_param_sets_vat IS VARRAY(100) OF po_param_sets%ROWTYPE;

    -- Same type structure, with a static name.
    TYPE aat IS TABLE OF po_param_sets%ROWTYPE INDEX BY BINARY_INTEGER;
    TYPE ntt IS TABLE OF po_param_sets%ROWTYPE;
    TYPE vat IS VARRAY(100) OF po_param_sets%ROWTYPE;

    -- Column Collection based on column "ID_PO_PARAM"
    TYPE id_po_param_cc IS TABLE OF po_param_sets.id_po_param%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_INST_OWNER"
    TYPE id_inst_owner_cc IS TABLE OF po_param_sets.id_inst_owner%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_TASK_TYPE"
    TYPE id_task_type_cc IS TABLE OF po_param_sets.id_task_type%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "TASK_TYPE_CONTENT"
    TYPE task_type_content_cc IS TABLE OF po_param_sets.task_type_content%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_SOFTWARE"
    TYPE id_software_cc IS TABLE OF po_param_sets.id_software%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_INSTITUTION"
    TYPE id_institution_cc IS TABLE OF po_param_sets.id_institution%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "RANK"
    TYPE rank_cc IS TABLE OF po_param_sets.rank%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "FLG_AVAILABLE"
    TYPE flg_available_cc IS TABLE OF po_param_sets.flg_available%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "CREATE_USER"
    TYPE create_user_cc IS TABLE OF po_param_sets.create_user%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "CREATE_TIME"
    TYPE create_time_cc IS TABLE OF po_param_sets.create_time%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "CREATE_INSTITUTION"
    TYPE create_institution_cc IS TABLE OF po_param_sets.create_institution%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "UPDATE_USER"
    TYPE update_user_cc IS TABLE OF po_param_sets.update_user%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "UPDATE_TIME"
    TYPE update_time_cc IS TABLE OF po_param_sets.update_time%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "UPDATE_INSTITUTION"
    TYPE update_institution_cc IS TABLE OF po_param_sets.update_institution%TYPE INDEX BY BINARY_INTEGER;

    -- Insert one row, providing primary key if present
    PROCEDURE ins
    (
        id_po_param_in        IN po_param_sets.id_po_param%TYPE DEFAULT NULL,
        id_inst_owner_in      IN po_param_sets.id_inst_owner%TYPE DEFAULT NULL,
        id_task_type_in       IN po_param_sets.id_task_type%TYPE DEFAULT NULL,
        task_type_content_in  IN po_param_sets.task_type_content%TYPE DEFAULT NULL,
        id_software_in        IN po_param_sets.id_software%TYPE DEFAULT NULL,
        id_institution_in     IN po_param_sets.id_institution%TYPE DEFAULT NULL,
        rank_in               IN po_param_sets.rank%TYPE DEFAULT NULL,
        flg_available_in      IN po_param_sets.flg_available%TYPE DEFAULT NULL,
        create_user_in        IN po_param_sets.create_user%TYPE DEFAULT NULL,
        create_time_in        IN po_param_sets.create_time%TYPE DEFAULT NULL,
        create_institution_in IN po_param_sets.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN po_param_sets.update_user%TYPE DEFAULT NULL,
        update_time_in        IN po_param_sets.update_time%TYPE DEFAULT NULL,
        update_institution_in IN po_param_sets.update_institution%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        id_po_param_in        IN po_param_sets.id_po_param%TYPE DEFAULT NULL,
        id_inst_owner_in      IN po_param_sets.id_inst_owner%TYPE DEFAULT NULL,
        id_task_type_in       IN po_param_sets.id_task_type%TYPE DEFAULT NULL,
        task_type_content_in  IN po_param_sets.task_type_content%TYPE DEFAULT NULL,
        id_software_in        IN po_param_sets.id_software%TYPE DEFAULT NULL,
        id_institution_in     IN po_param_sets.id_institution%TYPE DEFAULT NULL,
        rank_in               IN po_param_sets.rank%TYPE DEFAULT NULL,
        flg_available_in      IN po_param_sets.flg_available%TYPE DEFAULT NULL,
        create_user_in        IN po_param_sets.create_user%TYPE DEFAULT NULL,
        create_time_in        IN po_param_sets.create_time%TYPE DEFAULT NULL,
        create_institution_in IN po_param_sets.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN po_param_sets.update_user%TYPE DEFAULT NULL,
        update_time_in        IN po_param_sets.update_time%TYPE DEFAULT NULL,
        update_institution_in IN po_param_sets.update_institution%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Insert a row based on a record.
    PROCEDURE ins
    (
        rec_in          IN po_param_sets%ROWTYPE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        rec_in          IN po_param_sets%ROWTYPE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers.
    PROCEDURE ins
    (
        rows_in         IN po_param_sets_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        rows_in         IN po_param_sets_tc,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    );

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    );

    -- Delete for unique value of POPSETS_UK
    PROCEDURE del_popsets_uk
    (
        id_po_param_in       IN po_param_sets.id_po_param%TYPE,
        id_inst_owner_in     IN po_param_sets.id_inst_owner%TYPE,
        id_task_type_in      IN po_param_sets.id_task_type%TYPE,
        task_type_content_in IN po_param_sets.task_type_content%TYPE,
        id_software_in       IN po_param_sets.id_software%TYPE,
        id_institution_in    IN po_param_sets.id_institution%TYPE,
        handle_error_in      IN BOOLEAN := TRUE
    );

    -- Delete for unique value of POPSETS_UK
    PROCEDURE del_popsets_uk
    (
        id_po_param_in       IN po_param_sets.id_po_param%TYPE,
        id_inst_owner_in     IN po_param_sets.id_inst_owner%TYPE,
        id_task_type_in      IN po_param_sets.id_task_type%TYPE,
        task_type_content_in IN po_param_sets.task_type_content%TYPE,
        id_software_in       IN po_param_sets.id_software%TYPE,
        id_institution_in    IN po_param_sets.id_institution%TYPE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    );

    -- Delete all rows for this POPSETS_POP_FK foreign key value
    PROCEDURE del_popsets_pop_fk
    (
        id_po_param_in   IN po_param_sets.id_po_param%TYPE,
        id_inst_owner_in IN po_param_sets.id_inst_owner%TYPE,
        handle_error_in  IN BOOLEAN := TRUE
    );

    -- Delete all rows for this POPSETS_POP_FK foreign key value
    PROCEDURE del_popsets_pop_fk
    (
        id_po_param_in   IN po_param_sets.id_po_param%TYPE,
        id_inst_owner_in IN po_param_sets.id_inst_owner%TYPE,
        handle_error_in  IN BOOLEAN := TRUE,
        rows_out         OUT table_varchar
    );

    -- Delete all rows for this POPSETS_TTY_FK foreign key value
    PROCEDURE del_popsets_tty_fk
    (
        id_task_type_in IN po_param_sets.id_task_type%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows for this POPSETS_TTY_FK foreign key value
    PROCEDURE del_popsets_tty_fk
    (
        id_task_type_in IN po_param_sets.id_task_type%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified VARCHAR2 column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified VARCHAR2 column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified DATE column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified DATE column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified TIMESTAMP column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified TIMESTAMP column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified NUMBER column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified NUMBER column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(po_param_sets_inout IN OUT po_param_sets%ROWTYPE);

    FUNCTION initrec RETURN po_param_sets%ROWTYPE;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN po_param_sets_tc;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN po_param_sets_tc;

END ts_po_param_sets;
/