/*-- Last Change Revision: $Rev: 2029134 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:49:57 +0100 (ter, 02 ago 2022) $*/
CREATE OR REPLACE PACKAGE ts_epis_diag_stag_pfact
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {1BD37A66-EA60-4927-9A64-F6DD89237236}
| Created On: Outubro 16, 2013 10:44:53
| Created By: ALERT
*/
 IS

    -- Collection of %ROWTYPE records based on "EPIS_DIAG_STAG_PFACT"
    TYPE epis_diag_stag_pfact_tc IS TABLE OF epis_diag_stag_pfact%ROWTYPE INDEX BY BINARY_INTEGER;
    TYPE epis_diag_stag_pfact_ntt IS TABLE OF epis_diag_stag_pfact%ROWTYPE;
    TYPE epis_diag_stag_pfact_vat IS VARRAY(100) OF epis_diag_stag_pfact%ROWTYPE;

    -- Same type structure, with a static name.
    TYPE aat IS TABLE OF epis_diag_stag_pfact%ROWTYPE INDEX BY BINARY_INTEGER;
    TYPE ntt IS TABLE OF epis_diag_stag_pfact%ROWTYPE;
    TYPE vat IS VARRAY(100) OF epis_diag_stag_pfact%ROWTYPE;

    -- Column Collection based on column "ID_EPIS_DIAGNOSIS"
    TYPE id_epis_diagnosis_cc IS TABLE OF epis_diag_stag_pfact.id_epis_diagnosis%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "NUM_STAGING_BASIS"
    TYPE num_staging_basis_cc IS TABLE OF epis_diag_stag_pfact.num_staging_basis%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_FIELD"
    TYPE id_field_cc IS TABLE OF epis_diag_stag_pfact.id_field%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_FIELD_INST_OWNER"
    TYPE id_field_inst_owner_cc IS TABLE OF epis_diag_stag_pfact.id_field_inst_owner%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "FIELD_RANK"
    TYPE field_rank_cc IS TABLE OF epis_diag_stag_pfact.field_rank%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_VALUE"
    TYPE id_value_cc IS TABLE OF epis_diag_stag_pfact.id_value%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_VALUE_INST_OWNER"
    TYPE id_value_inst_owner_cc IS TABLE OF epis_diag_stag_pfact.id_value_inst_owner%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "DESC_VALUE"
    TYPE desc_value_cc IS TABLE OF epis_diag_stag_pfact.desc_value%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "CREATE_USER"
    TYPE create_user_cc IS TABLE OF epis_diag_stag_pfact.create_user%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "CREATE_TIME"
    TYPE create_time_cc IS TABLE OF epis_diag_stag_pfact.create_time%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "CREATE_INSTITUTION"
    TYPE create_institution_cc IS TABLE OF epis_diag_stag_pfact.create_institution%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "UPDATE_USER"
    TYPE update_user_cc IS TABLE OF epis_diag_stag_pfact.update_user%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "UPDATE_TIME"
    TYPE update_time_cc IS TABLE OF epis_diag_stag_pfact.update_time%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "UPDATE_INSTITUTION"
    TYPE update_institution_cc IS TABLE OF epis_diag_stag_pfact.update_institution%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_STAGING_BASIS"
    TYPE id_staging_basis_cc IS TABLE OF epis_diag_stag_pfact.id_staging_basis%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_SBASIS_INST_OWNER"
    TYPE id_sbasis_inst_owner_cc IS TABLE OF epis_diag_stag_pfact.id_sbasis_inst_owner%TYPE INDEX BY BINARY_INTEGER;

    -- Insert one row, providing primary key if present
    PROCEDURE ins
    (
        id_epis_diagnosis_in    IN epis_diag_stag_pfact.id_epis_diagnosis%TYPE,
        num_staging_basis_in    IN epis_diag_stag_pfact.num_staging_basis%TYPE,
        id_field_in             IN epis_diag_stag_pfact.id_field%TYPE,
        id_field_inst_owner_in  IN epis_diag_stag_pfact.id_field_inst_owner%TYPE,
        field_rank_in           IN epis_diag_stag_pfact.field_rank%TYPE DEFAULT NULL,
        id_value_in             IN epis_diag_stag_pfact.id_value%TYPE DEFAULT NULL,
        id_value_inst_owner_in  IN epis_diag_stag_pfact.id_value_inst_owner%TYPE DEFAULT NULL,
        desc_value_in           IN epis_diag_stag_pfact.desc_value%TYPE DEFAULT NULL,
        create_user_in          IN epis_diag_stag_pfact.create_user%TYPE DEFAULT NULL,
        create_time_in          IN epis_diag_stag_pfact.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN epis_diag_stag_pfact.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN epis_diag_stag_pfact.update_user%TYPE DEFAULT NULL,
        update_time_in          IN epis_diag_stag_pfact.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN epis_diag_stag_pfact.update_institution%TYPE DEFAULT NULL,
        id_staging_basis_in     IN epis_diag_stag_pfact.id_staging_basis%TYPE DEFAULT NULL,
        id_sbasis_inst_owner_in IN epis_diag_stag_pfact.id_sbasis_inst_owner%TYPE DEFAULT 0
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        id_epis_diagnosis_in    IN epis_diag_stag_pfact.id_epis_diagnosis%TYPE,
        num_staging_basis_in    IN epis_diag_stag_pfact.num_staging_basis%TYPE,
        id_field_in             IN epis_diag_stag_pfact.id_field%TYPE,
        id_field_inst_owner_in  IN epis_diag_stag_pfact.id_field_inst_owner%TYPE,
        field_rank_in           IN epis_diag_stag_pfact.field_rank%TYPE DEFAULT NULL,
        id_value_in             IN epis_diag_stag_pfact.id_value%TYPE DEFAULT NULL,
        id_value_inst_owner_in  IN epis_diag_stag_pfact.id_value_inst_owner%TYPE DEFAULT NULL,
        desc_value_in           IN epis_diag_stag_pfact.desc_value%TYPE DEFAULT NULL,
        create_user_in          IN epis_diag_stag_pfact.create_user%TYPE DEFAULT NULL,
        create_time_in          IN epis_diag_stag_pfact.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN epis_diag_stag_pfact.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN epis_diag_stag_pfact.update_user%TYPE DEFAULT NULL,
        update_time_in          IN epis_diag_stag_pfact.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN epis_diag_stag_pfact.update_institution%TYPE DEFAULT NULL,
        id_staging_basis_in     IN epis_diag_stag_pfact.id_staging_basis%TYPE DEFAULT NULL,
        id_sbasis_inst_owner_in IN epis_diag_stag_pfact.id_sbasis_inst_owner%TYPE DEFAULT 0
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Insert a row based on a record.
    PROCEDURE ins
    (
        rec_in          IN epis_diag_stag_pfact%ROWTYPE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        rec_in          IN epis_diag_stag_pfact%ROWTYPE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers.
    PROCEDURE ins
    (
        rows_in         IN epis_diag_stag_pfact_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        rows_in         IN epis_diag_stag_pfact_tc,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.

    PROCEDURE upd
    (
        id_epis_diagnosis_in     IN epis_diag_stag_pfact.id_epis_diagnosis%TYPE,
        num_staging_basis_in     IN epis_diag_stag_pfact.num_staging_basis%TYPE,
        id_field_in              IN epis_diag_stag_pfact.id_field%TYPE,
        id_field_inst_owner_in   IN epis_diag_stag_pfact.id_field_inst_owner%TYPE,
        field_rank_in            IN epis_diag_stag_pfact.field_rank%TYPE DEFAULT NULL,
        field_rank_nin           IN BOOLEAN := TRUE,
        id_value_in              IN epis_diag_stag_pfact.id_value%TYPE DEFAULT NULL,
        id_value_nin             IN BOOLEAN := TRUE,
        id_value_inst_owner_in   IN epis_diag_stag_pfact.id_value_inst_owner%TYPE DEFAULT NULL,
        id_value_inst_owner_nin  IN BOOLEAN := TRUE,
        desc_value_in            IN epis_diag_stag_pfact.desc_value%TYPE DEFAULT NULL,
        desc_value_nin           IN BOOLEAN := TRUE,
        create_user_in           IN epis_diag_stag_pfact.create_user%TYPE DEFAULT NULL,
        create_user_nin          IN BOOLEAN := TRUE,
        create_time_in           IN epis_diag_stag_pfact.create_time%TYPE DEFAULT NULL,
        create_time_nin          IN BOOLEAN := TRUE,
        create_institution_in    IN epis_diag_stag_pfact.create_institution%TYPE DEFAULT NULL,
        create_institution_nin   IN BOOLEAN := TRUE,
        update_user_in           IN epis_diag_stag_pfact.update_user%TYPE DEFAULT NULL,
        update_user_nin          IN BOOLEAN := TRUE,
        update_time_in           IN epis_diag_stag_pfact.update_time%TYPE DEFAULT NULL,
        update_time_nin          IN BOOLEAN := TRUE,
        update_institution_in    IN epis_diag_stag_pfact.update_institution%TYPE DEFAULT NULL,
        update_institution_nin   IN BOOLEAN := TRUE,
        id_staging_basis_in      IN epis_diag_stag_pfact.id_staging_basis%TYPE DEFAULT NULL,
        id_staging_basis_nin     IN BOOLEAN := TRUE,
        id_sbasis_inst_owner_in  IN epis_diag_stag_pfact.id_sbasis_inst_owner%TYPE DEFAULT NULL,
        id_sbasis_inst_owner_nin IN BOOLEAN := TRUE,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 IN OUT table_varchar
    );

    PROCEDURE upd
    (
        id_epis_diagnosis_in     IN epis_diag_stag_pfact.id_epis_diagnosis%TYPE,
        num_staging_basis_in     IN epis_diag_stag_pfact.num_staging_basis%TYPE,
        id_field_in              IN epis_diag_stag_pfact.id_field%TYPE,
        id_field_inst_owner_in   IN epis_diag_stag_pfact.id_field_inst_owner%TYPE,
        field_rank_in            IN epis_diag_stag_pfact.field_rank%TYPE DEFAULT NULL,
        field_rank_nin           IN BOOLEAN := TRUE,
        id_value_in              IN epis_diag_stag_pfact.id_value%TYPE DEFAULT NULL,
        id_value_nin             IN BOOLEAN := TRUE,
        id_value_inst_owner_in   IN epis_diag_stag_pfact.id_value_inst_owner%TYPE DEFAULT NULL,
        id_value_inst_owner_nin  IN BOOLEAN := TRUE,
        desc_value_in            IN epis_diag_stag_pfact.desc_value%TYPE DEFAULT NULL,
        desc_value_nin           IN BOOLEAN := TRUE,
        create_user_in           IN epis_diag_stag_pfact.create_user%TYPE DEFAULT NULL,
        create_user_nin          IN BOOLEAN := TRUE,
        create_time_in           IN epis_diag_stag_pfact.create_time%TYPE DEFAULT NULL,
        create_time_nin          IN BOOLEAN := TRUE,
        create_institution_in    IN epis_diag_stag_pfact.create_institution%TYPE DEFAULT NULL,
        create_institution_nin   IN BOOLEAN := TRUE,
        update_user_in           IN epis_diag_stag_pfact.update_user%TYPE DEFAULT NULL,
        update_user_nin          IN BOOLEAN := TRUE,
        update_time_in           IN epis_diag_stag_pfact.update_time%TYPE DEFAULT NULL,
        update_time_nin          IN BOOLEAN := TRUE,
        update_institution_in    IN epis_diag_stag_pfact.update_institution%TYPE DEFAULT NULL,
        update_institution_nin   IN BOOLEAN := TRUE,
        id_staging_basis_in      IN epis_diag_stag_pfact.id_staging_basis%TYPE DEFAULT NULL,
        id_staging_basis_nin     IN BOOLEAN := TRUE,
        id_sbasis_inst_owner_in  IN epis_diag_stag_pfact.id_sbasis_inst_owner%TYPE DEFAULT NULL,
        id_sbasis_inst_owner_nin IN BOOLEAN := TRUE,
        handle_error_in          IN BOOLEAN := TRUE
    );

    PROCEDURE upd
    (
        field_rank_in            IN epis_diag_stag_pfact.field_rank%TYPE DEFAULT NULL,
        field_rank_nin           IN BOOLEAN := TRUE,
        id_value_in              IN epis_diag_stag_pfact.id_value%TYPE DEFAULT NULL,
        id_value_nin             IN BOOLEAN := TRUE,
        id_value_inst_owner_in   IN epis_diag_stag_pfact.id_value_inst_owner%TYPE DEFAULT NULL,
        id_value_inst_owner_nin  IN BOOLEAN := TRUE,
        desc_value_in            IN epis_diag_stag_pfact.desc_value%TYPE DEFAULT NULL,
        desc_value_nin           IN BOOLEAN := TRUE,
        create_user_in           IN epis_diag_stag_pfact.create_user%TYPE DEFAULT NULL,
        create_user_nin          IN BOOLEAN := TRUE,
        create_time_in           IN epis_diag_stag_pfact.create_time%TYPE DEFAULT NULL,
        create_time_nin          IN BOOLEAN := TRUE,
        create_institution_in    IN epis_diag_stag_pfact.create_institution%TYPE DEFAULT NULL,
        create_institution_nin   IN BOOLEAN := TRUE,
        update_user_in           IN epis_diag_stag_pfact.update_user%TYPE DEFAULT NULL,
        update_user_nin          IN BOOLEAN := TRUE,
        update_time_in           IN epis_diag_stag_pfact.update_time%TYPE DEFAULT NULL,
        update_time_nin          IN BOOLEAN := TRUE,
        update_institution_in    IN epis_diag_stag_pfact.update_institution%TYPE DEFAULT NULL,
        update_institution_nin   IN BOOLEAN := TRUE,
        id_staging_basis_in      IN epis_diag_stag_pfact.id_staging_basis%TYPE DEFAULT NULL,
        id_staging_basis_nin     IN BOOLEAN := TRUE,
        id_sbasis_inst_owner_in  IN epis_diag_stag_pfact.id_sbasis_inst_owner%TYPE DEFAULT NULL,
        id_sbasis_inst_owner_nin IN BOOLEAN := TRUE,
        where_in                 VARCHAR2,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 IN OUT table_varchar
    );

    PROCEDURE upd
    (
        field_rank_in            IN epis_diag_stag_pfact.field_rank%TYPE DEFAULT NULL,
        field_rank_nin           IN BOOLEAN := TRUE,
        id_value_in              IN epis_diag_stag_pfact.id_value%TYPE DEFAULT NULL,
        id_value_nin             IN BOOLEAN := TRUE,
        id_value_inst_owner_in   IN epis_diag_stag_pfact.id_value_inst_owner%TYPE DEFAULT NULL,
        id_value_inst_owner_nin  IN BOOLEAN := TRUE,
        desc_value_in            IN epis_diag_stag_pfact.desc_value%TYPE DEFAULT NULL,
        desc_value_nin           IN BOOLEAN := TRUE,
        create_user_in           IN epis_diag_stag_pfact.create_user%TYPE DEFAULT NULL,
        create_user_nin          IN BOOLEAN := TRUE,
        create_time_in           IN epis_diag_stag_pfact.create_time%TYPE DEFAULT NULL,
        create_time_nin          IN BOOLEAN := TRUE,
        create_institution_in    IN epis_diag_stag_pfact.create_institution%TYPE DEFAULT NULL,
        create_institution_nin   IN BOOLEAN := TRUE,
        update_user_in           IN epis_diag_stag_pfact.update_user%TYPE DEFAULT NULL,
        update_user_nin          IN BOOLEAN := TRUE,
        update_time_in           IN epis_diag_stag_pfact.update_time%TYPE DEFAULT NULL,
        update_time_nin          IN BOOLEAN := TRUE,
        update_institution_in    IN epis_diag_stag_pfact.update_institution%TYPE DEFAULT NULL,
        update_institution_nin   IN BOOLEAN := TRUE,
        id_staging_basis_in      IN epis_diag_stag_pfact.id_staging_basis%TYPE DEFAULT NULL,
        id_staging_basis_nin     IN BOOLEAN := TRUE,
        id_sbasis_inst_owner_in  IN epis_diag_stag_pfact.id_sbasis_inst_owner%TYPE DEFAULT NULL,
        id_sbasis_inst_owner_nin IN BOOLEAN := TRUE,
        where_in                 VARCHAR2,
        handle_error_in          IN BOOLEAN := TRUE
    );

    PROCEDURE upd_ins
    (
        id_epis_diagnosis_in    IN epis_diag_stag_pfact.id_epis_diagnosis%TYPE,
        num_staging_basis_in    IN epis_diag_stag_pfact.num_staging_basis%TYPE,
        id_field_in             IN epis_diag_stag_pfact.id_field%TYPE,
        id_field_inst_owner_in  IN epis_diag_stag_pfact.id_field_inst_owner%TYPE,
        field_rank_in           IN epis_diag_stag_pfact.field_rank%TYPE DEFAULT NULL,
        id_value_in             IN epis_diag_stag_pfact.id_value%TYPE DEFAULT NULL,
        id_value_inst_owner_in  IN epis_diag_stag_pfact.id_value_inst_owner%TYPE DEFAULT NULL,
        desc_value_in           IN epis_diag_stag_pfact.desc_value%TYPE DEFAULT NULL,
        create_user_in          IN epis_diag_stag_pfact.create_user%TYPE DEFAULT NULL,
        create_time_in          IN epis_diag_stag_pfact.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN epis_diag_stag_pfact.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN epis_diag_stag_pfact.update_user%TYPE DEFAULT NULL,
        update_time_in          IN epis_diag_stag_pfact.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN epis_diag_stag_pfact.update_institution%TYPE DEFAULT NULL,
        id_staging_basis_in     IN epis_diag_stag_pfact.id_staging_basis%TYPE DEFAULT NULL,
        id_sbasis_inst_owner_in IN epis_diag_stag_pfact.id_sbasis_inst_owner%TYPE DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    );

    PROCEDURE upd_ins
    (
        id_epis_diagnosis_in    IN epis_diag_stag_pfact.id_epis_diagnosis%TYPE,
        num_staging_basis_in    IN epis_diag_stag_pfact.num_staging_basis%TYPE,
        id_field_in             IN epis_diag_stag_pfact.id_field%TYPE,
        id_field_inst_owner_in  IN epis_diag_stag_pfact.id_field_inst_owner%TYPE,
        field_rank_in           IN epis_diag_stag_pfact.field_rank%TYPE DEFAULT NULL,
        id_value_in             IN epis_diag_stag_pfact.id_value%TYPE DEFAULT NULL,
        id_value_inst_owner_in  IN epis_diag_stag_pfact.id_value_inst_owner%TYPE DEFAULT NULL,
        desc_value_in           IN epis_diag_stag_pfact.desc_value%TYPE DEFAULT NULL,
        create_user_in          IN epis_diag_stag_pfact.create_user%TYPE DEFAULT NULL,
        create_time_in          IN epis_diag_stag_pfact.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN epis_diag_stag_pfact.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN epis_diag_stag_pfact.update_user%TYPE DEFAULT NULL,
        update_time_in          IN epis_diag_stag_pfact.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN epis_diag_stag_pfact.update_institution%TYPE DEFAULT NULL,
        id_staging_basis_in     IN epis_diag_stag_pfact.id_staging_basis%TYPE DEFAULT NULL,
        id_sbasis_inst_owner_in IN epis_diag_stag_pfact.id_sbasis_inst_owner%TYPE DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE
    );

    PROCEDURE upd
    (
        rec_in          IN epis_diag_stag_pfact%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    );

    PROCEDURE upd
    (
        rec_in          IN epis_diag_stag_pfact%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    );

    PROCEDURE upd
    (
        col_in            IN epis_diag_stag_pfact_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    );

    PROCEDURE upd
    (
        col_in            IN epis_diag_stag_pfact_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    );

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    );

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    );

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_epis_diagnosis_in   IN epis_diag_stag_pfact.id_epis_diagnosis%TYPE,
        num_staging_basis_in   IN epis_diag_stag_pfact.num_staging_basis%TYPE,
        id_field_in            IN epis_diag_stag_pfact.id_field%TYPE,
        id_field_inst_owner_in IN epis_diag_stag_pfact.id_field_inst_owner%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    );

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_epis_diagnosis_in   IN epis_diag_stag_pfact.id_epis_diagnosis%TYPE,
        num_staging_basis_in   IN epis_diag_stag_pfact.num_staging_basis%TYPE,
        id_field_in            IN epis_diag_stag_pfact.id_field%TYPE,
        id_field_inst_owner_in IN epis_diag_stag_pfact.id_field_inst_owner%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    );

    -- Delete all rows for primary key column ID_EPIS_DIAGNOSIS
    PROCEDURE del_id_epis_diagnosis
    (
        id_epis_diagnosis_in IN epis_diag_stag_pfact.id_epis_diagnosis%TYPE,
        handle_error_in      IN BOOLEAN := TRUE
    );

    -- Delete all rows for primary key column ID_EPIS_DIAGNOSIS
    PROCEDURE del_id_epis_diagnosis
    (
        id_epis_diagnosis_in IN epis_diag_stag_pfact.id_epis_diagnosis%TYPE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    );

    -- Delete all rows for primary key column NUM_STAGING_BASIS
    PROCEDURE del_num_staging_basis
    (
        num_staging_basis_in IN epis_diag_stag_pfact.num_staging_basis%TYPE,
        handle_error_in      IN BOOLEAN := TRUE
    );

    -- Delete all rows for primary key column NUM_STAGING_BASIS
    PROCEDURE del_num_staging_basis
    (
        num_staging_basis_in IN epis_diag_stag_pfact.num_staging_basis%TYPE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    );

    -- Delete all rows for primary key column ID_FIELD
    PROCEDURE del_id_field
    (
        id_field_in     IN epis_diag_stag_pfact.id_field%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows for primary key column ID_FIELD
    PROCEDURE del_id_field
    (
        id_field_in     IN epis_diag_stag_pfact.id_field%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows for primary key column ID_FIELD_INST_OWNER
    PROCEDURE del_id_field_inst_owner
    (
        id_field_inst_owner_in IN epis_diag_stag_pfact.id_field_inst_owner%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    );

    -- Delete all rows for primary key column ID_FIELD_INST_OWNER
    PROCEDURE del_id_field_inst_owner
    (
        id_field_inst_owner_in IN epis_diag_stag_pfact.id_field_inst_owner%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    );

    -- Delete all rows for this EDSPF_CNCPTTR1_FK foreign key value
    PROCEDURE del_edspf_cncpttr1_fk
    (
        id_field_in            IN epis_diag_stag_pfact.id_field%TYPE,
        id_field_inst_owner_in IN epis_diag_stag_pfact.id_field_inst_owner%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    );

    -- Delete all rows for this EDSPF_CNCPTTR1_FK foreign key value
    PROCEDURE del_edspf_cncpttr1_fk
    (
        id_field_in            IN epis_diag_stag_pfact.id_field%TYPE,
        id_field_inst_owner_in IN epis_diag_stag_pfact.id_field_inst_owner%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    );

    -- Delete all rows for this EDSPF_CNCPTTR2_FK foreign key value
    PROCEDURE del_edspf_cncpttr2_fk
    (
        id_value_in            IN epis_diag_stag_pfact.id_value%TYPE,
        id_value_inst_owner_in IN epis_diag_stag_pfact.id_value_inst_owner%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    );

    -- Delete all rows for this EDSPF_CNCPTTR2_FK foreign key value
    PROCEDURE del_edspf_cncpttr2_fk
    (
        id_value_in            IN epis_diag_stag_pfact.id_value%TYPE,
        id_value_inst_owner_in IN epis_diag_stag_pfact.id_value_inst_owner%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    );

    -- Delete all rows for this EDSPF_EDSTGG_FK foreign key value
    PROCEDURE del_edspf_edstgg_fk
    (
        id_epis_diagnosis_in    IN epis_diag_stag_pfact.id_epis_diagnosis%TYPE,
        id_staging_basis_in     IN epis_diag_stag_pfact.id_staging_basis%TYPE,
        id_sbasis_inst_owner_in IN epis_diag_stag_pfact.id_sbasis_inst_owner%TYPE,
        num_staging_basis_in    IN epis_diag_stag_pfact.num_staging_basis%TYPE,
        handle_error_in         IN BOOLEAN := TRUE
    );

    -- Delete all rows for this EDSPF_EDSTGG_FK foreign key value
    PROCEDURE del_edspf_edstgg_fk
    (
        id_epis_diagnosis_in    IN epis_diag_stag_pfact.id_epis_diagnosis%TYPE,
        id_staging_basis_in     IN epis_diag_stag_pfact.id_staging_basis%TYPE,
        id_sbasis_inst_owner_in IN epis_diag_stag_pfact.id_sbasis_inst_owner%TYPE,
        num_staging_basis_in    IN epis_diag_stag_pfact.num_staging_basis%TYPE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    );

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified VARCHAR2 column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified VARCHAR2 column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified DATE column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified DATE column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified TIMESTAMP column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified TIMESTAMP column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified NUMBER column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified NUMBER column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(epis_diag_stag_pfact_inout IN OUT epis_diag_stag_pfact%ROWTYPE);

    FUNCTION initrec RETURN epis_diag_stag_pfact%ROWTYPE;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN epis_diag_stag_pfact_tc;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN epis_diag_stag_pfact_tc;

END ts_epis_diag_stag_pfact;
/
