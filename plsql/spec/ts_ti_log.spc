/*-- Last Change Revision: $Rev: 2029399 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:51:27 +0100 (ter, 02 ago 2022) $*/

CREATE OR REPLACE PACKAGE TS_TI_LOG
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {1BD37A66-EA60-4927-9A64-F6DD89237236}
| Created On: October 16, 2008 19:38:33
| Created By: ALERT
*/
IS

  -- Collection of %ROWTYPE records based on "TI_LOG"
     TYPE TI_LOG_tc IS TABLE OF TI_LOG%ROWTYPE INDEX BY BINARY_INTEGER;
     TYPE ti_log_ntt IS TABLE OF TI_LOG%ROWTYPE;
     TYPE ti_log_vat IS VARRAY(100) OF TI_LOG%ROWTYPE;

  -- Same type structure, with a static name.
     TYPE aat IS TABLE OF TI_LOG%ROWTYPE INDEX BY BINARY_INTEGER;
     TYPE ntt IS TABLE OF TI_LOG%ROWTYPE;
     TYPE vat IS VARRAY(100) OF TI_LOG%ROWTYPE;

   -- Column Collection based on column "ID_TI_LOG"
   TYPE ID_TI_LOG_cc IS TABLE OF TI_LOG.ID_TI_LOG%TYPE INDEX BY BINARY_INTEGER;
   -- Column Collection based on column "ID_EPISODE"
   TYPE ID_EPISODE_cc IS TABLE OF TI_LOG.ID_EPISODE%TYPE INDEX BY BINARY_INTEGER;
   -- Column Collection based on column "ID_PROFESSIONAL"
   TYPE ID_PROFESSIONAL_cc IS TABLE OF TI_LOG.ID_PROFESSIONAL%TYPE INDEX BY BINARY_INTEGER;
   -- Column Collection based on column "FLG_STATUS"
   TYPE FLG_STATUS_cc IS TABLE OF TI_LOG.FLG_STATUS%TYPE INDEX BY BINARY_INTEGER;
   -- Column Collection based on column "ID_RECORD"
   TYPE ID_RECORD_cc IS TABLE OF TI_LOG.ID_RECORD%TYPE INDEX BY BINARY_INTEGER;
   -- Column Collection based on column "FLG_TYPE"
   TYPE FLG_TYPE_cc IS TABLE OF TI_LOG.FLG_TYPE%TYPE INDEX BY BINARY_INTEGER;
   -- Column Collection based on column "RANK"
   TYPE RANK_cc IS TABLE OF TI_LOG.RANK%TYPE INDEX BY BINARY_INTEGER;
   -- Column Collection based on column "DT_CREATION_TSTZ"
   TYPE DT_CREATION_TSTZ_cc IS TABLE OF TI_LOG.DT_CREATION_TSTZ%TYPE INDEX BY BINARY_INTEGER;

   -- Insert one row, providing primary key if present
   PROCEDURE ins (
      id_ti_log_in IN TI_LOG.ID_TI_LOG%TYPE
      ,
      id_episode_in IN TI_LOG.ID_EPISODE%TYPE DEFAULT NULL,
      id_professional_in IN TI_LOG.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      flg_status_in IN TI_LOG.FLG_STATUS%TYPE DEFAULT NULL,
      id_record_in IN TI_LOG.ID_RECORD%TYPE DEFAULT NULL,
      flg_type_in IN TI_LOG.FLG_TYPE%TYPE DEFAULT NULL,
      rank_in IN TI_LOG.RANK%TYPE DEFAULT NULL,
      dt_creation_tstz_in IN TI_LOG.DT_CREATION_TSTZ%TYPE DEFAULT NULL
      -- Pass false if you want errors to propagate out unhandled
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      );

   PROCEDURE ins (
      id_ti_log_in IN TI_LOG.ID_TI_LOG%TYPE
      ,
      id_episode_in IN TI_LOG.ID_EPISODE%TYPE DEFAULT NULL,
      id_professional_in IN TI_LOG.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      flg_status_in IN TI_LOG.FLG_STATUS%TYPE DEFAULT NULL,
      id_record_in IN TI_LOG.ID_RECORD%TYPE DEFAULT NULL,
      flg_type_in IN TI_LOG.FLG_TYPE%TYPE DEFAULT NULL,
      rank_in IN TI_LOG.RANK%TYPE DEFAULT NULL,
      dt_creation_tstz_in IN TI_LOG.DT_CREATION_TSTZ%TYPE DEFAULT NULL
      -- Pass false if you want errors to propagate out unhandled
     ,handle_error_in IN BOOLEAN := TRUE
      );


   -- Insert a row based on a record.
   -- Specify whether or not a primary key value should be generated.
   PROCEDURE ins (
      rec_in IN TI_LOG%ROWTYPE
     ,gen_pky_in IN BOOLEAN DEFAULT FALSE
     ,sequence_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   );

   PROCEDURE ins (
      rec_in IN TI_LOG%ROWTYPE
     ,gen_pky_in IN BOOLEAN DEFAULT FALSE
     ,sequence_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
   );

   -- Insert a collection of rows using FORALL; all primary key values
   -- must have already been generated, or are handled in triggers.
   PROCEDURE ins (
      rows_in IN TI_LOG_tc
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   );

   PROCEDURE ins (
      rows_in IN TI_LOG_tc
     ,handle_error_in IN BOOLEAN := TRUE
   );

   -- Return next primary key value using the named sequence.
     FUNCTION next_key (sequence_in IN VARCHAR2 := NULL) RETURN TI_LOG.ID_TI_LOG%TYPE;

   -- Insert one row, generating hidden primary key using a sequence
   PROCEDURE ins (
      id_episode_in IN TI_LOG.ID_EPISODE%TYPE DEFAULT NULL,
      id_professional_in IN TI_LOG.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      flg_status_in IN TI_LOG.FLG_STATUS%TYPE DEFAULT NULL,
      id_record_in IN TI_LOG.ID_RECORD%TYPE DEFAULT NULL,
      flg_type_in IN TI_LOG.FLG_TYPE%TYPE DEFAULT NULL,
      rank_in IN TI_LOG.RANK%TYPE DEFAULT NULL,
      dt_creation_tstz_in IN TI_LOG.DT_CREATION_TSTZ%TYPE DEFAULT NULL
      -- Pass false if you want errors to propagate out unhandled
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      );

   PROCEDURE ins (
      id_episode_in IN TI_LOG.ID_EPISODE%TYPE DEFAULT NULL,
      id_professional_in IN TI_LOG.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      flg_status_in IN TI_LOG.FLG_STATUS%TYPE DEFAULT NULL,
      id_record_in IN TI_LOG.ID_RECORD%TYPE DEFAULT NULL,
      flg_type_in IN TI_LOG.FLG_TYPE%TYPE DEFAULT NULL,
      rank_in IN TI_LOG.RANK%TYPE DEFAULT NULL,
      dt_creation_tstz_in IN TI_LOG.DT_CREATION_TSTZ%TYPE DEFAULT NULL
      -- Pass false if you want errors to propagate out unhandled
     ,handle_error_in IN BOOLEAN := TRUE
      );

   -- Insert one row, returning primary key generated by sequence
   PROCEDURE ins (
      id_episode_in IN TI_LOG.ID_EPISODE%TYPE DEFAULT NULL,
      id_professional_in IN TI_LOG.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      flg_status_in IN TI_LOG.FLG_STATUS%TYPE DEFAULT NULL,
      id_record_in IN TI_LOG.ID_RECORD%TYPE DEFAULT NULL,
      flg_type_in IN TI_LOG.FLG_TYPE%TYPE DEFAULT NULL,
      rank_in IN TI_LOG.RANK%TYPE DEFAULT NULL,
      dt_creation_tstz_in IN TI_LOG.DT_CREATION_TSTZ%TYPE DEFAULT NULL,
      id_ti_log_out IN OUT TI_LOG.ID_TI_LOG%TYPE
      -- Pass false if you want errors to propagate out unhandled
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      );

   PROCEDURE ins (
      id_episode_in IN TI_LOG.ID_EPISODE%TYPE DEFAULT NULL,
      id_professional_in IN TI_LOG.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      flg_status_in IN TI_LOG.FLG_STATUS%TYPE DEFAULT NULL,
      id_record_in IN TI_LOG.ID_RECORD%TYPE DEFAULT NULL,
      flg_type_in IN TI_LOG.FLG_TYPE%TYPE DEFAULT NULL,
      rank_in IN TI_LOG.RANK%TYPE DEFAULT NULL,
      dt_creation_tstz_in IN TI_LOG.DT_CREATION_TSTZ%TYPE DEFAULT NULL,
      id_ti_log_out IN OUT TI_LOG.ID_TI_LOG%TYPE
      -- Pass false if you want errors to propagate out unhandled
     ,handle_error_in IN BOOLEAN := TRUE
      );

   -- Insert one row with function, return generated primary key
   FUNCTION ins (
      id_episode_in IN TI_LOG.ID_EPISODE%TYPE DEFAULT NULL,
      id_professional_in IN TI_LOG.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      flg_status_in IN TI_LOG.FLG_STATUS%TYPE DEFAULT NULL,
      id_record_in IN TI_LOG.ID_RECORD%TYPE DEFAULT NULL,
      flg_type_in IN TI_LOG.FLG_TYPE%TYPE DEFAULT NULL,
      rank_in IN TI_LOG.RANK%TYPE DEFAULT NULL,
      dt_creation_tstz_in IN TI_LOG.DT_CREATION_TSTZ%TYPE DEFAULT NULL
      -- Pass false if you want errors to propagate out unhandled
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
      RETURN
         TI_LOG.ID_TI_LOG%TYPE
      ;

   FUNCTION ins (
      id_episode_in IN TI_LOG.ID_EPISODE%TYPE DEFAULT NULL,
      id_professional_in IN TI_LOG.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      flg_status_in IN TI_LOG.FLG_STATUS%TYPE DEFAULT NULL,
      id_record_in IN TI_LOG.ID_RECORD%TYPE DEFAULT NULL,
      flg_type_in IN TI_LOG.FLG_TYPE%TYPE DEFAULT NULL,
      rank_in IN TI_LOG.RANK%TYPE DEFAULT NULL,
      dt_creation_tstz_in IN TI_LOG.DT_CREATION_TSTZ%TYPE DEFAULT NULL
      -- Pass false if you want errors to propagate out unhandled
     ,handle_error_in IN BOOLEAN := TRUE
      )
      RETURN
         TI_LOG.ID_TI_LOG%TYPE
      ;

   -- Update any/all columns by primary key. If you pass NULL, then
   -- the current column value is set to itself. If you need a more
   -- selected UPDATE then use one of the onecol procedures below.

  PROCEDURE upd (
      id_ti_log_in IN TI_LOG.ID_TI_LOG%TYPE,
      id_episode_in IN TI_LOG.ID_EPISODE%TYPE DEFAULT NULL,
      ID_EPISODE_nin IN BOOLEAN := TRUE,
      id_professional_in IN TI_LOG.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      ID_PROFESSIONAL_nin IN BOOLEAN := TRUE,
      flg_status_in IN TI_LOG.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      id_record_in IN TI_LOG.ID_RECORD%TYPE DEFAULT NULL,
      ID_RECORD_nin IN BOOLEAN := TRUE,
      flg_type_in IN TI_LOG.FLG_TYPE%TYPE DEFAULT NULL,
      FLG_TYPE_nin IN BOOLEAN := TRUE,
      rank_in IN TI_LOG.RANK%TYPE DEFAULT NULL,
      RANK_nin IN BOOLEAN := TRUE,
      dt_creation_tstz_in IN TI_LOG.DT_CREATION_TSTZ%TYPE DEFAULT NULL,
      DT_CREATION_TSTZ_nin IN BOOLEAN := TRUE,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      );


       PROCEDURE upd (
      id_ti_log_in IN TI_LOG.ID_TI_LOG%TYPE,
      id_episode_in IN TI_LOG.ID_EPISODE%TYPE DEFAULT NULL,
      ID_EPISODE_nin IN BOOLEAN := TRUE,
      id_professional_in IN TI_LOG.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      ID_PROFESSIONAL_nin IN BOOLEAN := TRUE,
      flg_status_in IN TI_LOG.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      id_record_in IN TI_LOG.ID_RECORD%TYPE DEFAULT NULL,
      ID_RECORD_nin IN BOOLEAN := TRUE,
      flg_type_in IN TI_LOG.FLG_TYPE%TYPE DEFAULT NULL,
      FLG_TYPE_nin IN BOOLEAN := TRUE,
      rank_in IN TI_LOG.RANK%TYPE DEFAULT NULL,
      RANK_nin IN BOOLEAN := TRUE,
      dt_creation_tstz_in IN TI_LOG.DT_CREATION_TSTZ%TYPE DEFAULT NULL,
      DT_CREATION_TSTZ_nin IN BOOLEAN := TRUE,
     handle_error_in IN BOOLEAN := TRUE
      );



      PROCEDURE upd (
      id_episode_in IN TI_LOG.ID_EPISODE%TYPE DEFAULT NULL,
      ID_EPISODE_nin IN BOOLEAN := TRUE,
      id_professional_in IN TI_LOG.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      ID_PROFESSIONAL_nin IN BOOLEAN := TRUE,
      flg_status_in IN TI_LOG.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      id_record_in IN TI_LOG.ID_RECORD%TYPE DEFAULT NULL,
      ID_RECORD_nin IN BOOLEAN := TRUE,
      flg_type_in IN TI_LOG.FLG_TYPE%TYPE DEFAULT NULL,
      FLG_TYPE_nin IN BOOLEAN := TRUE,
      rank_in IN TI_LOG.RANK%TYPE DEFAULT NULL,
      RANK_nin IN BOOLEAN := TRUE,
      dt_creation_tstz_in IN TI_LOG.DT_CREATION_TSTZ%TYPE DEFAULT NULL,
      DT_CREATION_TSTZ_nin IN BOOLEAN := TRUE,
    where_in varchar2 DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      );


      PROCEDURE upd (
      id_episode_in IN TI_LOG.ID_EPISODE%TYPE DEFAULT NULL,
      ID_EPISODE_nin IN BOOLEAN := TRUE,
      id_professional_in IN TI_LOG.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      ID_PROFESSIONAL_nin IN BOOLEAN := TRUE,
      flg_status_in IN TI_LOG.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      id_record_in IN TI_LOG.ID_RECORD%TYPE DEFAULT NULL,
      ID_RECORD_nin IN BOOLEAN := TRUE,
      flg_type_in IN TI_LOG.FLG_TYPE%TYPE DEFAULT NULL,
      FLG_TYPE_nin IN BOOLEAN := TRUE,
      rank_in IN TI_LOG.RANK%TYPE DEFAULT NULL,
      RANK_nin IN BOOLEAN := TRUE,
      dt_creation_tstz_in IN TI_LOG.DT_CREATION_TSTZ%TYPE DEFAULT NULL,
      DT_CREATION_TSTZ_nin IN BOOLEAN := TRUE,
    where_in varchar2 DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
      );



   PROCEDURE upd_ins (
      id_ti_log_in IN TI_LOG.ID_TI_LOG%TYPE,
      id_episode_in IN TI_LOG.ID_EPISODE%TYPE DEFAULT NULL,
      id_professional_in IN TI_LOG.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      flg_status_in IN TI_LOG.FLG_STATUS%TYPE DEFAULT NULL,
      id_record_in IN TI_LOG.ID_RECORD%TYPE DEFAULT NULL,
      flg_type_in IN TI_LOG.FLG_TYPE%TYPE DEFAULT NULL,
      rank_in IN TI_LOG.RANK%TYPE DEFAULT NULL,
      dt_creation_tstz_in IN TI_LOG.DT_CREATION_TSTZ%TYPE DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      );

      PROCEDURE upd_ins (
      id_ti_log_in IN TI_LOG.ID_TI_LOG%TYPE,
      id_episode_in IN TI_LOG.ID_EPISODE%TYPE DEFAULT NULL,
      id_professional_in IN TI_LOG.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      flg_status_in IN TI_LOG.FLG_STATUS%TYPE DEFAULT NULL,
      id_record_in IN TI_LOG.ID_RECORD%TYPE DEFAULT NULL,
      flg_type_in IN TI_LOG.FLG_TYPE%TYPE DEFAULT NULL,
      rank_in IN TI_LOG.RANK%TYPE DEFAULT NULL,
      dt_creation_tstz_in IN TI_LOG.DT_CREATION_TSTZ%TYPE DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
      );

   PROCEDURE upd (
      rec_in IN TI_LOG%ROWTYPE,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      );

      PROCEDURE upd (
      rec_in IN TI_LOG%ROWTYPE,
     handle_error_in IN BOOLEAN := TRUE
      );

      PROCEDURE upd (
      col_in IN TI_LOG_tc,
      ignore_if_null_in IN BOOLEAN := TRUE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      );

      PROCEDURE upd (
      col_in IN TI_LOG_tc,
      ignore_if_null_in IN BOOLEAN := TRUE
     ,handle_error_in IN BOOLEAN := TRUE
      );





   -- Use Native Dynamic SQL increment a single NUMBER column
   -- for all rows specified by the dynamic WHERE clause
   PROCEDURE increment_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL
      , increment_value_in IN NUMBER DEFAULT 1
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   );

   PROCEDURE increment_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL
      , increment_value_in IN NUMBER DEFAULT 1
     ,handle_error_in IN BOOLEAN := TRUE
   );









    -- Delete one row by primary key
   PROCEDURE del (
      id_ti_log_in IN TI_LOG.ID_TI_LOG%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      );

-- Delete one row by primary key
   PROCEDURE del (
      id_ti_log_in IN TI_LOG.ID_TI_LOG%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      );


   -- Delete all rows for primary key column ID_TI_LOG
   PROCEDURE del_ID_TI_LOG (
      id_ti_log_in IN TI_LOG.ID_TI_LOG%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     );

     -- Delete all rows for primary key column ID_TI_LOG
   PROCEDURE del_ID_TI_LOG (
      id_ti_log_in IN TI_LOG.ID_TI_LOG%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
     );

   -- Delete all rows for this TLOG_EPIS_FK foreign key value
   PROCEDURE del_TLOG_EPIS_FK (
      id_episode_in IN TI_LOG.ID_EPISODE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      );

      -- Delete all rows for this TLOG_EPIS_FK foreign key value
   PROCEDURE del_TLOG_EPIS_FK (
      id_episode_in IN TI_LOG.ID_EPISODE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      );

   -- Delete all rows for this TLOG_PROF_FK foreign key value
   PROCEDURE del_TLOG_PROF_FK (
      id_professional_in IN TI_LOG.ID_PROFESSIONAL%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      );

      -- Delete all rows for this TLOG_PROF_FK foreign key value
   PROCEDURE del_TLOG_PROF_FK (
      id_professional_in IN TI_LOG.ID_PROFESSIONAL%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      );

    -- Delete all rows specified by dynamic WHERE clause
   PROCEDURE del_by (
      where_clause_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
      );

      -- Delete all rows specified by dynamic WHERE clause
   PROCEDURE del_by (
      where_clause_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      );

    -- Delete all rows where the specified VARCHAR2 column has
   -- a value that matches the specfified value.
   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
      );


      -- Delete all rows where the specified VARCHAR2 column has
   -- a value that matches the specfified value.
   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      );

    -- Delete all rows where the specified DATE column has
   -- a value that matches the specfified value.
   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN DATE
     ,handle_error_in IN BOOLEAN := TRUE
      );

      -- Delete all rows where the specified DATE column has
   -- a value that matches the specfified value.
   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN DATE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      );


      -- Delete all rows where the specified TIMESTAMP column has
   -- a value that matches the specfified value.
   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN TIMESTAMP WITH LOCAL TIME ZONE
     ,handle_error_in IN BOOLEAN := TRUE
      );

      -- Delete all rows where the specified TIMESTAMP column has
   -- a value that matches the specfified value.
   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN TIMESTAMP WITH LOCAL TIME ZONE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      );

    -- Delete all rows where the specified NUMBER column has
   -- a value that matches the specfified value.
   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN NUMBER
     ,handle_error_in IN BOOLEAN := TRUE
      );

      -- Delete all rows where the specified NUMBER column has
   -- a value that matches the specfified value.
   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN NUMBER
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      );

   -- Initialize a record with default values for columns in the table.
   PROCEDURE initrec (
      ti_log_inout IN OUT TI_LOG%ROWTYPE
   );

   FUNCTION initrec RETURN TI_LOG%ROWTYPE;



   FUNCTION get_data_rowid(
        rows_in IN TABLE_VARCHAR
        ) RETURN TI_LOG_tc;


   FUNCTION get_data_rowid_pat(
        rows_in IN TABLE_VARCHAR
        ) RETURN TI_LOG_tc;

END TS_TI_LOG;
/
