/*-- Last Change Revision: $Rev: 2029309 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:50:57 +0100 (ter, 02 ago 2022) $*/

CREATE OR REPLACE PACKAGE ts_pat_vaccine
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {1BD37A66-EA60-4927-9A64-F6DD89237236}
| Created On: Novembro 21, 2008 18:26:13
| Created By: ALERT
*/
 IS

    -- Collection of %ROWTYPE records based on "PAT_VACCINE"
    TYPE pat_vaccine_tc IS TABLE OF pat_vaccine%ROWTYPE INDEX BY BINARY_INTEGER;
    TYPE pat_vaccine_ntt IS TABLE OF pat_vaccine%ROWTYPE;
    TYPE pat_vaccine_vat IS VARRAY(100) OF pat_vaccine%ROWTYPE;

    -- Same type structure, with a static name.
    TYPE aat IS TABLE OF pat_vaccine%ROWTYPE INDEX BY BINARY_INTEGER;
    TYPE ntt IS TABLE OF pat_vaccine%ROWTYPE;
    TYPE vat IS VARRAY(100) OF pat_vaccine%ROWTYPE;

    -- Column Collection based on column "ID_PAT_VACCINE"
    TYPE id_pat_vaccine_cc IS TABLE OF pat_vaccine.id_pat_vaccine%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_PATIENT"
    TYPE id_patient_cc IS TABLE OF pat_vaccine.id_patient%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_INSTITUTION"
    TYPE id_institution_cc IS TABLE OF pat_vaccine.id_institution%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_VACCINE"
    TYPE id_vaccine_cc IS TABLE OF pat_vaccine.id_vaccine%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_PROFESSIONAL"
    TYPE id_professional_cc IS TABLE OF pat_vaccine.id_professional%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "FLG_TAKE_TYPE"
    TYPE flg_take_type_cc IS TABLE OF pat_vaccine.flg_take_type%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "LAB"
    TYPE lab_cc IS TABLE OF pat_vaccine.lab%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "LOTE"
    TYPE lote_cc IS TABLE OF pat_vaccine.lote%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "NOTES"
    TYPE notes_cc IS TABLE OF pat_vaccine.notes%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "TUBERCULIN_TYPE"
    TYPE tuberculin_type_cc IS TABLE OF pat_vaccine.tuberculin_type%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "DT_PAT_VACCINE_TSTZ"
    TYPE dt_pat_vaccine_tstz_cc IS TABLE OF pat_vaccine.dt_pat_vaccine_tstz%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "DT_TAKE_TSTZ"
    TYPE dt_take_tstz_cc IS TABLE OF pat_vaccine.dt_take_tstz%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_EPISODE"
    TYPE id_episode_cc IS TABLE OF pat_vaccine.id_episode%TYPE INDEX BY BINARY_INTEGER;

    -- Insert one row, providing primary key if present
    PROCEDURE ins
    (
        id_pat_vaccine_in      IN pat_vaccine.id_pat_vaccine%TYPE,
        id_patient_in          IN pat_vaccine.id_patient%TYPE DEFAULT NULL,
        id_institution_in      IN pat_vaccine.id_institution%TYPE DEFAULT NULL,
        id_vaccine_in          IN pat_vaccine.id_vaccine%TYPE DEFAULT NULL,
        id_professional_in     IN pat_vaccine.id_professional%TYPE DEFAULT NULL,
        flg_take_type_in       IN pat_vaccine.flg_take_type%TYPE DEFAULT NULL,
        lab_in                 IN pat_vaccine.lab%TYPE DEFAULT NULL,
        lote_in                IN pat_vaccine.lote%TYPE DEFAULT NULL,
        notes_in               IN pat_vaccine.notes%TYPE DEFAULT NULL,
        tuberculin_type_in     IN pat_vaccine.tuberculin_type%TYPE DEFAULT NULL,
        dt_pat_vaccine_tstz_in IN pat_vaccine.dt_pat_vaccine_tstz%TYPE DEFAULT NULL,
        dt_take_tstz_in        IN pat_vaccine.dt_take_tstz%TYPE DEFAULT NULL,
        id_episode_in          IN pat_vaccine.id_episode%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        id_pat_vaccine_in      IN pat_vaccine.id_pat_vaccine%TYPE,
        id_patient_in          IN pat_vaccine.id_patient%TYPE DEFAULT NULL,
        id_institution_in      IN pat_vaccine.id_institution%TYPE DEFAULT NULL,
        id_vaccine_in          IN pat_vaccine.id_vaccine%TYPE DEFAULT NULL,
        id_professional_in     IN pat_vaccine.id_professional%TYPE DEFAULT NULL,
        flg_take_type_in       IN pat_vaccine.flg_take_type%TYPE DEFAULT NULL,
        lab_in                 IN pat_vaccine.lab%TYPE DEFAULT NULL,
        lote_in                IN pat_vaccine.lote%TYPE DEFAULT NULL,
        notes_in               IN pat_vaccine.notes%TYPE DEFAULT NULL,
        tuberculin_type_in     IN pat_vaccine.tuberculin_type%TYPE DEFAULT NULL,
        dt_pat_vaccine_tstz_in IN pat_vaccine.dt_pat_vaccine_tstz%TYPE DEFAULT NULL,
        dt_take_tstz_in        IN pat_vaccine.dt_take_tstz%TYPE DEFAULT NULL,
        id_episode_in          IN pat_vaccine.id_episode%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Insert a row based on a record.
    -- Specify whether or not a primary key value should be generated.
    PROCEDURE ins
    (
        rec_in          IN pat_vaccine%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        rec_in          IN pat_vaccine%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers.
    PROCEDURE ins
    (
        rows_in         IN pat_vaccine_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        rows_in         IN pat_vaccine_tc,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Return next primary key value using the named sequence.
    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN pat_vaccine.id_pat_vaccine%TYPE;

    -- Insert one row, generating hidden primary key using a sequence
    PROCEDURE ins
    (
        id_patient_in          IN pat_vaccine.id_patient%TYPE DEFAULT NULL,
        id_institution_in      IN pat_vaccine.id_institution%TYPE DEFAULT NULL,
        id_vaccine_in          IN pat_vaccine.id_vaccine%TYPE DEFAULT NULL,
        id_professional_in     IN pat_vaccine.id_professional%TYPE DEFAULT NULL,
        flg_take_type_in       IN pat_vaccine.flg_take_type%TYPE DEFAULT NULL,
        lab_in                 IN pat_vaccine.lab%TYPE DEFAULT NULL,
        lote_in                IN pat_vaccine.lote%TYPE DEFAULT NULL,
        notes_in               IN pat_vaccine.notes%TYPE DEFAULT NULL,
        tuberculin_type_in     IN pat_vaccine.tuberculin_type%TYPE DEFAULT NULL,
        dt_pat_vaccine_tstz_in IN pat_vaccine.dt_pat_vaccine_tstz%TYPE DEFAULT NULL,
        dt_take_tstz_in        IN pat_vaccine.dt_take_tstz%TYPE DEFAULT NULL,
        id_episode_in          IN pat_vaccine.id_episode%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        id_patient_in          IN pat_vaccine.id_patient%TYPE DEFAULT NULL,
        id_institution_in      IN pat_vaccine.id_institution%TYPE DEFAULT NULL,
        id_vaccine_in          IN pat_vaccine.id_vaccine%TYPE DEFAULT NULL,
        id_professional_in     IN pat_vaccine.id_professional%TYPE DEFAULT NULL,
        flg_take_type_in       IN pat_vaccine.flg_take_type%TYPE DEFAULT NULL,
        lab_in                 IN pat_vaccine.lab%TYPE DEFAULT NULL,
        lote_in                IN pat_vaccine.lote%TYPE DEFAULT NULL,
        notes_in               IN pat_vaccine.notes%TYPE DEFAULT NULL,
        tuberculin_type_in     IN pat_vaccine.tuberculin_type%TYPE DEFAULT NULL,
        dt_pat_vaccine_tstz_in IN pat_vaccine.dt_pat_vaccine_tstz%TYPE DEFAULT NULL,
        dt_take_tstz_in        IN pat_vaccine.dt_take_tstz%TYPE DEFAULT NULL,
        id_episode_in          IN pat_vaccine.id_episode%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Insert one row, returning primary key generated by sequence
    PROCEDURE ins
    (
        id_patient_in          IN pat_vaccine.id_patient%TYPE DEFAULT NULL,
        id_institution_in      IN pat_vaccine.id_institution%TYPE DEFAULT NULL,
        id_vaccine_in          IN pat_vaccine.id_vaccine%TYPE DEFAULT NULL,
        id_professional_in     IN pat_vaccine.id_professional%TYPE DEFAULT NULL,
        flg_take_type_in       IN pat_vaccine.flg_take_type%TYPE DEFAULT NULL,
        lab_in                 IN pat_vaccine.lab%TYPE DEFAULT NULL,
        lote_in                IN pat_vaccine.lote%TYPE DEFAULT NULL,
        notes_in               IN pat_vaccine.notes%TYPE DEFAULT NULL,
        tuberculin_type_in     IN pat_vaccine.tuberculin_type%TYPE DEFAULT NULL,
        dt_pat_vaccine_tstz_in IN pat_vaccine.dt_pat_vaccine_tstz%TYPE DEFAULT NULL,
        dt_take_tstz_in        IN pat_vaccine.dt_take_tstz%TYPE DEFAULT NULL,
        id_episode_in          IN pat_vaccine.id_episode%TYPE DEFAULT NULL,
        id_pat_vaccine_out     IN OUT pat_vaccine.id_pat_vaccine%TYPE
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        id_patient_in          IN pat_vaccine.id_patient%TYPE DEFAULT NULL,
        id_institution_in      IN pat_vaccine.id_institution%TYPE DEFAULT NULL,
        id_vaccine_in          IN pat_vaccine.id_vaccine%TYPE DEFAULT NULL,
        id_professional_in     IN pat_vaccine.id_professional%TYPE DEFAULT NULL,
        flg_take_type_in       IN pat_vaccine.flg_take_type%TYPE DEFAULT NULL,
        lab_in                 IN pat_vaccine.lab%TYPE DEFAULT NULL,
        lote_in                IN pat_vaccine.lote%TYPE DEFAULT NULL,
        notes_in               IN pat_vaccine.notes%TYPE DEFAULT NULL,
        tuberculin_type_in     IN pat_vaccine.tuberculin_type%TYPE DEFAULT NULL,
        dt_pat_vaccine_tstz_in IN pat_vaccine.dt_pat_vaccine_tstz%TYPE DEFAULT NULL,
        dt_take_tstz_in        IN pat_vaccine.dt_take_tstz%TYPE DEFAULT NULL,
        id_episode_in          IN pat_vaccine.id_episode%TYPE DEFAULT NULL,
        id_pat_vaccine_out     IN OUT pat_vaccine.id_pat_vaccine%TYPE
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Insert one row with function, return generated primary key
    FUNCTION ins
    (
        id_patient_in          IN pat_vaccine.id_patient%TYPE DEFAULT NULL,
        id_institution_in      IN pat_vaccine.id_institution%TYPE DEFAULT NULL,
        id_vaccine_in          IN pat_vaccine.id_vaccine%TYPE DEFAULT NULL,
        id_professional_in     IN pat_vaccine.id_professional%TYPE DEFAULT NULL,
        flg_take_type_in       IN pat_vaccine.flg_take_type%TYPE DEFAULT NULL,
        lab_in                 IN pat_vaccine.lab%TYPE DEFAULT NULL,
        lote_in                IN pat_vaccine.lote%TYPE DEFAULT NULL,
        notes_in               IN pat_vaccine.notes%TYPE DEFAULT NULL,
        tuberculin_type_in     IN pat_vaccine.tuberculin_type%TYPE DEFAULT NULL,
        dt_pat_vaccine_tstz_in IN pat_vaccine.dt_pat_vaccine_tstz%TYPE DEFAULT NULL,
        dt_take_tstz_in        IN pat_vaccine.dt_take_tstz%TYPE DEFAULT NULL,
        id_episode_in          IN pat_vaccine.id_episode%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) RETURN pat_vaccine.id_pat_vaccine%TYPE;

    FUNCTION ins
    (
        id_patient_in          IN pat_vaccine.id_patient%TYPE DEFAULT NULL,
        id_institution_in      IN pat_vaccine.id_institution%TYPE DEFAULT NULL,
        id_vaccine_in          IN pat_vaccine.id_vaccine%TYPE DEFAULT NULL,
        id_professional_in     IN pat_vaccine.id_professional%TYPE DEFAULT NULL,
        flg_take_type_in       IN pat_vaccine.flg_take_type%TYPE DEFAULT NULL,
        lab_in                 IN pat_vaccine.lab%TYPE DEFAULT NULL,
        lote_in                IN pat_vaccine.lote%TYPE DEFAULT NULL,
        notes_in               IN pat_vaccine.notes%TYPE DEFAULT NULL,
        tuberculin_type_in     IN pat_vaccine.tuberculin_type%TYPE DEFAULT NULL,
        dt_pat_vaccine_tstz_in IN pat_vaccine.dt_pat_vaccine_tstz%TYPE DEFAULT NULL,
        dt_take_tstz_in        IN pat_vaccine.dt_take_tstz%TYPE DEFAULT NULL,
        id_episode_in          IN pat_vaccine.id_episode%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE
    ) RETURN pat_vaccine.id_pat_vaccine%TYPE;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.

    PROCEDURE upd
    (
        id_pat_vaccine_in       IN pat_vaccine.id_pat_vaccine%TYPE,
        id_patient_in           IN pat_vaccine.id_patient%TYPE DEFAULT NULL,
        id_patient_nin          IN BOOLEAN := TRUE,
        id_institution_in       IN pat_vaccine.id_institution%TYPE DEFAULT NULL,
        id_institution_nin      IN BOOLEAN := TRUE,
        id_vaccine_in           IN pat_vaccine.id_vaccine%TYPE DEFAULT NULL,
        id_vaccine_nin          IN BOOLEAN := TRUE,
        id_professional_in      IN pat_vaccine.id_professional%TYPE DEFAULT NULL,
        id_professional_nin     IN BOOLEAN := TRUE,
        flg_take_type_in        IN pat_vaccine.flg_take_type%TYPE DEFAULT NULL,
        flg_take_type_nin       IN BOOLEAN := TRUE,
        lab_in                  IN pat_vaccine.lab%TYPE DEFAULT NULL,
        lab_nin                 IN BOOLEAN := TRUE,
        lote_in                 IN pat_vaccine.lote%TYPE DEFAULT NULL,
        lote_nin                IN BOOLEAN := TRUE,
        notes_in                IN pat_vaccine.notes%TYPE DEFAULT NULL,
        notes_nin               IN BOOLEAN := TRUE,
        tuberculin_type_in      IN pat_vaccine.tuberculin_type%TYPE DEFAULT NULL,
        tuberculin_type_nin     IN BOOLEAN := TRUE,
        dt_pat_vaccine_tstz_in  IN pat_vaccine.dt_pat_vaccine_tstz%TYPE DEFAULT NULL,
        dt_pat_vaccine_tstz_nin IN BOOLEAN := TRUE,
        dt_take_tstz_in         IN pat_vaccine.dt_take_tstz%TYPE DEFAULT NULL,
        dt_take_tstz_nin        IN BOOLEAN := TRUE,
        id_episode_in           IN pat_vaccine.id_episode%TYPE DEFAULT NULL,
        id_episode_nin          IN BOOLEAN := TRUE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                IN OUT table_varchar
    );

    PROCEDURE upd
    (
        id_pat_vaccine_in       IN pat_vaccine.id_pat_vaccine%TYPE,
        id_patient_in           IN pat_vaccine.id_patient%TYPE DEFAULT NULL,
        id_patient_nin          IN BOOLEAN := TRUE,
        id_institution_in       IN pat_vaccine.id_institution%TYPE DEFAULT NULL,
        id_institution_nin      IN BOOLEAN := TRUE,
        id_vaccine_in           IN pat_vaccine.id_vaccine%TYPE DEFAULT NULL,
        id_vaccine_nin          IN BOOLEAN := TRUE,
        id_professional_in      IN pat_vaccine.id_professional%TYPE DEFAULT NULL,
        id_professional_nin     IN BOOLEAN := TRUE,
        flg_take_type_in        IN pat_vaccine.flg_take_type%TYPE DEFAULT NULL,
        flg_take_type_nin       IN BOOLEAN := TRUE,
        lab_in                  IN pat_vaccine.lab%TYPE DEFAULT NULL,
        lab_nin                 IN BOOLEAN := TRUE,
        lote_in                 IN pat_vaccine.lote%TYPE DEFAULT NULL,
        lote_nin                IN BOOLEAN := TRUE,
        notes_in                IN pat_vaccine.notes%TYPE DEFAULT NULL,
        notes_nin               IN BOOLEAN := TRUE,
        tuberculin_type_in      IN pat_vaccine.tuberculin_type%TYPE DEFAULT NULL,
        tuberculin_type_nin     IN BOOLEAN := TRUE,
        dt_pat_vaccine_tstz_in  IN pat_vaccine.dt_pat_vaccine_tstz%TYPE DEFAULT NULL,
        dt_pat_vaccine_tstz_nin IN BOOLEAN := TRUE,
        dt_take_tstz_in         IN pat_vaccine.dt_take_tstz%TYPE DEFAULT NULL,
        dt_take_tstz_nin        IN BOOLEAN := TRUE,
        id_episode_in           IN pat_vaccine.id_episode%TYPE DEFAULT NULL,
        id_episode_nin          IN BOOLEAN := TRUE,
        handle_error_in         IN BOOLEAN := TRUE
    );

    PROCEDURE upd
    (
        id_patient_in           IN pat_vaccine.id_patient%TYPE DEFAULT NULL,
        id_patient_nin          IN BOOLEAN := TRUE,
        id_institution_in       IN pat_vaccine.id_institution%TYPE DEFAULT NULL,
        id_institution_nin      IN BOOLEAN := TRUE,
        id_vaccine_in           IN pat_vaccine.id_vaccine%TYPE DEFAULT NULL,
        id_vaccine_nin          IN BOOLEAN := TRUE,
        id_professional_in      IN pat_vaccine.id_professional%TYPE DEFAULT NULL,
        id_professional_nin     IN BOOLEAN := TRUE,
        flg_take_type_in        IN pat_vaccine.flg_take_type%TYPE DEFAULT NULL,
        flg_take_type_nin       IN BOOLEAN := TRUE,
        lab_in                  IN pat_vaccine.lab%TYPE DEFAULT NULL,
        lab_nin                 IN BOOLEAN := TRUE,
        lote_in                 IN pat_vaccine.lote%TYPE DEFAULT NULL,
        lote_nin                IN BOOLEAN := TRUE,
        notes_in                IN pat_vaccine.notes%TYPE DEFAULT NULL,
        notes_nin               IN BOOLEAN := TRUE,
        tuberculin_type_in      IN pat_vaccine.tuberculin_type%TYPE DEFAULT NULL,
        tuberculin_type_nin     IN BOOLEAN := TRUE,
        dt_pat_vaccine_tstz_in  IN pat_vaccine.dt_pat_vaccine_tstz%TYPE DEFAULT NULL,
        dt_pat_vaccine_tstz_nin IN BOOLEAN := TRUE,
        dt_take_tstz_in         IN pat_vaccine.dt_take_tstz%TYPE DEFAULT NULL,
        dt_take_tstz_nin        IN BOOLEAN := TRUE,
        id_episode_in           IN pat_vaccine.id_episode%TYPE DEFAULT NULL,
        id_episode_nin          IN BOOLEAN := TRUE,
        where_in                VARCHAR2 DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                IN OUT table_varchar
    );

    PROCEDURE upd
    (
        id_patient_in           IN pat_vaccine.id_patient%TYPE DEFAULT NULL,
        id_patient_nin          IN BOOLEAN := TRUE,
        id_institution_in       IN pat_vaccine.id_institution%TYPE DEFAULT NULL,
        id_institution_nin      IN BOOLEAN := TRUE,
        id_vaccine_in           IN pat_vaccine.id_vaccine%TYPE DEFAULT NULL,
        id_vaccine_nin          IN BOOLEAN := TRUE,
        id_professional_in      IN pat_vaccine.id_professional%TYPE DEFAULT NULL,
        id_professional_nin     IN BOOLEAN := TRUE,
        flg_take_type_in        IN pat_vaccine.flg_take_type%TYPE DEFAULT NULL,
        flg_take_type_nin       IN BOOLEAN := TRUE,
        lab_in                  IN pat_vaccine.lab%TYPE DEFAULT NULL,
        lab_nin                 IN BOOLEAN := TRUE,
        lote_in                 IN pat_vaccine.lote%TYPE DEFAULT NULL,
        lote_nin                IN BOOLEAN := TRUE,
        notes_in                IN pat_vaccine.notes%TYPE DEFAULT NULL,
        notes_nin               IN BOOLEAN := TRUE,
        tuberculin_type_in      IN pat_vaccine.tuberculin_type%TYPE DEFAULT NULL,
        tuberculin_type_nin     IN BOOLEAN := TRUE,
        dt_pat_vaccine_tstz_in  IN pat_vaccine.dt_pat_vaccine_tstz%TYPE DEFAULT NULL,
        dt_pat_vaccine_tstz_nin IN BOOLEAN := TRUE,
        dt_take_tstz_in         IN pat_vaccine.dt_take_tstz%TYPE DEFAULT NULL,
        dt_take_tstz_nin        IN BOOLEAN := TRUE,
        id_episode_in           IN pat_vaccine.id_episode%TYPE DEFAULT NULL,
        id_episode_nin          IN BOOLEAN := TRUE,
        where_in                VARCHAR2 DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE
    );

    PROCEDURE upd_ins
    (
        id_pat_vaccine_in      IN pat_vaccine.id_pat_vaccine%TYPE,
        id_patient_in          IN pat_vaccine.id_patient%TYPE DEFAULT NULL,
        id_institution_in      IN pat_vaccine.id_institution%TYPE DEFAULT NULL,
        id_vaccine_in          IN pat_vaccine.id_vaccine%TYPE DEFAULT NULL,
        id_professional_in     IN pat_vaccine.id_professional%TYPE DEFAULT NULL,
        flg_take_type_in       IN pat_vaccine.flg_take_type%TYPE DEFAULT NULL,
        lab_in                 IN pat_vaccine.lab%TYPE DEFAULT NULL,
        lote_in                IN pat_vaccine.lote%TYPE DEFAULT NULL,
        notes_in               IN pat_vaccine.notes%TYPE DEFAULT NULL,
        tuberculin_type_in     IN pat_vaccine.tuberculin_type%TYPE DEFAULT NULL,
        dt_pat_vaccine_tstz_in IN pat_vaccine.dt_pat_vaccine_tstz%TYPE DEFAULT NULL,
        dt_take_tstz_in        IN pat_vaccine.dt_take_tstz%TYPE DEFAULT NULL,
        id_episode_in          IN pat_vaccine.id_episode%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    );

    PROCEDURE upd_ins
    (
        id_pat_vaccine_in      IN pat_vaccine.id_pat_vaccine%TYPE,
        id_patient_in          IN pat_vaccine.id_patient%TYPE DEFAULT NULL,
        id_institution_in      IN pat_vaccine.id_institution%TYPE DEFAULT NULL,
        id_vaccine_in          IN pat_vaccine.id_vaccine%TYPE DEFAULT NULL,
        id_professional_in     IN pat_vaccine.id_professional%TYPE DEFAULT NULL,
        flg_take_type_in       IN pat_vaccine.flg_take_type%TYPE DEFAULT NULL,
        lab_in                 IN pat_vaccine.lab%TYPE DEFAULT NULL,
        lote_in                IN pat_vaccine.lote%TYPE DEFAULT NULL,
        notes_in               IN pat_vaccine.notes%TYPE DEFAULT NULL,
        tuberculin_type_in     IN pat_vaccine.tuberculin_type%TYPE DEFAULT NULL,
        dt_pat_vaccine_tstz_in IN pat_vaccine.dt_pat_vaccine_tstz%TYPE DEFAULT NULL,
        dt_take_tstz_in        IN pat_vaccine.dt_take_tstz%TYPE DEFAULT NULL,
        id_episode_in          IN pat_vaccine.id_episode%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    );

    PROCEDURE upd
    (
        rec_in          IN pat_vaccine%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    );

    PROCEDURE upd
    (
        rec_in          IN pat_vaccine%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    );

    PROCEDURE upd
    (
        col_in            IN pat_vaccine_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    );

    PROCEDURE upd
    (
        col_in            IN pat_vaccine_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    );

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    );

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    );

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_pat_vaccine_in IN pat_vaccine.id_pat_vaccine%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    );

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_pat_vaccine_in IN pat_vaccine.id_pat_vaccine%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    );

    -- Delete all rows for primary key column ID_PAT_VACCINE
    PROCEDURE del_id_pat_vaccine
    (
        id_pat_vaccine_in IN pat_vaccine.id_pat_vaccine%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    );

    -- Delete all rows for primary key column ID_PAT_VACCINE
    PROCEDURE del_id_pat_vaccine
    (
        id_pat_vaccine_in IN pat_vaccine.id_pat_vaccine%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    );

    -- Delete all rows for this PVE_EPIS_FK foreign key value
    PROCEDURE del_pve_epis_fk
    (
        id_episode_in   IN pat_vaccine.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows for this PVE_EPIS_FK foreign key value
    PROCEDURE del_pve_epis_fk
    (
        id_episode_in   IN pat_vaccine.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows for this PVE_INST_FK foreign key value
    PROCEDURE del_pve_inst_fk
    (
        id_institution_in IN pat_vaccine.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    );

    -- Delete all rows for this PVE_INST_FK foreign key value
    PROCEDURE del_pve_inst_fk
    (
        id_institution_in IN pat_vaccine.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    );

    -- Delete all rows for this PVE_PAT_FK foreign key value
    PROCEDURE del_pve_pat_fk
    (
        id_patient_in   IN pat_vaccine.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows for this PVE_PAT_FK foreign key value
    PROCEDURE del_pve_pat_fk
    (
        id_patient_in   IN pat_vaccine.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows for this PVE_PROF_FK foreign key value
    PROCEDURE del_pve_prof_fk
    (
        id_professional_in IN pat_vaccine.id_professional%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    );

    -- Delete all rows for this PVE_PROF_FK foreign key value
    PROCEDURE del_pve_prof_fk
    (
        id_professional_in IN pat_vaccine.id_professional%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    );

    -- Delete all rows for this PVE_VCC_FK foreign key value
    PROCEDURE del_pve_vcc_fk
    (
        id_vaccine_in   IN pat_vaccine.id_vaccine%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows for this PVE_VCC_FK foreign key value
    PROCEDURE del_pve_vcc_fk
    (
        id_vaccine_in   IN pat_vaccine.id_vaccine%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified VARCHAR2 column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified VARCHAR2 column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified DATE column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified DATE column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified TIMESTAMP column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified TIMESTAMP column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified NUMBER column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified NUMBER column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(pat_vaccine_inout IN OUT pat_vaccine%ROWTYPE);

    FUNCTION initrec RETURN pat_vaccine%ROWTYPE;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN pat_vaccine_tc;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN pat_vaccine_tc;

END ts_pat_vaccine;
/
