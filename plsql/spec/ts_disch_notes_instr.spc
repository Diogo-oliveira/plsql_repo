/*-- Last Change Revision: $Rev: 1877368 $*/
/*-- Last Change by: $Author: adriano.ferreira $*/
/*-- Date of last change: $Date: 2018-11-12 15:39:19 +0000 (seg, 12 nov 2018) $*/
CREATE OR REPLACE PACKAGE ts_disch_notes_instr
/*
| Generated by or retrieved - DO NOT MODIFY!
| Created On: 2017-06-26 15:10:57
| Created By: ALERT
*/
IS

-- Collection of %ROWTYPE records based on disch_notes_instr
TYPE disch_notes_instr_tc IS TABLE OF disch_notes_instr%ROWTYPE INDEX BY BINARY_INTEGER;
TYPE disch_notes_instr_ntt IS TABLE OF disch_notes_instr%ROWTYPE;
TYPE disch_notes_instr_vat IS VARRAY(100) OF disch_notes_instr%ROWTYPE;

-- Column Collection based on column ID_DISCHARGE_NOTES
TYPE ID_DISCHARGE_NOTES_CC IS TABLE OF disch_notes_instr.ID_DISCHARGE_NOTES%TYPE INDEX BY BINARY_INTEGER;
-- Column Collection based on column ID_DISCH_INSTRUCTIONS
TYPE ID_DISCH_INSTRUCTIONS_CC IS TABLE OF disch_notes_instr.ID_DISCH_INSTRUCTIONS%TYPE INDEX BY BINARY_INTEGER;
-- Column Collection based on column CREATE_USER
TYPE CREATE_USER_CC IS TABLE OF disch_notes_instr.CREATE_USER%TYPE INDEX BY BINARY_INTEGER;
-- Column Collection based on column CREATE_TIME
TYPE CREATE_TIME_CC IS TABLE OF disch_notes_instr.CREATE_TIME%TYPE INDEX BY BINARY_INTEGER;
-- Column Collection based on column CREATE_INSTITUTION
TYPE CREATE_INSTITUTION_CC IS TABLE OF disch_notes_instr.CREATE_INSTITUTION%TYPE INDEX BY BINARY_INTEGER;
-- Column Collection based on column UPDATE_USER
TYPE UPDATE_USER_CC IS TABLE OF disch_notes_instr.UPDATE_USER%TYPE INDEX BY BINARY_INTEGER;
-- Column Collection based on column UPDATE_TIME
TYPE UPDATE_TIME_CC IS TABLE OF disch_notes_instr.UPDATE_TIME%TYPE INDEX BY BINARY_INTEGER;
-- Column Collection based on column UPDATE_INSTITUTION
TYPE UPDATE_INSTITUTION_CC IS TABLE OF disch_notes_instr.UPDATE_INSTITUTION%TYPE INDEX BY BINARY_INTEGER;

-- Insert one row, providing primary key if present (with rows_out)
PROCEDURE ins
(
ID_DISCHARGE_NOTES_in IN disch_notes_instr.ID_DISCHARGE_NOTES%TYPE,
ID_DISCH_INSTRUCTIONS_in IN disch_notes_instr.ID_DISCH_INSTRUCTIONS%TYPE,
CREATE_USER_in IN DISCH_NOTES_INSTR.CREATE_USER%TYPE DEFAULT NULL,
CREATE_TIME_in IN DISCH_NOTES_INSTR.CREATE_TIME%TYPE DEFAULT NULL,
CREATE_INSTITUTION_in IN DISCH_NOTES_INSTR.CREATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_USER_in IN DISCH_NOTES_INSTR.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_TIME_in IN DISCH_NOTES_INSTR.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_in IN DISCH_NOTES_INSTR.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
handle_error_in IN BOOLEAN := TRUE,
rows_out OUT table_varchar
);

-- Insert one row, providing primary key if present (without rows_out)
PROCEDURE ins
(
ID_DISCHARGE_NOTES_in IN disch_notes_instr.ID_DISCHARGE_NOTES%TYPE,
ID_DISCH_INSTRUCTIONS_in IN disch_notes_instr.ID_DISCH_INSTRUCTIONS%TYPE,
CREATE_USER_in IN DISCH_NOTES_INSTR.CREATE_USER%TYPE DEFAULT NULL,
CREATE_TIME_in IN DISCH_NOTES_INSTR.CREATE_TIME%TYPE DEFAULT NULL,
CREATE_INSTITUTION_in IN DISCH_NOTES_INSTR.CREATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_USER_in IN DISCH_NOTES_INSTR.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_TIME_in IN DISCH_NOTES_INSTR.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_in IN DISCH_NOTES_INSTR.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
handle_error_in IN BOOLEAN := TRUE
);

-- Insert a row based on a record
-- Specify whether or not a primary key value should be generated
PROCEDURE ins
(
rec_in          IN disch_notes_instr%ROWTYPE,
gen_pky_in      IN BOOLEAN DEFAULT FALSE,
sequence_in     IN VARCHAR2 := NULL,
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
);

-- Insert a row based on a record
-- Specify whether or not a primary key value should be generated
PROCEDURE ins
(
rec_in          IN disch_notes_instr%ROWTYPE,
gen_pky_in      IN BOOLEAN DEFAULT FALSE,
sequence_in     IN VARCHAR2 := NULL,
handle_error_in IN BOOLEAN := TRUE
);

-- Insert a collection of rows using FORALL; all primary key values
-- must have already been generated, or are handled in triggers
PROCEDURE ins
(
rows_in         IN disch_notes_instr_tc,
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
);

-- Insert a collection of rows using FORALL; all primary key values
-- must have already been generated, or are handled in triggers
PROCEDURE ins
(
rows_in         IN disch_notes_instr_tc,
handle_error_in IN BOOLEAN := TRUE
);

-- Update any/all columns by primary key. If you pass NULL, then
-- the current column value is set to itself. If you need a more
-- selected UPDATE then use one of the onecol procedures below.
PROCEDURE upd
(
ID_DISCHARGE_NOTES_in IN disch_notes_instr.ID_DISCHARGE_NOTES%TYPE,
ID_DISCH_INSTRUCTIONS_in IN disch_notes_instr.ID_DISCH_INSTRUCTIONS%TYPE,
CREATE_USER_in IN DISCH_NOTES_INSTR.CREATE_USER%TYPE DEFAULT NULL,
CREATE_USER_nin IN BOOLEAN := TRUE,
CREATE_TIME_in IN DISCH_NOTES_INSTR.CREATE_TIME%TYPE DEFAULT NULL,
CREATE_TIME_nin IN BOOLEAN := TRUE,
CREATE_INSTITUTION_in IN DISCH_NOTES_INSTR.CREATE_INSTITUTION%TYPE DEFAULT NULL,
CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
UPDATE_USER_in IN DISCH_NOTES_INSTR.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_USER_nin IN BOOLEAN := TRUE,
UPDATE_TIME_in IN DISCH_NOTES_INSTR.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_TIME_nin IN BOOLEAN := TRUE,
UPDATE_INSTITUTION_in IN DISCH_NOTES_INSTR.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
handle_error_in        IN BOOLEAN := TRUE,
rows_out               IN OUT table_varchar
);

-- Update any/all columns by primary key. If you pass NULL, then
-- the current column value is set to itself. If you need a more
-- selected UPDATE then use one of the onecol procedures below.
PROCEDURE upd
(
ID_DISCHARGE_NOTES_in IN disch_notes_instr.ID_DISCHARGE_NOTES%TYPE,
ID_DISCH_INSTRUCTIONS_in IN disch_notes_instr.ID_DISCH_INSTRUCTIONS%TYPE,
CREATE_USER_in IN DISCH_NOTES_INSTR.CREATE_USER%TYPE DEFAULT NULL,
CREATE_USER_nin IN BOOLEAN := TRUE,
CREATE_TIME_in IN DISCH_NOTES_INSTR.CREATE_TIME%TYPE DEFAULT NULL,
CREATE_TIME_nin IN BOOLEAN := TRUE,
CREATE_INSTITUTION_in IN DISCH_NOTES_INSTR.CREATE_INSTITUTION%TYPE DEFAULT NULL,
CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
UPDATE_USER_in IN DISCH_NOTES_INSTR.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_USER_nin IN BOOLEAN := TRUE,
UPDATE_TIME_in IN DISCH_NOTES_INSTR.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_TIME_nin IN BOOLEAN := TRUE,
UPDATE_INSTITUTION_in IN DISCH_NOTES_INSTR.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
handle_error_in        IN BOOLEAN := TRUE
);

--Update any/all columns by dynamic WHERE
-- If you pass NULL, then the current column value is set to itself
PROCEDURE upd
(
CREATE_USER_in IN DISCH_NOTES_INSTR.CREATE_USER%TYPE DEFAULT NULL,
CREATE_USER_nin IN BOOLEAN := TRUE,
CREATE_TIME_in IN DISCH_NOTES_INSTR.CREATE_TIME%TYPE DEFAULT NULL,
CREATE_TIME_nin IN BOOLEAN := TRUE,
CREATE_INSTITUTION_in IN DISCH_NOTES_INSTR.CREATE_INSTITUTION%TYPE DEFAULT NULL,
CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
UPDATE_USER_in IN DISCH_NOTES_INSTR.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_USER_nin IN BOOLEAN := TRUE,
UPDATE_TIME_in IN DISCH_NOTES_INSTR.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_TIME_nin IN BOOLEAN := TRUE,
UPDATE_INSTITUTION_in IN DISCH_NOTES_INSTR.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
where_in               IN VARCHAR2,
handle_error_in        IN BOOLEAN := TRUE,
rows_out               IN OUT table_varchar
);

--Update any/all columns by dynamic WHERE
-- If you pass NULL, then the current column value is set to itself
PROCEDURE upd
(
CREATE_USER_in IN DISCH_NOTES_INSTR.CREATE_USER%TYPE DEFAULT NULL,
CREATE_USER_nin IN BOOLEAN := TRUE,
CREATE_TIME_in IN DISCH_NOTES_INSTR.CREATE_TIME%TYPE DEFAULT NULL,
CREATE_TIME_nin IN BOOLEAN := TRUE,
CREATE_INSTITUTION_in IN DISCH_NOTES_INSTR.CREATE_INSTITUTION%TYPE DEFAULT NULL,
CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
UPDATE_USER_in IN DISCH_NOTES_INSTR.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_USER_nin IN BOOLEAN := TRUE,
UPDATE_TIME_in IN DISCH_NOTES_INSTR.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_TIME_nin IN BOOLEAN := TRUE,
UPDATE_INSTITUTION_in IN DISCH_NOTES_INSTR.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
where_in               IN VARCHAR2,
handle_error_in        IN BOOLEAN := TRUE
);

--Update/insert with columns (with rows_out)
PROCEDURE upd_ins
(
ID_DISCHARGE_NOTES_in IN disch_notes_instr.ID_DISCHARGE_NOTES%TYPE,
ID_DISCH_INSTRUCTIONS_in IN disch_notes_instr.ID_DISCH_INSTRUCTIONS%TYPE,
CREATE_USER_in IN DISCH_NOTES_INSTR.CREATE_USER%TYPE DEFAULT NULL,
CREATE_TIME_in IN DISCH_NOTES_INSTR.CREATE_TIME%TYPE DEFAULT NULL,
CREATE_INSTITUTION_in IN DISCH_NOTES_INSTR.CREATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_USER_in IN DISCH_NOTES_INSTR.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_TIME_in IN DISCH_NOTES_INSTR.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_in IN DISCH_NOTES_INSTR.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
handle_error_in        IN BOOLEAN := TRUE,
rows_out               IN OUT table_varchar
);

--Update/insert with columns (without rows_out)
PROCEDURE upd_ins
(
ID_DISCHARGE_NOTES_in IN disch_notes_instr.ID_DISCHARGE_NOTES%TYPE,
ID_DISCH_INSTRUCTIONS_in IN disch_notes_instr.ID_DISCH_INSTRUCTIONS%TYPE,
CREATE_USER_in IN DISCH_NOTES_INSTR.CREATE_USER%TYPE DEFAULT NULL,
CREATE_TIME_in IN DISCH_NOTES_INSTR.CREATE_TIME%TYPE DEFAULT NULL,
CREATE_INSTITUTION_in IN DISCH_NOTES_INSTR.CREATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_USER_in IN DISCH_NOTES_INSTR.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_TIME_in IN DISCH_NOTES_INSTR.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_in IN DISCH_NOTES_INSTR.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
handle_error_in        IN BOOLEAN := TRUE
);

--Update record (with rows_out)
PROCEDURE upd
(
rec_in          IN disch_notes_instr%ROWTYPE,
handle_error_in IN BOOLEAN := TRUE,
rows_out        IN OUT table_varchar
);

--Update record (without rows_out)
PROCEDURE upd
(
rec_in          IN disch_notes_instr%ROWTYPE,
handle_error_in IN BOOLEAN := TRUE
);

--Update collection (with rows_out)
PROCEDURE upd
(
col_in            IN disch_notes_instr_tc,
ignore_if_null_in IN BOOLEAN := TRUE,
handle_error_in   IN BOOLEAN := TRUE,
rows_out          IN OUT table_varchar
);

--Update collection (without rows_out)
PROCEDURE upd
(
col_in            IN disch_notes_instr_tc,
ignore_if_null_in IN BOOLEAN := TRUE,
handle_error_in   IN BOOLEAN := TRUE
);

-- Use Native Dynamic SQL increment a single NUMBER column
-- for all rows specified by the dynamic WHERE clause
PROCEDURE increment_onecol
(
colname_in         IN all_tab_columns.column_name%TYPE,
where_in           IN VARCHAR2,
increment_value_in IN NUMBER DEFAULT 1,
handle_error_in    IN BOOLEAN := TRUE,
rows_out           OUT table_varchar
);

--increment column value
PROCEDURE increment_onecol
(
colname_in         IN all_tab_columns.column_name%TYPE,
where_in           IN VARCHAR2,
increment_value_in IN NUMBER DEFAULT 1,
handle_error_in    IN BOOLEAN := TRUE
);

-- Delete one row by primary key
PROCEDURE del
(
ID_DISCHARGE_NOTES_in IN disch_notes_instr.ID_DISCHARGE_NOTES%TYPE,
ID_DISCH_INSTRUCTIONS_in IN disch_notes_instr.ID_DISCH_INSTRUCTIONS%TYPE,
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
);

-- Delete one row by primary key
PROCEDURE del
(
ID_DISCHARGE_NOTES_in IN disch_notes_instr.ID_DISCHARGE_NOTES%TYPE,
ID_DISCH_INSTRUCTIONS_in IN disch_notes_instr.ID_DISCH_INSTRUCTIONS%TYPE,
handle_error_in IN BOOLEAN := TRUE
);

-- Delete all rows specified by dynamic WHERE clause
PROCEDURE del_by
(
where_clause_in IN VARCHAR2,
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
);

-- Delete all rows specified by dynamic WHERE clause
PROCEDURE del_by
(
where_clause_in IN VARCHAR2,
handle_error_in IN BOOLEAN := TRUE
);

-- Delete all rows for this DNI_DI_FK foreign key value
PROCEDURE del_DNI_DI_FK
(
ID_DISCH_INSTRUCTIONS_in IN DISCH_NOTES_INSTR.ID_DISCH_INSTRUCTIONS%TYPE,
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
);

-- Delete all rows for this DNI_DN_FK foreign key value
PROCEDURE del_DNI_DN_FK
(
ID_DISCHARGE_NOTES_in IN DISCH_NOTES_INSTR.ID_DISCHARGE_NOTES%TYPE,
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
);

-- Delete all rows for this DNI_DI_FK foreign key value
PROCEDURE del_DNI_DI_FK
(
ID_DISCH_INSTRUCTIONS_in IN DISCH_NOTES_INSTR.ID_DISCH_INSTRUCTIONS%TYPE,
handle_error_in IN BOOLEAN := TRUE
);

-- Delete all rows for this DNI_DN_FK foreign key value
PROCEDURE del_DNI_DN_FK
(
ID_DISCHARGE_NOTES_in IN DISCH_NOTES_INSTR.ID_DISCHARGE_NOTES%TYPE,
handle_error_in IN BOOLEAN := TRUE
);

-- Initialize a record with default values for columns in the table (prc)
PROCEDURE initrec(disch_notes_instr_inout IN OUT disch_notes_instr%ROWTYPE);

-- Initialize a record with default values for columns in the table (fnc)
FUNCTION initrec RETURN disch_notes_instr%ROWTYPE;

-- Get data rowid
FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN disch_notes_instr_tc;

-- Get data rowid pragma autonomous transaccion
FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN disch_notes_instr_tc;

end ts_disch_notes_instr;
