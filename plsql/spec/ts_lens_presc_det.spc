/*-- Last Change Revision: $Rev: 2029236 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:50:33 +0100 (ter, 02 ago 2022) $*/

CREATE OR REPLACE PACKAGE ts_lens_presc_det
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {1BD37A66-EA60-4927-9A64-F6DD89237236}
| Created On: January 22, 2009 20:1:40
| Created By: ALERT
*/
 IS

    -- Collection of %ROWTYPE records based on "LENS_PRESC_DET"
    TYPE lens_presc_det_tc IS TABLE OF lens_presc_det%ROWTYPE INDEX BY BINARY_INTEGER;
    TYPE lens_presc_det_ntt IS TABLE OF lens_presc_det%ROWTYPE;
    TYPE lens_presc_det_vat IS VARRAY(100) OF lens_presc_det%ROWTYPE;

    -- Same type structure, with a static name.
    TYPE aat IS TABLE OF lens_presc_det%ROWTYPE INDEX BY BINARY_INTEGER;
    TYPE ntt IS TABLE OF lens_presc_det%ROWTYPE;
    TYPE vat IS VARRAY(100) OF lens_presc_det%ROWTYPE;

    -- Column Collection based on column "ID_LENS_PRESC"
    TYPE id_lens_presc_cc IS TABLE OF lens_presc_det.id_lens_presc%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_LENS_PRESC_HIST"
    TYPE id_lens_presc_hist_cc IS TABLE OF lens_presc_det.id_lens_presc_hist%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_ADVANCED_INPUT"
    TYPE id_advanced_input_cc IS TABLE OF lens_presc_det.id_advanced_input%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_ADV_INP_FIELD_DET"
    TYPE id_adv_inp_field_det_cc IS TABLE OF lens_presc_det.id_adv_inp_field_det%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "VALUE"
    TYPE value_cc IS TABLE OF lens_presc_det.VALUE%TYPE INDEX BY BINARY_INTEGER;

    -- Insert one row, providing primary key if present
    PROCEDURE ins
    (
        id_lens_presc_in        IN lens_presc_det.id_lens_presc%TYPE,
        id_advanced_input_in    IN lens_presc_det.id_advanced_input%TYPE,
        id_adv_inp_field_det_in IN lens_presc_det.id_adv_inp_field_det%TYPE,
        id_lens_presc_hist_in   IN lens_presc_det.id_lens_presc_hist%TYPE,
        value_in                IN lens_presc_det.VALUE%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        id_lens_presc_in        IN lens_presc_det.id_lens_presc%TYPE,
        id_advanced_input_in    IN lens_presc_det.id_advanced_input%TYPE,
        id_adv_inp_field_det_in IN lens_presc_det.id_adv_inp_field_det%TYPE,
        id_lens_presc_hist_in   IN lens_presc_det.id_lens_presc_hist%TYPE,
        value_in                IN lens_presc_det.VALUE%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Insert a row based on a record.
    PROCEDURE ins
    (
        rec_in          IN lens_presc_det%ROWTYPE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        rec_in          IN lens_presc_det%ROWTYPE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers.
    PROCEDURE ins
    (
        rows_in         IN lens_presc_det_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        rows_in         IN lens_presc_det_tc,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.

    PROCEDURE upd
    (
        id_lens_presc_in        IN lens_presc_det.id_lens_presc%TYPE,
        id_advanced_input_in    IN lens_presc_det.id_advanced_input%TYPE,
        id_adv_inp_field_det_in IN lens_presc_det.id_adv_inp_field_det%TYPE,
        id_lens_presc_hist_in   IN lens_presc_det.id_lens_presc_hist%TYPE,
        value_in                IN lens_presc_det.VALUE%TYPE DEFAULT NULL,
        value_nin               IN BOOLEAN := TRUE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                IN OUT table_varchar
    );

    PROCEDURE upd
    (
        id_lens_presc_in        IN lens_presc_det.id_lens_presc%TYPE,
        id_advanced_input_in    IN lens_presc_det.id_advanced_input%TYPE,
        id_adv_inp_field_det_in IN lens_presc_det.id_adv_inp_field_det%TYPE,
        id_lens_presc_hist_in   IN lens_presc_det.id_lens_presc_hist%TYPE,
        value_in                IN lens_presc_det.VALUE%TYPE DEFAULT NULL,
        value_nin               IN BOOLEAN := TRUE,
        handle_error_in         IN BOOLEAN := TRUE
    );

    PROCEDURE upd
    (
        value_in        IN lens_presc_det.VALUE%TYPE DEFAULT NULL,
        value_nin       IN BOOLEAN := TRUE,
        where_in        VARCHAR2 DEFAULT NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    );

    PROCEDURE upd
    (
        value_in        IN lens_presc_det.VALUE%TYPE DEFAULT NULL,
        value_nin       IN BOOLEAN := TRUE,
        where_in        VARCHAR2 DEFAULT NULL,
        handle_error_in IN BOOLEAN := TRUE
    );

    PROCEDURE upd_ins
    (
        id_lens_presc_in        IN lens_presc_det.id_lens_presc%TYPE,
        id_advanced_input_in    IN lens_presc_det.id_advanced_input%TYPE,
        id_adv_inp_field_det_in IN lens_presc_det.id_adv_inp_field_det%TYPE,
        id_lens_presc_hist_in   IN lens_presc_det.id_lens_presc_hist%TYPE,
        value_in                IN lens_presc_det.VALUE%TYPE DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    );

    PROCEDURE upd_ins
    (
        id_lens_presc_in        IN lens_presc_det.id_lens_presc%TYPE,
        id_advanced_input_in    IN lens_presc_det.id_advanced_input%TYPE,
        id_adv_inp_field_det_in IN lens_presc_det.id_adv_inp_field_det%TYPE,
        id_lens_presc_hist_in   IN lens_presc_det.id_lens_presc_hist%TYPE,
        value_in                IN lens_presc_det.VALUE%TYPE DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE
    );

    PROCEDURE upd
    (
        rec_in          IN lens_presc_det%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    );

    PROCEDURE upd
    (
        rec_in          IN lens_presc_det%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    );

    PROCEDURE upd
    (
        col_in            IN lens_presc_det_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    );

    PROCEDURE upd
    (
        col_in            IN lens_presc_det_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    );

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    );

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    );

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_lens_presc_in        IN lens_presc_det.id_lens_presc%TYPE,
        id_advanced_input_in    IN lens_presc_det.id_advanced_input%TYPE,
        id_adv_inp_field_det_in IN lens_presc_det.id_adv_inp_field_det%TYPE,
        id_lens_presc_hist_in   IN lens_presc_det.id_lens_presc_hist%TYPE,
        handle_error_in         IN BOOLEAN := TRUE
    );

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_lens_presc_in        IN lens_presc_det.id_lens_presc%TYPE,
        id_advanced_input_in    IN lens_presc_det.id_advanced_input%TYPE,
        id_adv_inp_field_det_in IN lens_presc_det.id_adv_inp_field_det%TYPE,
        id_lens_presc_hist_in   IN lens_presc_det.id_lens_presc_hist%TYPE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    );

    -- Delete all rows for primary key column ID_LENS_PRESC
    PROCEDURE del_id_lens_presc
    (
        id_lens_presc_in IN lens_presc_det.id_lens_presc%TYPE,
        handle_error_in  IN BOOLEAN := TRUE
    );

    -- Delete all rows for primary key column ID_LENS_PRESC
    PROCEDURE del_id_lens_presc
    (
        id_lens_presc_in IN lens_presc_det.id_lens_presc%TYPE,
        handle_error_in  IN BOOLEAN := TRUE,
        rows_out         OUT table_varchar
    );

    -- Delete all rows for primary key column ID_ADVANCED_INPUT
    PROCEDURE del_id_advanced_input
    (
        id_advanced_input_in IN lens_presc_det.id_advanced_input%TYPE,
        handle_error_in      IN BOOLEAN := TRUE
    );

    -- Delete all rows for primary key column ID_ADVANCED_INPUT
    PROCEDURE del_id_advanced_input
    (
        id_advanced_input_in IN lens_presc_det.id_advanced_input%TYPE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    );

    -- Delete all rows for primary key column ID_ADV_INP_FIELD_DET
    PROCEDURE del_id_adv_inp_field_det
    (
        id_adv_inp_field_det_in IN lens_presc_det.id_adv_inp_field_det%TYPE,
        handle_error_in         IN BOOLEAN := TRUE
    );

    -- Delete all rows for primary key column ID_ADV_INP_FIELD_DET
    PROCEDURE del_id_adv_inp_field_det
    (
        id_adv_inp_field_det_in IN lens_presc_det.id_adv_inp_field_det%TYPE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    );

    -- Delete all rows for primary key column ID_LENS_PRESC_HIST
    PROCEDURE del_id_lens_presc_hist
    (
        id_lens_presc_hist_in IN lens_presc_det.id_lens_presc_hist%TYPE,
        handle_error_in       IN BOOLEAN := TRUE
    );

    -- Delete all rows for primary key column ID_LENS_PRESC_HIST
    PROCEDURE del_id_lens_presc_hist
    (
        id_lens_presc_hist_in IN lens_presc_det.id_lens_presc_hist%TYPE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    );

    -- Delete all rows for this LPT_AIT_FK foreign key value
    PROCEDURE del_lpt_ait_fk
    (
        id_adv_inp_field_det_in IN lens_presc_det.id_adv_inp_field_det%TYPE,
        handle_error_in         IN BOOLEAN := TRUE
    );

    -- Delete all rows for this LPT_AIT_FK foreign key value
    PROCEDURE del_lpt_ait_fk
    (
        id_adv_inp_field_det_in IN lens_presc_det.id_adv_inp_field_det%TYPE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    );

    -- Delete all rows for this LPT_AIT_FK2 foreign key value
    PROCEDURE del_lpt_ait_fk2
    (
        id_advanced_input_in IN lens_presc_det.id_advanced_input%TYPE,
        handle_error_in      IN BOOLEAN := TRUE
    );

    -- Delete all rows for this LPT_AIT_FK2 foreign key value
    PROCEDURE del_lpt_ait_fk2
    (
        id_advanced_input_in IN lens_presc_det.id_advanced_input%TYPE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    );

    -- Delete all rows for this LPT_LPC_FK foreign key value
    PROCEDURE del_lpt_lpc_fk
    (
        id_lens_presc_in IN lens_presc_det.id_lens_presc%TYPE,
        handle_error_in  IN BOOLEAN := TRUE
    );

    -- Delete all rows for this LPT_LPC_FK foreign key value
    PROCEDURE del_lpt_lpc_fk
    (
        id_lens_presc_in IN lens_presc_det.id_lens_presc%TYPE,
        handle_error_in  IN BOOLEAN := TRUE,
        rows_out         OUT table_varchar
    );

    -- Delete all rows for this LPT_LPH_FK foreign key value
    PROCEDURE del_lpt_lph_fk
    (
        id_lens_presc_hist_in IN lens_presc_det.id_lens_presc_hist%TYPE,
        handle_error_in       IN BOOLEAN := TRUE
    );

    -- Delete all rows for this LPT_LPH_FK foreign key value
    PROCEDURE del_lpt_lph_fk
    (
        id_lens_presc_hist_in IN lens_presc_det.id_lens_presc_hist%TYPE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    );

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified VARCHAR2 column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified VARCHAR2 column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified DATE column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified DATE column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified TIMESTAMP column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified TIMESTAMP column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified NUMBER column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified NUMBER column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(lens_presc_det_inout IN OUT lens_presc_det%ROWTYPE);

    FUNCTION initrec RETURN lens_presc_det%ROWTYPE;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN lens_presc_det_tc;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN lens_presc_det_tc;

END ts_lens_presc_det;
/
