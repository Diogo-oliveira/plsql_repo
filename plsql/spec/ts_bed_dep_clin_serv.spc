/*-- Last Change Revision: $Rev: 2029083 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:49:41 +0100 (ter, 02 ago 2022) $*/


CREATE OR REPLACE PACKAGE ts_bed_dep_clin_serv
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {1BD37A66-EA60-4927-9A64-F6DD89237236}
| Created On: Julho 29, 2009 14:35:41
| Created By: ALERT
*/
 IS

    -- Collection of %ROWTYPE records based on "BED_DEP_CLIN_SERV"
    TYPE bed_dep_clin_serv_tc IS TABLE OF bed_dep_clin_serv%ROWTYPE INDEX BY BINARY_INTEGER;
    TYPE bed_dep_clin_serv_ntt IS TABLE OF bed_dep_clin_serv%ROWTYPE;
    TYPE bed_dep_clin_serv_vat IS VARRAY(100) OF bed_dep_clin_serv%ROWTYPE;

    -- Same type structure, with a static name.
    TYPE aat IS TABLE OF bed_dep_clin_serv%ROWTYPE INDEX BY BINARY_INTEGER;
    TYPE ntt IS TABLE OF bed_dep_clin_serv%ROWTYPE;
    TYPE vat IS VARRAY(100) OF bed_dep_clin_serv%ROWTYPE;

    -- Column Collection based on column "ID_BED"
    TYPE id_bed_cc IS TABLE OF bed_dep_clin_serv.id_bed%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_DEP_CLIN_SERV"
    TYPE id_dep_clin_serv_cc IS TABLE OF bed_dep_clin_serv.id_dep_clin_serv%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "FLG_AVAILABLE"
    TYPE flg_available_cc IS TABLE OF bed_dep_clin_serv.flg_available%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "CREATE_USER"
    TYPE create_user_cc IS TABLE OF bed_dep_clin_serv.create_user%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "CREATE_TIME"
    TYPE create_time_cc IS TABLE OF bed_dep_clin_serv.create_time%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "CREATE_INSTITUTION"
    TYPE create_institution_cc IS TABLE OF bed_dep_clin_serv.create_institution%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "UPDATE_USER"
    TYPE update_user_cc IS TABLE OF bed_dep_clin_serv.update_user%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "UPDATE_TIME"
    TYPE update_time_cc IS TABLE OF bed_dep_clin_serv.update_time%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "UPDATE_INSTITUTION"
    TYPE update_institution_cc IS TABLE OF bed_dep_clin_serv.update_institution%TYPE INDEX BY BINARY_INTEGER;

    -- Insert one row, providing primary key if present
    PROCEDURE ins
    (
        id_bed_in             IN bed_dep_clin_serv.id_bed%TYPE,
        id_dep_clin_serv_in   IN bed_dep_clin_serv.id_dep_clin_serv%TYPE,
        flg_available_in      IN bed_dep_clin_serv.flg_available%TYPE DEFAULT 'Y',
        create_user_in        IN bed_dep_clin_serv.create_user%TYPE DEFAULT NULL,
        create_time_in        IN bed_dep_clin_serv.create_time%TYPE DEFAULT NULL,
        create_institution_in IN bed_dep_clin_serv.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN bed_dep_clin_serv.update_user%TYPE DEFAULT NULL,
        update_time_in        IN bed_dep_clin_serv.update_time%TYPE DEFAULT NULL,
        update_institution_in IN bed_dep_clin_serv.update_institution%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        id_bed_in             IN bed_dep_clin_serv.id_bed%TYPE,
        id_dep_clin_serv_in   IN bed_dep_clin_serv.id_dep_clin_serv%TYPE,
        flg_available_in      IN bed_dep_clin_serv.flg_available%TYPE DEFAULT 'Y',
        create_user_in        IN bed_dep_clin_serv.create_user%TYPE DEFAULT NULL,
        create_time_in        IN bed_dep_clin_serv.create_time%TYPE DEFAULT NULL,
        create_institution_in IN bed_dep_clin_serv.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN bed_dep_clin_serv.update_user%TYPE DEFAULT NULL,
        update_time_in        IN bed_dep_clin_serv.update_time%TYPE DEFAULT NULL,
        update_institution_in IN bed_dep_clin_serv.update_institution%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Insert a row based on a record.
    PROCEDURE ins
    (
        rec_in          IN bed_dep_clin_serv%ROWTYPE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        rec_in          IN bed_dep_clin_serv%ROWTYPE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers.
    PROCEDURE ins
    (
        rows_in         IN bed_dep_clin_serv_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        rows_in         IN bed_dep_clin_serv_tc,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.

    PROCEDURE upd
    (
        id_bed_in              IN bed_dep_clin_serv.id_bed%TYPE,
        id_dep_clin_serv_in    IN bed_dep_clin_serv.id_dep_clin_serv%TYPE,
        flg_available_in       IN bed_dep_clin_serv.flg_available%TYPE DEFAULT NULL,
        flg_available_nin      IN BOOLEAN := TRUE,
        create_user_in         IN bed_dep_clin_serv.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN bed_dep_clin_serv.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN bed_dep_clin_serv.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN bed_dep_clin_serv.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN bed_dep_clin_serv.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN bed_dep_clin_serv.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               IN OUT table_varchar
    );

    PROCEDURE upd
    (
        id_bed_in              IN bed_dep_clin_serv.id_bed%TYPE,
        id_dep_clin_serv_in    IN bed_dep_clin_serv.id_dep_clin_serv%TYPE,
        flg_available_in       IN bed_dep_clin_serv.flg_available%TYPE DEFAULT NULL,
        flg_available_nin      IN BOOLEAN := TRUE,
        create_user_in         IN bed_dep_clin_serv.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN bed_dep_clin_serv.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN bed_dep_clin_serv.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN bed_dep_clin_serv.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN bed_dep_clin_serv.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN bed_dep_clin_serv.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        handle_error_in        IN BOOLEAN := TRUE
    );

    PROCEDURE upd
    (
        flg_available_in       IN bed_dep_clin_serv.flg_available%TYPE DEFAULT NULL,
        flg_available_nin      IN BOOLEAN := TRUE,
        create_user_in         IN bed_dep_clin_serv.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN bed_dep_clin_serv.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN bed_dep_clin_serv.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN bed_dep_clin_serv.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN bed_dep_clin_serv.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN bed_dep_clin_serv.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        where_in               VARCHAR2 DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               IN OUT table_varchar
    );

    PROCEDURE upd
    (
        flg_available_in       IN bed_dep_clin_serv.flg_available%TYPE DEFAULT NULL,
        flg_available_nin      IN BOOLEAN := TRUE,
        create_user_in         IN bed_dep_clin_serv.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN bed_dep_clin_serv.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN bed_dep_clin_serv.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN bed_dep_clin_serv.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN bed_dep_clin_serv.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN bed_dep_clin_serv.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        where_in               VARCHAR2 DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    );

    PROCEDURE upd_ins
    (
        id_bed_in             IN bed_dep_clin_serv.id_bed%TYPE,
        id_dep_clin_serv_in   IN bed_dep_clin_serv.id_dep_clin_serv%TYPE,
        flg_available_in      IN bed_dep_clin_serv.flg_available%TYPE DEFAULT NULL,
        create_user_in        IN bed_dep_clin_serv.create_user%TYPE DEFAULT NULL,
        create_time_in        IN bed_dep_clin_serv.create_time%TYPE DEFAULT NULL,
        create_institution_in IN bed_dep_clin_serv.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN bed_dep_clin_serv.update_user%TYPE DEFAULT NULL,
        update_time_in        IN bed_dep_clin_serv.update_time%TYPE DEFAULT NULL,
        update_institution_in IN bed_dep_clin_serv.update_institution%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    );

    PROCEDURE upd_ins
    (
        id_bed_in             IN bed_dep_clin_serv.id_bed%TYPE,
        id_dep_clin_serv_in   IN bed_dep_clin_serv.id_dep_clin_serv%TYPE,
        flg_available_in      IN bed_dep_clin_serv.flg_available%TYPE DEFAULT NULL,
        create_user_in        IN bed_dep_clin_serv.create_user%TYPE DEFAULT NULL,
        create_time_in        IN bed_dep_clin_serv.create_time%TYPE DEFAULT NULL,
        create_institution_in IN bed_dep_clin_serv.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN bed_dep_clin_serv.update_user%TYPE DEFAULT NULL,
        update_time_in        IN bed_dep_clin_serv.update_time%TYPE DEFAULT NULL,
        update_institution_in IN bed_dep_clin_serv.update_institution%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE
    );

    PROCEDURE upd
    (
        rec_in          IN bed_dep_clin_serv%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    );

    PROCEDURE upd
    (
        rec_in          IN bed_dep_clin_serv%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    );

    PROCEDURE upd
    (
        col_in            IN bed_dep_clin_serv_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    );

    PROCEDURE upd
    (
        col_in            IN bed_dep_clin_serv_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    );

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    );

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    );

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_bed_in           IN bed_dep_clin_serv.id_bed%TYPE,
        id_dep_clin_serv_in IN bed_dep_clin_serv.id_dep_clin_serv%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    );

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_bed_in           IN bed_dep_clin_serv.id_bed%TYPE,
        id_dep_clin_serv_in IN bed_dep_clin_serv.id_dep_clin_serv%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    );

    -- Delete all rows for primary key column ID_BED
    PROCEDURE del_id_bed
    (
        id_bed_in       IN bed_dep_clin_serv.id_bed%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows for primary key column ID_BED
    PROCEDURE del_id_bed
    (
        id_bed_in       IN bed_dep_clin_serv.id_bed%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows for primary key column ID_DEP_CLIN_SERV
    PROCEDURE del_id_dep_clin_serv
    (
        id_dep_clin_serv_in IN bed_dep_clin_serv.id_dep_clin_serv%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    );

    -- Delete all rows for primary key column ID_DEP_CLIN_SERV
    PROCEDURE del_id_dep_clin_serv
    (
        id_dep_clin_serv_in IN bed_dep_clin_serv.id_dep_clin_serv%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    );

    -- Delete all rows for this BDCS_IB_FK foreign key value
    PROCEDURE del_bdcs_ib_fk
    (
        id_bed_in       IN bed_dep_clin_serv.id_bed%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows for this BDCS_IB_FK foreign key value
    PROCEDURE del_bdcs_ib_fk
    (
        id_bed_in       IN bed_dep_clin_serv.id_bed%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows for this BDCS_ID_FK foreign key value
    PROCEDURE del_bdcs_id_fk
    (
        id_dep_clin_serv_in IN bed_dep_clin_serv.id_dep_clin_serv%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    );

    -- Delete all rows for this BDCS_ID_FK foreign key value
    PROCEDURE del_bdcs_id_fk
    (
        id_dep_clin_serv_in IN bed_dep_clin_serv.id_dep_clin_serv%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    );

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified VARCHAR2 column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified VARCHAR2 column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified DATE column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified DATE column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified TIMESTAMP column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified TIMESTAMP column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified NUMBER column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified NUMBER column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(bed_dep_clin_serv_inout IN OUT bed_dep_clin_serv%ROWTYPE);

    FUNCTION initrec RETURN bed_dep_clin_serv%ROWTYPE;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN bed_dep_clin_serv_tc;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN bed_dep_clin_serv_tc;

END ts_bed_dep_clin_serv;
/
