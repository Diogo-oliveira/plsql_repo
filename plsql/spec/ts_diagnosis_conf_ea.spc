/*-- Last Change Revision: $Rev: 2029109 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:49:49 +0100 (ter, 02 ago 2022) $*/
CREATE OR REPLACE PACKAGE ts_diagnosis_conf_ea
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {1BD37A66-EA60-4927-9A64-F6DD89237236}
| Created On: Novembro 12, 2013 9:34:0
| Created By: ALERT
*/
 IS

    -- Collection of %ROWTYPE records based on "DIAGNOSIS_CONF_EA"
    TYPE diagnosis_conf_ea_tc IS TABLE OF diagnosis_conf_ea%ROWTYPE INDEX BY BINARY_INTEGER;
    TYPE diagnosis_conf_ea_ntt IS TABLE OF diagnosis_conf_ea%ROWTYPE;
    TYPE diagnosis_conf_ea_vat IS VARRAY(100) OF diagnosis_conf_ea%ROWTYPE;

    -- Same type structure, with a static name.
    TYPE aat IS TABLE OF diagnosis_conf_ea%ROWTYPE INDEX BY BINARY_INTEGER;
    TYPE ntt IS TABLE OF diagnosis_conf_ea%ROWTYPE;
    TYPE vat IS VARRAY(100) OF diagnosis_conf_ea%ROWTYPE;

    -- Column Collection based on column "FLG_TERMINOLOGY"
    TYPE flg_terminology_cc IS TABLE OF diagnosis_conf_ea.flg_terminology%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_LANGUAGE"
    TYPE id_language_cc IS TABLE OF diagnosis_conf_ea.id_language%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_TASK_TYPE"
    TYPE id_task_type_cc IS TABLE OF diagnosis_conf_ea.id_task_type%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "TASK_TYPE_INTERNAL_NAME"
    TYPE task_type_internal_name_cc IS TABLE OF diagnosis_conf_ea.task_type_internal_name%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_INSTITUTION"
    TYPE id_institution_cc IS TABLE OF diagnosis_conf_ea.id_institution%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_SOFTWARE"
    TYPE id_software_cc IS TABLE OF diagnosis_conf_ea.id_software%TYPE INDEX BY BINARY_INTEGER;

    -- Insert one row, providing primary key if present
    PROCEDURE ins
    (
        flg_terminology_in         IN diagnosis_conf_ea.flg_terminology%TYPE,
        id_task_type_in            IN diagnosis_conf_ea.id_task_type%TYPE,
        id_institution_in          IN diagnosis_conf_ea.id_institution%TYPE,
        id_software_in             IN diagnosis_conf_ea.id_software%TYPE,
        id_language_in             IN diagnosis_conf_ea.id_language%TYPE DEFAULT 0,
        task_type_internal_name_in IN diagnosis_conf_ea.task_type_internal_name%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        flg_terminology_in         IN diagnosis_conf_ea.flg_terminology%TYPE,
        id_task_type_in            IN diagnosis_conf_ea.id_task_type%TYPE,
        id_institution_in          IN diagnosis_conf_ea.id_institution%TYPE,
        id_software_in             IN diagnosis_conf_ea.id_software%TYPE,
        id_language_in             IN diagnosis_conf_ea.id_language%TYPE DEFAULT 0,
        task_type_internal_name_in IN diagnosis_conf_ea.task_type_internal_name%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Insert a row based on a record.
    PROCEDURE ins
    (
        rec_in          IN diagnosis_conf_ea%ROWTYPE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        rec_in          IN diagnosis_conf_ea%ROWTYPE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers.
    PROCEDURE ins
    (
        rows_in         IN diagnosis_conf_ea_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        rows_in         IN diagnosis_conf_ea_tc,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.

    PROCEDURE upd
    (
        flg_terminology_in          IN diagnosis_conf_ea.flg_terminology%TYPE,
        id_task_type_in             IN diagnosis_conf_ea.id_task_type%TYPE,
        id_institution_in           IN diagnosis_conf_ea.id_institution%TYPE,
        id_software_in              IN diagnosis_conf_ea.id_software%TYPE,
        id_language_in              IN diagnosis_conf_ea.id_language%TYPE DEFAULT NULL,
        id_language_nin             IN BOOLEAN := TRUE,
        task_type_internal_name_in  IN diagnosis_conf_ea.task_type_internal_name%TYPE DEFAULT NULL,
        task_type_internal_name_nin IN BOOLEAN := TRUE,
        handle_error_in             IN BOOLEAN := TRUE,
        rows_out                    IN OUT table_varchar
    );

    PROCEDURE upd
    (
        flg_terminology_in          IN diagnosis_conf_ea.flg_terminology%TYPE,
        id_task_type_in             IN diagnosis_conf_ea.id_task_type%TYPE,
        id_institution_in           IN diagnosis_conf_ea.id_institution%TYPE,
        id_software_in              IN diagnosis_conf_ea.id_software%TYPE,
        id_language_in              IN diagnosis_conf_ea.id_language%TYPE DEFAULT NULL,
        id_language_nin             IN BOOLEAN := TRUE,
        task_type_internal_name_in  IN diagnosis_conf_ea.task_type_internal_name%TYPE DEFAULT NULL,
        task_type_internal_name_nin IN BOOLEAN := TRUE,
        handle_error_in             IN BOOLEAN := TRUE
    );

    PROCEDURE upd
    (
        id_language_in              IN diagnosis_conf_ea.id_language%TYPE DEFAULT NULL,
        id_language_nin             IN BOOLEAN := TRUE,
        task_type_internal_name_in  IN diagnosis_conf_ea.task_type_internal_name%TYPE DEFAULT NULL,
        task_type_internal_name_nin IN BOOLEAN := TRUE,
        where_in                    VARCHAR2,
        handle_error_in             IN BOOLEAN := TRUE,
        rows_out                    IN OUT table_varchar
    );

    PROCEDURE upd
    (
        id_language_in              IN diagnosis_conf_ea.id_language%TYPE DEFAULT NULL,
        id_language_nin             IN BOOLEAN := TRUE,
        task_type_internal_name_in  IN diagnosis_conf_ea.task_type_internal_name%TYPE DEFAULT NULL,
        task_type_internal_name_nin IN BOOLEAN := TRUE,
        where_in                    VARCHAR2,
        handle_error_in             IN BOOLEAN := TRUE
    );

    PROCEDURE upd_ins
    (
        flg_terminology_in         IN diagnosis_conf_ea.flg_terminology%TYPE,
        id_task_type_in            IN diagnosis_conf_ea.id_task_type%TYPE,
        id_institution_in          IN diagnosis_conf_ea.id_institution%TYPE,
        id_software_in             IN diagnosis_conf_ea.id_software%TYPE,
        id_language_in             IN diagnosis_conf_ea.id_language%TYPE DEFAULT NULL,
        task_type_internal_name_in IN diagnosis_conf_ea.task_type_internal_name%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    );

    PROCEDURE upd_ins
    (
        flg_terminology_in         IN diagnosis_conf_ea.flg_terminology%TYPE,
        id_task_type_in            IN diagnosis_conf_ea.id_task_type%TYPE,
        id_institution_in          IN diagnosis_conf_ea.id_institution%TYPE,
        id_software_in             IN diagnosis_conf_ea.id_software%TYPE,
        id_language_in             IN diagnosis_conf_ea.id_language%TYPE DEFAULT NULL,
        task_type_internal_name_in IN diagnosis_conf_ea.task_type_internal_name%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE
    );

    PROCEDURE upd
    (
        rec_in          IN diagnosis_conf_ea%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    );

    PROCEDURE upd
    (
        rec_in          IN diagnosis_conf_ea%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    );

    PROCEDURE upd
    (
        col_in            IN diagnosis_conf_ea_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    );

    PROCEDURE upd
    (
        col_in            IN diagnosis_conf_ea_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    );

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    );

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    );

    -- Delete one row by primary key
    PROCEDURE del
    (
        flg_terminology_in IN diagnosis_conf_ea.flg_terminology%TYPE,
        id_task_type_in    IN diagnosis_conf_ea.id_task_type%TYPE,
        id_institution_in  IN diagnosis_conf_ea.id_institution%TYPE,
        id_software_in     IN diagnosis_conf_ea.id_software%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    );

    -- Delete one row by primary key
    PROCEDURE del
    (
        flg_terminology_in IN diagnosis_conf_ea.flg_terminology%TYPE,
        id_task_type_in    IN diagnosis_conf_ea.id_task_type%TYPE,
        id_institution_in  IN diagnosis_conf_ea.id_institution%TYPE,
        id_software_in     IN diagnosis_conf_ea.id_software%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    );

    -- Delete all rows for primary key column FLG_TERMINOLOGY
    PROCEDURE del_flg_terminology
    (
        flg_terminology_in IN diagnosis_conf_ea.flg_terminology%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    );

    -- Delete all rows for primary key column FLG_TERMINOLOGY
    PROCEDURE del_flg_terminology
    (
        flg_terminology_in IN diagnosis_conf_ea.flg_terminology%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    );

    -- Delete all rows for primary key column ID_TASK_TYPE
    PROCEDURE del_id_task_type
    (
        id_task_type_in IN diagnosis_conf_ea.id_task_type%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows for primary key column ID_TASK_TYPE
    PROCEDURE del_id_task_type
    (
        id_task_type_in IN diagnosis_conf_ea.id_task_type%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows for primary key column ID_INSTITUTION
    PROCEDURE del_id_institution
    (
        id_institution_in IN diagnosis_conf_ea.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    );

    -- Delete all rows for primary key column ID_INSTITUTION
    PROCEDURE del_id_institution
    (
        id_institution_in IN diagnosis_conf_ea.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    );

    -- Delete all rows for primary key column ID_SOFTWARE
    PROCEDURE del_id_software
    (
        id_software_in  IN diagnosis_conf_ea.id_software%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows for primary key column ID_SOFTWARE
    PROCEDURE del_id_software
    (
        id_software_in  IN diagnosis_conf_ea.id_software%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified VARCHAR2 column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified VARCHAR2 column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified DATE column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified DATE column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified TIMESTAMP column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified TIMESTAMP column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified NUMBER column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified NUMBER column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(diagnosis_conf_ea_inout IN OUT diagnosis_conf_ea%ROWTYPE);

    FUNCTION initrec RETURN diagnosis_conf_ea%ROWTYPE;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN diagnosis_conf_ea_tc;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN diagnosis_conf_ea_tc;

END ts_diagnosis_conf_ea;
/
