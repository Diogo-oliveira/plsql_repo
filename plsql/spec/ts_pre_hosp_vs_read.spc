/*-- Last Change Revision: $Rev: 372225 $*/
/*-- Last Change by: $Author: claudio.ferreira $*/
/*-- Date of last change: $Date: 2010-01-08 10:42:48 +0000 (sex, 08 jan 2010) $*/

CREATE OR REPLACE PACKAGE ts_pre_hosp_vs_read
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {1BD37A66-EA60-4927-9A64-F6DD89237236}
| Created On: Junho 26, 2009 18:4:37
| Created By: ALERT
*/
 IS

    -- Collection of %ROWTYPE records based on "PRE_HOSP_VS_READ"
    TYPE pre_hosp_vs_read_tc IS TABLE OF pre_hosp_vs_read%ROWTYPE INDEX BY BINARY_INTEGER;
    TYPE pre_hosp_vs_read_ntt IS TABLE OF pre_hosp_vs_read%ROWTYPE;
    TYPE pre_hosp_vs_read_vat IS VARRAY(100) OF pre_hosp_vs_read%ROWTYPE;

    -- Same type structure, with a static name.
    TYPE aat IS TABLE OF pre_hosp_vs_read%ROWTYPE INDEX BY BINARY_INTEGER;
    TYPE ntt IS TABLE OF pre_hosp_vs_read%ROWTYPE;
    TYPE vat IS VARRAY(100) OF pre_hosp_vs_read%ROWTYPE;

    -- Column Collection based on column "ID_PRE_HOSP_ACCIDENT"
    TYPE id_pre_hosp_accident_cc IS TABLE OF pre_hosp_vs_read.id_pre_hosp_accident%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_VITAL_SIGN_READ"
    TYPE id_vital_sign_read_cc IS TABLE OF pre_hosp_vs_read.id_vital_sign_read%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "FLG_STATUS"
    TYPE flg_status_cc IS TABLE OF pre_hosp_vs_read.flg_status%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "CREATE_USER"
    TYPE create_user_cc IS TABLE OF pre_hosp_vs_read.create_user%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "CREATE_TIME"
    TYPE create_time_cc IS TABLE OF pre_hosp_vs_read.create_time%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "CREATE_INSTITUTION"
    TYPE create_institution_cc IS TABLE OF pre_hosp_vs_read.create_institution%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "UPDATE_USER"
    TYPE update_user_cc IS TABLE OF pre_hosp_vs_read.update_user%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "UPDATE_TIME"
    TYPE update_time_cc IS TABLE OF pre_hosp_vs_read.update_time%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "UPDATE_INSTITUTION"
    TYPE update_institution_cc IS TABLE OF pre_hosp_vs_read.update_institution%TYPE INDEX BY BINARY_INTEGER;

    -- Insert one row, providing primary key if present
    PROCEDURE ins
    (
        id_pre_hosp_accident_in IN pre_hosp_vs_read.id_pre_hosp_accident%TYPE,
        id_vital_sign_read_in   IN pre_hosp_vs_read.id_vital_sign_read%TYPE,
        flg_status_in           IN pre_hosp_vs_read.flg_status%TYPE DEFAULT 'A',
        create_user_in          IN pre_hosp_vs_read.create_user%TYPE DEFAULT NULL,
        create_time_in          IN pre_hosp_vs_read.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN pre_hosp_vs_read.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN pre_hosp_vs_read.update_user%TYPE DEFAULT NULL,
        update_time_in          IN pre_hosp_vs_read.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN pre_hosp_vs_read.update_institution%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        id_pre_hosp_accident_in IN pre_hosp_vs_read.id_pre_hosp_accident%TYPE,
        id_vital_sign_read_in   IN pre_hosp_vs_read.id_vital_sign_read%TYPE,
        flg_status_in           IN pre_hosp_vs_read.flg_status%TYPE DEFAULT 'A',
        create_user_in          IN pre_hosp_vs_read.create_user%TYPE DEFAULT NULL,
        create_time_in          IN pre_hosp_vs_read.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN pre_hosp_vs_read.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN pre_hosp_vs_read.update_user%TYPE DEFAULT NULL,
        update_time_in          IN pre_hosp_vs_read.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN pre_hosp_vs_read.update_institution%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Insert a row based on a record.
    PROCEDURE ins
    (
        rec_in          IN pre_hosp_vs_read%ROWTYPE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        rec_in          IN pre_hosp_vs_read%ROWTYPE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers.
    PROCEDURE ins
    (
        rows_in         IN pre_hosp_vs_read_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        rows_in         IN pre_hosp_vs_read_tc,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.

    PROCEDURE upd
    (
        id_pre_hosp_accident_in IN pre_hosp_vs_read.id_pre_hosp_accident%TYPE,
        id_vital_sign_read_in   IN pre_hosp_vs_read.id_vital_sign_read%TYPE,
        flg_status_in           IN pre_hosp_vs_read.flg_status%TYPE DEFAULT NULL,
        flg_status_nin          IN BOOLEAN := TRUE,
        create_user_in          IN pre_hosp_vs_read.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN pre_hosp_vs_read.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN pre_hosp_vs_read.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN pre_hosp_vs_read.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN pre_hosp_vs_read.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN pre_hosp_vs_read.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                IN OUT table_varchar
    );

    PROCEDURE upd
    (
        id_pre_hosp_accident_in IN pre_hosp_vs_read.id_pre_hosp_accident%TYPE,
        id_vital_sign_read_in   IN pre_hosp_vs_read.id_vital_sign_read%TYPE,
        flg_status_in           IN pre_hosp_vs_read.flg_status%TYPE DEFAULT NULL,
        flg_status_nin          IN BOOLEAN := TRUE,
        create_user_in          IN pre_hosp_vs_read.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN pre_hosp_vs_read.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN pre_hosp_vs_read.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN pre_hosp_vs_read.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN pre_hosp_vs_read.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN pre_hosp_vs_read.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        handle_error_in         IN BOOLEAN := TRUE
    );

    PROCEDURE upd
    (
        flg_status_in          IN pre_hosp_vs_read.flg_status%TYPE DEFAULT NULL,
        flg_status_nin         IN BOOLEAN := TRUE,
        create_user_in         IN pre_hosp_vs_read.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN pre_hosp_vs_read.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN pre_hosp_vs_read.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN pre_hosp_vs_read.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN pre_hosp_vs_read.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN pre_hosp_vs_read.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        where_in               VARCHAR2 DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               IN OUT table_varchar
    );

    PROCEDURE upd
    (
        flg_status_in          IN pre_hosp_vs_read.flg_status%TYPE DEFAULT NULL,
        flg_status_nin         IN BOOLEAN := TRUE,
        create_user_in         IN pre_hosp_vs_read.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN pre_hosp_vs_read.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN pre_hosp_vs_read.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN pre_hosp_vs_read.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN pre_hosp_vs_read.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN pre_hosp_vs_read.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        where_in               VARCHAR2 DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    );

    PROCEDURE upd_ins
    (
        id_pre_hosp_accident_in IN pre_hosp_vs_read.id_pre_hosp_accident%TYPE,
        id_vital_sign_read_in   IN pre_hosp_vs_read.id_vital_sign_read%TYPE,
        flg_status_in           IN pre_hosp_vs_read.flg_status%TYPE DEFAULT NULL,
        create_user_in          IN pre_hosp_vs_read.create_user%TYPE DEFAULT NULL,
        create_time_in          IN pre_hosp_vs_read.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN pre_hosp_vs_read.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN pre_hosp_vs_read.update_user%TYPE DEFAULT NULL,
        update_time_in          IN pre_hosp_vs_read.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN pre_hosp_vs_read.update_institution%TYPE DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    );

    PROCEDURE upd_ins
    (
        id_pre_hosp_accident_in IN pre_hosp_vs_read.id_pre_hosp_accident%TYPE,
        id_vital_sign_read_in   IN pre_hosp_vs_read.id_vital_sign_read%TYPE,
        flg_status_in           IN pre_hosp_vs_read.flg_status%TYPE DEFAULT NULL,
        create_user_in          IN pre_hosp_vs_read.create_user%TYPE DEFAULT NULL,
        create_time_in          IN pre_hosp_vs_read.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN pre_hosp_vs_read.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN pre_hosp_vs_read.update_user%TYPE DEFAULT NULL,
        update_time_in          IN pre_hosp_vs_read.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN pre_hosp_vs_read.update_institution%TYPE DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE
    );

    PROCEDURE upd
    (
        rec_in          IN pre_hosp_vs_read%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    );

    PROCEDURE upd
    (
        rec_in          IN pre_hosp_vs_read%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    );

    PROCEDURE upd
    (
        col_in            IN pre_hosp_vs_read_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    );

    PROCEDURE upd
    (
        col_in            IN pre_hosp_vs_read_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    );

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    );

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    );

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_pre_hosp_accident_in IN pre_hosp_vs_read.id_pre_hosp_accident%TYPE,
        id_vital_sign_read_in   IN pre_hosp_vs_read.id_vital_sign_read%TYPE,
        handle_error_in         IN BOOLEAN := TRUE
    );

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_pre_hosp_accident_in IN pre_hosp_vs_read.id_pre_hosp_accident%TYPE,
        id_vital_sign_read_in   IN pre_hosp_vs_read.id_vital_sign_read%TYPE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    );

    -- Delete all rows for primary key column ID_PRE_HOSP_ACCIDENT
    PROCEDURE del_id_pre_hosp_accident
    (
        id_pre_hosp_accident_in IN pre_hosp_vs_read.id_pre_hosp_accident%TYPE,
        handle_error_in         IN BOOLEAN := TRUE
    );

    -- Delete all rows for primary key column ID_PRE_HOSP_ACCIDENT
    PROCEDURE del_id_pre_hosp_accident
    (
        id_pre_hosp_accident_in IN pre_hosp_vs_read.id_pre_hosp_accident%TYPE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    );

    -- Delete all rows for primary key column ID_VITAL_SIGN_READ
    PROCEDURE del_id_vital_sign_read
    (
        id_vital_sign_read_in IN pre_hosp_vs_read.id_vital_sign_read%TYPE,
        handle_error_in       IN BOOLEAN := TRUE
    );

    -- Delete all rows for primary key column ID_VITAL_SIGN_READ
    PROCEDURE del_id_vital_sign_read
    (
        id_vital_sign_read_in IN pre_hosp_vs_read.id_vital_sign_read%TYPE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    );

    -- Delete all rows for this PR_HSP_VSR_PR_HSP_ACC_FK foreign key value
    PROCEDURE del_pr_hsp_vsr_pr_hsp_acc_fk
    (
        id_pre_hosp_accident_in IN pre_hosp_vs_read.id_pre_hosp_accident%TYPE,
        handle_error_in         IN BOOLEAN := TRUE
    );

    -- Delete all rows for this PR_HSP_VSR_PR_HSP_ACC_FK foreign key value
    PROCEDURE del_pr_hsp_vsr_pr_hsp_acc_fk
    (
        id_pre_hosp_accident_in IN pre_hosp_vs_read.id_pre_hosp_accident%TYPE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    );

    -- Delete all rows for this PR_HSP_VSR_VSR_FK foreign key value
    PROCEDURE del_pr_hsp_vsr_vsr_fk
    (
        id_vital_sign_read_in IN pre_hosp_vs_read.id_vital_sign_read%TYPE,
        handle_error_in       IN BOOLEAN := TRUE
    );

    -- Delete all rows for this PR_HSP_VSR_VSR_FK foreign key value
    PROCEDURE del_pr_hsp_vsr_vsr_fk
    (
        id_vital_sign_read_in IN pre_hosp_vs_read.id_vital_sign_read%TYPE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    );

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified VARCHAR2 column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified VARCHAR2 column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified DATE column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified DATE column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified TIMESTAMP column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified TIMESTAMP column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified NUMBER column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified NUMBER column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(pre_hosp_vs_read_inout IN OUT pre_hosp_vs_read%ROWTYPE);

    FUNCTION initrec RETURN pre_hosp_vs_read%ROWTYPE;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN pre_hosp_vs_read_tc;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN pre_hosp_vs_read_tc;

END ts_pre_hosp_vs_read;
/
