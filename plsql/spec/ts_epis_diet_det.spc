/*-- Last Change Revision: $Rev: 372225 $*/
/*-- Last Change by: $Author: claudio.ferreira $*/
/*-- Date of last change: $Date: 2010-01-08 10:42:48 +0000 (sex, 08 jan 2010) $*/

CREATE OR REPLACE PACKAGE ts_epis_diet_det
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {1BD37A66-EA60-4927-9A64-F6DD89237236}
| Created On: Abril 2, 2009 8:17:3
| Created By: ALERT
*/
 IS

    -- Collection of %ROWTYPE records based on "EPIS_DIET_DET"
    TYPE epis_diet_det_tc IS TABLE OF epis_diet_det%ROWTYPE INDEX BY BINARY_INTEGER;
    TYPE epis_diet_det_ntt IS TABLE OF epis_diet_det%ROWTYPE;
    TYPE epis_diet_det_vat IS VARRAY(100) OF epis_diet_det%ROWTYPE;

    -- Same type structure, with a static name.
    TYPE aat IS TABLE OF epis_diet_det%ROWTYPE INDEX BY BINARY_INTEGER;
    TYPE ntt IS TABLE OF epis_diet_det%ROWTYPE;
    TYPE vat IS VARRAY(100) OF epis_diet_det%ROWTYPE;

    -- Column Collection based on column "ID_EPIS_DIET_DET"
    TYPE id_epis_diet_det_cc IS TABLE OF epis_diet_det.id_epis_diet_det%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_EPIS_DIET_REQ"
    TYPE id_epis_diet_req_cc IS TABLE OF epis_diet_det.id_epis_diet_req%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "NOTES"
    TYPE notes_cc IS TABLE OF epis_diet_det.notes%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_DIET_SCHEDULE"
    TYPE id_diet_schedule_cc IS TABLE OF epis_diet_det.id_diet_schedule%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "DT_DIET_SCHEDULE"
    TYPE dt_diet_schedule_cc IS TABLE OF epis_diet_det.dt_diet_schedule%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_DIET"
    TYPE id_diet_cc IS TABLE OF epis_diet_det.id_diet%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "QUANTITY"
    TYPE quantity_cc IS TABLE OF epis_diet_det.quantity%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_UNIT_MEASURE"
    TYPE id_unit_measure_cc IS TABLE OF epis_diet_det.id_unit_measure%TYPE INDEX BY BINARY_INTEGER;

    -- Insert one row, providing primary key if present
    PROCEDURE ins
    (
        id_epis_diet_det_in IN epis_diet_det.id_epis_diet_det%TYPE,
        id_epis_diet_req_in IN epis_diet_det.id_epis_diet_req%TYPE DEFAULT NULL,
        notes_in            IN epis_diet_det.notes%TYPE DEFAULT NULL,
        id_diet_schedule_in IN epis_diet_det.id_diet_schedule%TYPE DEFAULT NULL,
        dt_diet_schedule_in IN epis_diet_det.dt_diet_schedule%TYPE DEFAULT NULL,
        id_diet_in          IN epis_diet_det.id_diet%TYPE DEFAULT NULL,
        quantity_in         IN epis_diet_det.quantity%TYPE DEFAULT NULL,
        id_unit_measure_in  IN epis_diet_det.id_unit_measure%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        id_epis_diet_det_in IN epis_diet_det.id_epis_diet_det%TYPE,
        id_epis_diet_req_in IN epis_diet_det.id_epis_diet_req%TYPE DEFAULT NULL,
        notes_in            IN epis_diet_det.notes%TYPE DEFAULT NULL,
        id_diet_schedule_in IN epis_diet_det.id_diet_schedule%TYPE DEFAULT NULL,
        dt_diet_schedule_in IN epis_diet_det.dt_diet_schedule%TYPE DEFAULT NULL,
        id_diet_in          IN epis_diet_det.id_diet%TYPE DEFAULT NULL,
        quantity_in         IN epis_diet_det.quantity%TYPE DEFAULT NULL,
        id_unit_measure_in  IN epis_diet_det.id_unit_measure%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Insert a row based on a record.
    -- Specify whether or not a primary key value should be generated.
    PROCEDURE ins
    (
        rec_in          IN epis_diet_det%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        rec_in          IN epis_diet_det%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers.
    PROCEDURE ins
    (
        rows_in         IN epis_diet_det_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        rows_in         IN epis_diet_det_tc,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Return next primary key value using the named sequence.
    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN epis_diet_det.id_epis_diet_det%TYPE;

    -- Insert one row, generating hidden primary key using a sequence
    PROCEDURE ins
    (
        id_epis_diet_req_in IN epis_diet_det.id_epis_diet_req%TYPE DEFAULT NULL,
        notes_in            IN epis_diet_det.notes%TYPE DEFAULT NULL,
        id_diet_schedule_in IN epis_diet_det.id_diet_schedule%TYPE DEFAULT NULL,
        dt_diet_schedule_in IN epis_diet_det.dt_diet_schedule%TYPE DEFAULT NULL,
        id_diet_in          IN epis_diet_det.id_diet%TYPE DEFAULT NULL,
        quantity_in         IN epis_diet_det.quantity%TYPE DEFAULT NULL,
        id_unit_measure_in  IN epis_diet_det.id_unit_measure%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        id_epis_diet_req_in IN epis_diet_det.id_epis_diet_req%TYPE DEFAULT NULL,
        notes_in            IN epis_diet_det.notes%TYPE DEFAULT NULL,
        id_diet_schedule_in IN epis_diet_det.id_diet_schedule%TYPE DEFAULT NULL,
        dt_diet_schedule_in IN epis_diet_det.dt_diet_schedule%TYPE DEFAULT NULL,
        id_diet_in          IN epis_diet_det.id_diet%TYPE DEFAULT NULL,
        quantity_in         IN epis_diet_det.quantity%TYPE DEFAULT NULL,
        id_unit_measure_in  IN epis_diet_det.id_unit_measure%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Insert one row, returning primary key generated by sequence
    PROCEDURE ins
    (
        id_epis_diet_req_in  IN epis_diet_det.id_epis_diet_req%TYPE DEFAULT NULL,
        notes_in             IN epis_diet_det.notes%TYPE DEFAULT NULL,
        id_diet_schedule_in  IN epis_diet_det.id_diet_schedule%TYPE DEFAULT NULL,
        dt_diet_schedule_in  IN epis_diet_det.dt_diet_schedule%TYPE DEFAULT NULL,
        id_diet_in           IN epis_diet_det.id_diet%TYPE DEFAULT NULL,
        quantity_in          IN epis_diet_det.quantity%TYPE DEFAULT NULL,
        id_unit_measure_in   IN epis_diet_det.id_unit_measure%TYPE DEFAULT NULL,
        id_epis_diet_det_out IN OUT epis_diet_det.id_epis_diet_det%TYPE
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        id_epis_diet_req_in  IN epis_diet_det.id_epis_diet_req%TYPE DEFAULT NULL,
        notes_in             IN epis_diet_det.notes%TYPE DEFAULT NULL,
        id_diet_schedule_in  IN epis_diet_det.id_diet_schedule%TYPE DEFAULT NULL,
        dt_diet_schedule_in  IN epis_diet_det.dt_diet_schedule%TYPE DEFAULT NULL,
        id_diet_in           IN epis_diet_det.id_diet%TYPE DEFAULT NULL,
        quantity_in          IN epis_diet_det.quantity%TYPE DEFAULT NULL,
        id_unit_measure_in   IN epis_diet_det.id_unit_measure%TYPE DEFAULT NULL,
        id_epis_diet_det_out IN OUT epis_diet_det.id_epis_diet_det%TYPE
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Insert one row with function, return generated primary key
    FUNCTION ins
    (
        id_epis_diet_req_in IN epis_diet_det.id_epis_diet_req%TYPE DEFAULT NULL,
        notes_in            IN epis_diet_det.notes%TYPE DEFAULT NULL,
        id_diet_schedule_in IN epis_diet_det.id_diet_schedule%TYPE DEFAULT NULL,
        dt_diet_schedule_in IN epis_diet_det.dt_diet_schedule%TYPE DEFAULT NULL,
        id_diet_in          IN epis_diet_det.id_diet%TYPE DEFAULT NULL,
        quantity_in         IN epis_diet_det.quantity%TYPE DEFAULT NULL,
        id_unit_measure_in  IN epis_diet_det.id_unit_measure%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) RETURN epis_diet_det.id_epis_diet_det%TYPE;

    FUNCTION ins
    (
        id_epis_diet_req_in IN epis_diet_det.id_epis_diet_req%TYPE DEFAULT NULL,
        notes_in            IN epis_diet_det.notes%TYPE DEFAULT NULL,
        id_diet_schedule_in IN epis_diet_det.id_diet_schedule%TYPE DEFAULT NULL,
        dt_diet_schedule_in IN epis_diet_det.dt_diet_schedule%TYPE DEFAULT NULL,
        id_diet_in          IN epis_diet_det.id_diet%TYPE DEFAULT NULL,
        quantity_in         IN epis_diet_det.quantity%TYPE DEFAULT NULL,
        id_unit_measure_in  IN epis_diet_det.id_unit_measure%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE
    ) RETURN epis_diet_det.id_epis_diet_det%TYPE;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.

    PROCEDURE upd
    (
        id_epis_diet_det_in  IN epis_diet_det.id_epis_diet_det%TYPE,
        id_epis_diet_req_in  IN epis_diet_det.id_epis_diet_req%TYPE DEFAULT NULL,
        id_epis_diet_req_nin IN BOOLEAN := TRUE,
        notes_in             IN epis_diet_det.notes%TYPE DEFAULT NULL,
        notes_nin            IN BOOLEAN := TRUE,
        id_diet_schedule_in  IN epis_diet_det.id_diet_schedule%TYPE DEFAULT NULL,
        id_diet_schedule_nin IN BOOLEAN := TRUE,
        dt_diet_schedule_in  IN epis_diet_det.dt_diet_schedule%TYPE DEFAULT NULL,
        dt_diet_schedule_nin IN BOOLEAN := TRUE,
        id_diet_in           IN epis_diet_det.id_diet%TYPE DEFAULT NULL,
        id_diet_nin          IN BOOLEAN := TRUE,
        quantity_in          IN epis_diet_det.quantity%TYPE DEFAULT NULL,
        quantity_nin         IN BOOLEAN := TRUE,
        id_unit_measure_in   IN epis_diet_det.id_unit_measure%TYPE DEFAULT NULL,
        id_unit_measure_nin  IN BOOLEAN := TRUE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             IN OUT table_varchar
    );

    PROCEDURE upd
    (
        id_epis_diet_det_in  IN epis_diet_det.id_epis_diet_det%TYPE,
        id_epis_diet_req_in  IN epis_diet_det.id_epis_diet_req%TYPE DEFAULT NULL,
        id_epis_diet_req_nin IN BOOLEAN := TRUE,
        notes_in             IN epis_diet_det.notes%TYPE DEFAULT NULL,
        notes_nin            IN BOOLEAN := TRUE,
        id_diet_schedule_in  IN epis_diet_det.id_diet_schedule%TYPE DEFAULT NULL,
        id_diet_schedule_nin IN BOOLEAN := TRUE,
        dt_diet_schedule_in  IN epis_diet_det.dt_diet_schedule%TYPE DEFAULT NULL,
        dt_diet_schedule_nin IN BOOLEAN := TRUE,
        id_diet_in           IN epis_diet_det.id_diet%TYPE DEFAULT NULL,
        id_diet_nin          IN BOOLEAN := TRUE,
        quantity_in          IN epis_diet_det.quantity%TYPE DEFAULT NULL,
        quantity_nin         IN BOOLEAN := TRUE,
        id_unit_measure_in   IN epis_diet_det.id_unit_measure%TYPE DEFAULT NULL,
        id_unit_measure_nin  IN BOOLEAN := TRUE,
        handle_error_in      IN BOOLEAN := TRUE
    );

    PROCEDURE upd
    (
        id_epis_diet_req_in  IN epis_diet_det.id_epis_diet_req%TYPE DEFAULT NULL,
        id_epis_diet_req_nin IN BOOLEAN := TRUE,
        notes_in             IN epis_diet_det.notes%TYPE DEFAULT NULL,
        notes_nin            IN BOOLEAN := TRUE,
        id_diet_schedule_in  IN epis_diet_det.id_diet_schedule%TYPE DEFAULT NULL,
        id_diet_schedule_nin IN BOOLEAN := TRUE,
        dt_diet_schedule_in  IN epis_diet_det.dt_diet_schedule%TYPE DEFAULT NULL,
        dt_diet_schedule_nin IN BOOLEAN := TRUE,
        id_diet_in           IN epis_diet_det.id_diet%TYPE DEFAULT NULL,
        id_diet_nin          IN BOOLEAN := TRUE,
        quantity_in          IN epis_diet_det.quantity%TYPE DEFAULT NULL,
        quantity_nin         IN BOOLEAN := TRUE,
        id_unit_measure_in   IN epis_diet_det.id_unit_measure%TYPE DEFAULT NULL,
        id_unit_measure_nin  IN BOOLEAN := TRUE,
        where_in             VARCHAR2 DEFAULT NULL,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             IN OUT table_varchar
    );

    PROCEDURE upd
    (
        id_epis_diet_req_in  IN epis_diet_det.id_epis_diet_req%TYPE DEFAULT NULL,
        id_epis_diet_req_nin IN BOOLEAN := TRUE,
        notes_in             IN epis_diet_det.notes%TYPE DEFAULT NULL,
        notes_nin            IN BOOLEAN := TRUE,
        id_diet_schedule_in  IN epis_diet_det.id_diet_schedule%TYPE DEFAULT NULL,
        id_diet_schedule_nin IN BOOLEAN := TRUE,
        dt_diet_schedule_in  IN epis_diet_det.dt_diet_schedule%TYPE DEFAULT NULL,
        dt_diet_schedule_nin IN BOOLEAN := TRUE,
        id_diet_in           IN epis_diet_det.id_diet%TYPE DEFAULT NULL,
        id_diet_nin          IN BOOLEAN := TRUE,
        quantity_in          IN epis_diet_det.quantity%TYPE DEFAULT NULL,
        quantity_nin         IN BOOLEAN := TRUE,
        id_unit_measure_in   IN epis_diet_det.id_unit_measure%TYPE DEFAULT NULL,
        id_unit_measure_nin  IN BOOLEAN := TRUE,
        where_in             VARCHAR2 DEFAULT NULL,
        handle_error_in      IN BOOLEAN := TRUE
    );

    PROCEDURE upd_ins
    (
        id_epis_diet_det_in IN epis_diet_det.id_epis_diet_det%TYPE,
        id_epis_diet_req_in IN epis_diet_det.id_epis_diet_req%TYPE DEFAULT NULL,
        notes_in            IN epis_diet_det.notes%TYPE DEFAULT NULL,
        id_diet_schedule_in IN epis_diet_det.id_diet_schedule%TYPE DEFAULT NULL,
        dt_diet_schedule_in IN epis_diet_det.dt_diet_schedule%TYPE DEFAULT NULL,
        id_diet_in          IN epis_diet_det.id_diet%TYPE DEFAULT NULL,
        quantity_in         IN epis_diet_det.quantity%TYPE DEFAULT NULL,
        id_unit_measure_in  IN epis_diet_det.id_unit_measure%TYPE DEFAULT NULL,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    );

    PROCEDURE upd_ins
    (
        id_epis_diet_det_in IN epis_diet_det.id_epis_diet_det%TYPE,
        id_epis_diet_req_in IN epis_diet_det.id_epis_diet_req%TYPE DEFAULT NULL,
        notes_in            IN epis_diet_det.notes%TYPE DEFAULT NULL,
        id_diet_schedule_in IN epis_diet_det.id_diet_schedule%TYPE DEFAULT NULL,
        dt_diet_schedule_in IN epis_diet_det.dt_diet_schedule%TYPE DEFAULT NULL,
        id_diet_in          IN epis_diet_det.id_diet%TYPE DEFAULT NULL,
        quantity_in         IN epis_diet_det.quantity%TYPE DEFAULT NULL,
        id_unit_measure_in  IN epis_diet_det.id_unit_measure%TYPE DEFAULT NULL,
        handle_error_in     IN BOOLEAN := TRUE
    );

    PROCEDURE upd
    (
        rec_in          IN epis_diet_det%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    );

    PROCEDURE upd
    (
        rec_in          IN epis_diet_det%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    );

    PROCEDURE upd
    (
        col_in            IN epis_diet_det_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    );

    PROCEDURE upd
    (
        col_in            IN epis_diet_det_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    );

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    );

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    );

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_epis_diet_det_in IN epis_diet_det.id_epis_diet_det%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    );

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_epis_diet_det_in IN epis_diet_det.id_epis_diet_det%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    );

    -- Delete all rows for primary key column ID_EPIS_DIET_DET
    PROCEDURE del_id_epis_diet_det
    (
        id_epis_diet_det_in IN epis_diet_det.id_epis_diet_det%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    );

    -- Delete all rows for primary key column ID_EPIS_DIET_DET
    PROCEDURE del_id_epis_diet_det
    (
        id_epis_diet_det_in IN epis_diet_det.id_epis_diet_det%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    );

    -- Delete all rows for this EDD_DIT_FK foreign key value
    PROCEDURE del_edd_dit_fk
    (
        id_diet_in      IN epis_diet_det.id_diet%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows for this EDD_DIT_FK foreign key value
    PROCEDURE del_edd_dit_fk
    (
        id_diet_in      IN epis_diet_det.id_diet%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows for this EDD_DSE_FK foreign key value
    PROCEDURE del_edd_dse_fk
    (
        id_diet_schedule_in IN epis_diet_det.id_diet_schedule%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    );

    -- Delete all rows for this EDD_DSE_FK foreign key value
    PROCEDURE del_edd_dse_fk
    (
        id_diet_schedule_in IN epis_diet_det.id_diet_schedule%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    );

    -- Delete all rows for this EDD_EDR_FK foreign key value
    PROCEDURE del_edd_edr_fk
    (
        id_epis_diet_req_in IN epis_diet_det.id_epis_diet_req%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    );

    -- Delete all rows for this EDD_EDR_FK foreign key value
    PROCEDURE del_edd_edr_fk
    (
        id_epis_diet_req_in IN epis_diet_det.id_epis_diet_req%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    );

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified VARCHAR2 column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified VARCHAR2 column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified DATE column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified DATE column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified TIMESTAMP column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified TIMESTAMP column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified NUMBER column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified NUMBER column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(epis_diet_det_inout IN OUT epis_diet_det%ROWTYPE);

    FUNCTION initrec RETURN epis_diet_det%ROWTYPE;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN epis_diet_det_tc;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN epis_diet_det_tc;

END ts_epis_diet_det;
/
