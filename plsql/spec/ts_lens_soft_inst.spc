/*-- Last Change Revision: $Rev: 2029238 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:50:34 +0100 (ter, 02 ago 2022) $*/

CREATE OR REPLACE PACKAGE ts_lens_soft_inst
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {1BD37A66-EA60-4927-9A64-F6DD89237236}
| Created On: January 22, 2009 20:1:49
| Created By: ALERT
*/
 IS

    -- Collection of %ROWTYPE records based on "LENS_SOFT_INST"
    TYPE lens_soft_inst_tc IS TABLE OF lens_soft_inst%ROWTYPE INDEX BY BINARY_INTEGER;
    TYPE lens_soft_inst_ntt IS TABLE OF lens_soft_inst%ROWTYPE;
    TYPE lens_soft_inst_vat IS VARRAY(100) OF lens_soft_inst%ROWTYPE;

    -- Same type structure, with a static name.
    TYPE aat IS TABLE OF lens_soft_inst%ROWTYPE INDEX BY BINARY_INTEGER;
    TYPE ntt IS TABLE OF lens_soft_inst%ROWTYPE;
    TYPE vat IS VARRAY(100) OF lens_soft_inst%ROWTYPE;

    -- Column Collection based on column "ID_LENS"
    TYPE id_lens_cc IS TABLE OF lens_soft_inst.id_lens%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_SOFTWARE"
    TYPE id_software_cc IS TABLE OF lens_soft_inst.id_software%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_INSTITUTION"
    TYPE id_institution_cc IS TABLE OF lens_soft_inst.id_institution%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "FLG_AVAILABLE"
    TYPE flg_available_cc IS TABLE OF lens_soft_inst.flg_available%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "RANK"
    TYPE rank_cc IS TABLE OF lens_soft_inst.rank%TYPE INDEX BY BINARY_INTEGER;

    -- Insert one row, providing primary key if present
    PROCEDURE ins
    (
        id_lens_in        IN lens_soft_inst.id_lens%TYPE,
        id_software_in    IN lens_soft_inst.id_software%TYPE,
        id_institution_in IN lens_soft_inst.id_institution%TYPE,
        flg_available_in  IN lens_soft_inst.flg_available%TYPE DEFAULT NULL,
        rank_in           IN lens_soft_inst.rank%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        id_lens_in        IN lens_soft_inst.id_lens%TYPE,
        id_software_in    IN lens_soft_inst.id_software%TYPE,
        id_institution_in IN lens_soft_inst.id_institution%TYPE,
        flg_available_in  IN lens_soft_inst.flg_available%TYPE DEFAULT NULL,
        rank_in           IN lens_soft_inst.rank%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Insert a row based on a record.
    PROCEDURE ins
    (
        rec_in          IN lens_soft_inst%ROWTYPE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        rec_in          IN lens_soft_inst%ROWTYPE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers.
    PROCEDURE ins
    (
        rows_in         IN lens_soft_inst_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        rows_in         IN lens_soft_inst_tc,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.

    PROCEDURE upd
    (
        id_lens_in        IN lens_soft_inst.id_lens%TYPE,
        id_software_in    IN lens_soft_inst.id_software%TYPE,
        id_institution_in IN lens_soft_inst.id_institution%TYPE,
        flg_available_in  IN lens_soft_inst.flg_available%TYPE DEFAULT NULL,
        flg_available_nin IN BOOLEAN := TRUE,
        rank_in           IN lens_soft_inst.rank%TYPE DEFAULT NULL,
        rank_nin          IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    );

    PROCEDURE upd
    (
        id_lens_in        IN lens_soft_inst.id_lens%TYPE,
        id_software_in    IN lens_soft_inst.id_software%TYPE,
        id_institution_in IN lens_soft_inst.id_institution%TYPE,
        flg_available_in  IN lens_soft_inst.flg_available%TYPE DEFAULT NULL,
        flg_available_nin IN BOOLEAN := TRUE,
        rank_in           IN lens_soft_inst.rank%TYPE DEFAULT NULL,
        rank_nin          IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    );

    PROCEDURE upd
    (
        flg_available_in  IN lens_soft_inst.flg_available%TYPE DEFAULT NULL,
        flg_available_nin IN BOOLEAN := TRUE,
        rank_in           IN lens_soft_inst.rank%TYPE DEFAULT NULL,
        rank_nin          IN BOOLEAN := TRUE,
        where_in          VARCHAR2 DEFAULT NULL,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    );

    PROCEDURE upd
    (
        flg_available_in  IN lens_soft_inst.flg_available%TYPE DEFAULT NULL,
        flg_available_nin IN BOOLEAN := TRUE,
        rank_in           IN lens_soft_inst.rank%TYPE DEFAULT NULL,
        rank_nin          IN BOOLEAN := TRUE,
        where_in          VARCHAR2 DEFAULT NULL,
        handle_error_in   IN BOOLEAN := TRUE
    );

    PROCEDURE upd_ins
    (
        id_lens_in        IN lens_soft_inst.id_lens%TYPE,
        id_software_in    IN lens_soft_inst.id_software%TYPE,
        id_institution_in IN lens_soft_inst.id_institution%TYPE,
        flg_available_in  IN lens_soft_inst.flg_available%TYPE DEFAULT NULL,
        rank_in           IN lens_soft_inst.rank%TYPE DEFAULT NULL,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    );

    PROCEDURE upd_ins
    (
        id_lens_in        IN lens_soft_inst.id_lens%TYPE,
        id_software_in    IN lens_soft_inst.id_software%TYPE,
        id_institution_in IN lens_soft_inst.id_institution%TYPE,
        flg_available_in  IN lens_soft_inst.flg_available%TYPE DEFAULT NULL,
        rank_in           IN lens_soft_inst.rank%TYPE DEFAULT NULL,
        handle_error_in   IN BOOLEAN := TRUE
    );

    PROCEDURE upd
    (
        rec_in          IN lens_soft_inst%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    );

    PROCEDURE upd
    (
        rec_in          IN lens_soft_inst%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    );

    PROCEDURE upd
    (
        col_in            IN lens_soft_inst_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    );

    PROCEDURE upd
    (
        col_in            IN lens_soft_inst_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    );

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    );

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    );

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_lens_in        IN lens_soft_inst.id_lens%TYPE,
        id_software_in    IN lens_soft_inst.id_software%TYPE,
        id_institution_in IN lens_soft_inst.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    );

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_lens_in        IN lens_soft_inst.id_lens%TYPE,
        id_software_in    IN lens_soft_inst.id_software%TYPE,
        id_institution_in IN lens_soft_inst.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    );

    -- Delete all rows for primary key column ID_LENS
    PROCEDURE del_id_lens
    (
        id_lens_in      IN lens_soft_inst.id_lens%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows for primary key column ID_LENS
    PROCEDURE del_id_lens
    (
        id_lens_in      IN lens_soft_inst.id_lens%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows for primary key column ID_SOFTWARE
    PROCEDURE del_id_software
    (
        id_software_in  IN lens_soft_inst.id_software%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows for primary key column ID_SOFTWARE
    PROCEDURE del_id_software
    (
        id_software_in  IN lens_soft_inst.id_software%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows for primary key column ID_INSTITUTION
    PROCEDURE del_id_institution
    (
        id_institution_in IN lens_soft_inst.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    );

    -- Delete all rows for primary key column ID_INSTITUTION
    PROCEDURE del_id_institution
    (
        id_institution_in IN lens_soft_inst.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    );

    -- Delete all rows for this LST_INN_FK foreign key value
    PROCEDURE del_lst_inn_fk
    (
        id_institution_in IN lens_soft_inst.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    );

    -- Delete all rows for this LST_INN_FK foreign key value
    PROCEDURE del_lst_inn_fk
    (
        id_institution_in IN lens_soft_inst.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    );

    -- Delete all rows for this LST_LEN_FK foreign key value
    PROCEDURE del_lst_len_fk
    (
        id_lens_in      IN lens_soft_inst.id_lens%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows for this LST_LEN_FK foreign key value
    PROCEDURE del_lst_len_fk
    (
        id_lens_in      IN lens_soft_inst.id_lens%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows for this LST_SOE_FK foreign key value
    PROCEDURE del_lst_soe_fk
    (
        id_software_in  IN lens_soft_inst.id_software%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows for this LST_SOE_FK foreign key value
    PROCEDURE del_lst_soe_fk
    (
        id_software_in  IN lens_soft_inst.id_software%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified VARCHAR2 column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified VARCHAR2 column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified DATE column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified DATE column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified TIMESTAMP column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified TIMESTAMP column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified NUMBER column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified NUMBER column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(lens_soft_inst_inout IN OUT lens_soft_inst%ROWTYPE);

    FUNCTION initrec RETURN lens_soft_inst%ROWTYPE;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN lens_soft_inst_tc;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN lens_soft_inst_tc;

END ts_lens_soft_inst;
/
