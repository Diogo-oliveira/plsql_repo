/*-- Last Change Revision: $Rev: 2029241 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:50:35 +0100 (ter, 02 ago 2022) $*/

CREATE OR REPLACE PACKAGE TS_MANAGEMENT_PLAN
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {1BD37A66-EA60-4927-9A64-F6DD89237236}
| Created On: Agosto 20, 2009 9:31:24
| Created By: ALERT
*/
 IS

    -- Collection of %ROWTYPE records based on "MANAGEMENT_PLAN"
    TYPE management_plan_tc IS TABLE OF management_plan%ROWTYPE INDEX BY BINARY_INTEGER;
    TYPE management_plan_ntt IS TABLE OF management_plan%ROWTYPE;
    TYPE management_plan_vat IS VARRAY(100) OF management_plan%ROWTYPE;

    -- Same type structure, with a static name.
    TYPE aat IS TABLE OF management_plan%ROWTYPE INDEX BY BINARY_INTEGER;
    TYPE ntt IS TABLE OF management_plan%ROWTYPE;
    TYPE vat IS VARRAY(100) OF management_plan%ROWTYPE;

    -- Column Collection based on column "ID_MANAGEMENT_PLAN"
    TYPE id_management_plan_cc IS TABLE OF management_plan.id_management_plan%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_EPISODE"
    TYPE id_episode_cc IS TABLE OF management_plan.id_episode%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_EPIS_ENCOUNTER"
    TYPE id_epis_encounter_cc IS TABLE OF management_plan.id_epis_encounter%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_PROFESSIONAL"
    TYPE id_professional_cc IS TABLE OF management_plan.id_professional%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_MANAGEMENT_LEVEL"
    TYPE id_management_level_cc IS TABLE OF management_plan.id_management_level%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "FLG_STATUS"
    TYPE flg_status_cc IS TABLE OF management_plan.flg_status%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "DT_REGISTER"
    TYPE dt_register_cc IS TABLE OF management_plan.dt_register%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ADMISSION_NOTES"
    TYPE admission_notes_cc IS TABLE OF management_plan.admission_notes%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "IMMEDIATE_NEEDS"
    TYPE immediate_needs_cc IS TABLE OF management_plan.immediate_needs%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "GOALS"
    TYPE goals_cc IS TABLE OF management_plan.goals%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "PLAN"
    TYPE plan_cc IS TABLE OF management_plan.plan%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_CANCEL_REASON"
    TYPE id_cancel_reason_cc IS TABLE OF management_plan.id_cancel_reason%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "NOTES_CANCEL"
    TYPE notes_cancel_cc IS TABLE OF management_plan.notes_cancel%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "ID_PARENT"
    TYPE id_parent_cc IS TABLE OF management_plan.id_parent%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "CREATE_USER"
    TYPE create_user_cc IS TABLE OF management_plan.create_user%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "CREATE_TIME"
    TYPE create_time_cc IS TABLE OF management_plan.create_time%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "CREATE_INSTITUTION"
    TYPE create_institution_cc IS TABLE OF management_plan.create_institution%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "UPDATE_USER"
    TYPE update_user_cc IS TABLE OF management_plan.update_user%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "UPDATE_TIME"
    TYPE update_time_cc IS TABLE OF management_plan.update_time%TYPE INDEX BY BINARY_INTEGER;
    -- Column Collection based on column "UPDATE_INSTITUTION"
    TYPE update_institution_cc IS TABLE OF management_plan.update_institution%TYPE INDEX BY BINARY_INTEGER;

    TYPE varchar2_t IS TABLE OF VARCHAR2(32767) INDEX BY PLS_INTEGER;
    /*
    START Special logic for handling LOB columns....
    */
    PROCEDURE n_ins_clobs_in_chunks
    (
        id_management_plan_in  IN management_plan.id_management_plan%TYPE,
        id_episode_in          IN management_plan.id_episode%TYPE DEFAULT NULL,
        id_epis_encounter_in   IN management_plan.id_epis_encounter%TYPE DEFAULT NULL,
        id_professional_in     IN management_plan.id_professional%TYPE DEFAULT NULL,
        id_management_level_in IN management_plan.id_management_level%TYPE DEFAULT NULL,
        flg_status_in          IN management_plan.flg_status%TYPE DEFAULT NULL,
        dt_register_in         IN management_plan.dt_register%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN management_plan.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in        IN management_plan.notes_cancel%TYPE DEFAULT NULL,
        id_parent_in           IN management_plan.id_parent%TYPE DEFAULT NULL,
        create_user_in         IN management_plan.create_user%TYPE DEFAULT NULL,
        create_time_in         IN management_plan.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN management_plan.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN management_plan.update_user%TYPE DEFAULT NULL,
        update_time_in         IN management_plan.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN management_plan.update_institution%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        clob_columns_in        IN varchar2_t,
        clob_pieces_in         IN varchar2_t
    );

    PROCEDURE n_upd_clobs_in_chunks
    (
        id_management_plan_in  IN management_plan.id_management_plan%TYPE,
        id_episode_in          IN management_plan.id_episode%TYPE DEFAULT NULL,
        id_epis_encounter_in   IN management_plan.id_epis_encounter%TYPE DEFAULT NULL,
        id_professional_in     IN management_plan.id_professional%TYPE DEFAULT NULL,
        id_management_level_in IN management_plan.id_management_level%TYPE DEFAULT NULL,
        flg_status_in          IN management_plan.flg_status%TYPE DEFAULT NULL,
        dt_register_in         IN management_plan.dt_register%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN management_plan.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in        IN management_plan.notes_cancel%TYPE DEFAULT NULL,
        id_parent_in           IN management_plan.id_parent%TYPE DEFAULT NULL,
        create_user_in         IN management_plan.create_user%TYPE DEFAULT NULL,
        create_time_in         IN management_plan.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN management_plan.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN management_plan.update_user%TYPE DEFAULT NULL,
        update_time_in         IN management_plan.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN management_plan.update_institution%TYPE DEFAULT NULL,
        ignore_if_null_in      IN BOOLEAN := TRUE,
        handle_error_in        IN BOOLEAN := TRUE,
        clob_columns_in        IN varchar2_t,
        clob_pieces_in         IN varchar2_t
    );

    PROCEDURE n_upd_ins_clobs_in_chunks
    (
        id_management_plan_in  IN management_plan.id_management_plan%TYPE,
        id_episode_in          IN management_plan.id_episode%TYPE DEFAULT NULL,
        id_epis_encounter_in   IN management_plan.id_epis_encounter%TYPE DEFAULT NULL,
        id_professional_in     IN management_plan.id_professional%TYPE DEFAULT NULL,
        id_management_level_in IN management_plan.id_management_level%TYPE DEFAULT NULL,
        flg_status_in          IN management_plan.flg_status%TYPE DEFAULT NULL,
        dt_register_in         IN management_plan.dt_register%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN management_plan.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in        IN management_plan.notes_cancel%TYPE DEFAULT NULL,
        id_parent_in           IN management_plan.id_parent%TYPE DEFAULT NULL,
        create_user_in         IN management_plan.create_user%TYPE DEFAULT NULL,
        create_time_in         IN management_plan.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN management_plan.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN management_plan.update_user%TYPE DEFAULT NULL,
        update_time_in         IN management_plan.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN management_plan.update_institution%TYPE DEFAULT NULL,
        ignore_if_null_in      IN BOOLEAN DEFAULT TRUE,
        handle_error_in        IN BOOLEAN DEFAULT TRUE,
        clob_columns_in        IN varchar2_t,
        clob_pieces_in         IN varchar2_t
    );

    /*
    END Special logic for handling LOB columns.
    */
    -- Insert one row, providing primary key if present
    PROCEDURE ins
    (
        id_management_plan_in  IN management_plan.id_management_plan%TYPE,
        id_episode_in          IN management_plan.id_episode%TYPE DEFAULT NULL,
        id_epis_encounter_in   IN management_plan.id_epis_encounter%TYPE DEFAULT NULL,
        id_professional_in     IN management_plan.id_professional%TYPE DEFAULT NULL,
        id_management_level_in IN management_plan.id_management_level%TYPE DEFAULT NULL,
        flg_status_in          IN management_plan.flg_status%TYPE DEFAULT NULL,
        dt_register_in         IN management_plan.dt_register%TYPE DEFAULT NULL,
        admission_notes_in     IN management_plan.admission_notes%TYPE DEFAULT NULL,
        immediate_needs_in     IN management_plan.immediate_needs%TYPE DEFAULT NULL,
        goals_in               IN management_plan.goals%TYPE DEFAULT NULL,
        plan_in                IN management_plan.plan%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN management_plan.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in        IN management_plan.notes_cancel%TYPE DEFAULT NULL,
        id_parent_in           IN management_plan.id_parent%TYPE DEFAULT NULL,
        create_user_in         IN management_plan.create_user%TYPE DEFAULT NULL,
        create_time_in         IN management_plan.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN management_plan.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN management_plan.update_user%TYPE DEFAULT NULL,
        update_time_in         IN management_plan.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN management_plan.update_institution%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        id_management_plan_in  IN management_plan.id_management_plan%TYPE,
        id_episode_in          IN management_plan.id_episode%TYPE DEFAULT NULL,
        id_epis_encounter_in   IN management_plan.id_epis_encounter%TYPE DEFAULT NULL,
        id_professional_in     IN management_plan.id_professional%TYPE DEFAULT NULL,
        id_management_level_in IN management_plan.id_management_level%TYPE DEFAULT NULL,
        flg_status_in          IN management_plan.flg_status%TYPE DEFAULT NULL,
        dt_register_in         IN management_plan.dt_register%TYPE DEFAULT NULL,
        admission_notes_in     IN management_plan.admission_notes%TYPE DEFAULT NULL,
        immediate_needs_in     IN management_plan.immediate_needs%TYPE DEFAULT NULL,
        goals_in               IN management_plan.goals%TYPE DEFAULT NULL,
        plan_in                IN management_plan.plan%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN management_plan.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in        IN management_plan.notes_cancel%TYPE DEFAULT NULL,
        id_parent_in           IN management_plan.id_parent%TYPE DEFAULT NULL,
        create_user_in         IN management_plan.create_user%TYPE DEFAULT NULL,
        create_time_in         IN management_plan.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN management_plan.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN management_plan.update_user%TYPE DEFAULT NULL,
        update_time_in         IN management_plan.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN management_plan.update_institution%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Insert a row based on a record.
    -- Specify whether or not a primary key value should be generated.
    PROCEDURE ins
    (
        rec_in          IN management_plan%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        rec_in          IN management_plan%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers.
    PROCEDURE ins
    (
        rows_in         IN management_plan_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        rows_in         IN management_plan_tc,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Return next primary key value using the named sequence.
    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN management_plan.id_management_plan%TYPE;

    -- Insert one row, generating hidden primary key using a sequence
    PROCEDURE ins
    (
        id_episode_in          IN management_plan.id_episode%TYPE DEFAULT NULL,
        id_epis_encounter_in   IN management_plan.id_epis_encounter%TYPE DEFAULT NULL,
        id_professional_in     IN management_plan.id_professional%TYPE DEFAULT NULL,
        id_management_level_in IN management_plan.id_management_level%TYPE DEFAULT NULL,
        flg_status_in          IN management_plan.flg_status%TYPE DEFAULT NULL,
        dt_register_in         IN management_plan.dt_register%TYPE DEFAULT NULL,
        admission_notes_in     IN management_plan.admission_notes%TYPE DEFAULT NULL,
        immediate_needs_in     IN management_plan.immediate_needs%TYPE DEFAULT NULL,
        goals_in               IN management_plan.goals%TYPE DEFAULT NULL,
        plan_in                IN management_plan.plan%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN management_plan.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in        IN management_plan.notes_cancel%TYPE DEFAULT NULL,
        id_parent_in           IN management_plan.id_parent%TYPE DEFAULT NULL,
        create_user_in         IN management_plan.create_user%TYPE DEFAULT NULL,
        create_time_in         IN management_plan.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN management_plan.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN management_plan.update_user%TYPE DEFAULT NULL,
        update_time_in         IN management_plan.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN management_plan.update_institution%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        id_episode_in          IN management_plan.id_episode%TYPE DEFAULT NULL,
        id_epis_encounter_in   IN management_plan.id_epis_encounter%TYPE DEFAULT NULL,
        id_professional_in     IN management_plan.id_professional%TYPE DEFAULT NULL,
        id_management_level_in IN management_plan.id_management_level%TYPE DEFAULT NULL,
        flg_status_in          IN management_plan.flg_status%TYPE DEFAULT NULL,
        dt_register_in         IN management_plan.dt_register%TYPE DEFAULT NULL,
        admission_notes_in     IN management_plan.admission_notes%TYPE DEFAULT NULL,
        immediate_needs_in     IN management_plan.immediate_needs%TYPE DEFAULT NULL,
        goals_in               IN management_plan.goals%TYPE DEFAULT NULL,
        plan_in                IN management_plan.plan%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN management_plan.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in        IN management_plan.notes_cancel%TYPE DEFAULT NULL,
        id_parent_in           IN management_plan.id_parent%TYPE DEFAULT NULL,
        create_user_in         IN management_plan.create_user%TYPE DEFAULT NULL,
        create_time_in         IN management_plan.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN management_plan.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN management_plan.update_user%TYPE DEFAULT NULL,
        update_time_in         IN management_plan.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN management_plan.update_institution%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Insert one row, returning primary key generated by sequence
    PROCEDURE ins
    (
        id_episode_in          IN management_plan.id_episode%TYPE DEFAULT NULL,
        id_epis_encounter_in   IN management_plan.id_epis_encounter%TYPE DEFAULT NULL,
        id_professional_in     IN management_plan.id_professional%TYPE DEFAULT NULL,
        id_management_level_in IN management_plan.id_management_level%TYPE DEFAULT NULL,
        flg_status_in          IN management_plan.flg_status%TYPE DEFAULT NULL,
        dt_register_in         IN management_plan.dt_register%TYPE DEFAULT NULL,
        admission_notes_in     IN management_plan.admission_notes%TYPE DEFAULT NULL,
        immediate_needs_in     IN management_plan.immediate_needs%TYPE DEFAULT NULL,
        goals_in               IN management_plan.goals%TYPE DEFAULT NULL,
        plan_in                IN management_plan.plan%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN management_plan.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in        IN management_plan.notes_cancel%TYPE DEFAULT NULL,
        id_parent_in           IN management_plan.id_parent%TYPE DEFAULT NULL,
        create_user_in         IN management_plan.create_user%TYPE DEFAULT NULL,
        create_time_in         IN management_plan.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN management_plan.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN management_plan.update_user%TYPE DEFAULT NULL,
        update_time_in         IN management_plan.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN management_plan.update_institution%TYPE DEFAULT NULL,
        id_management_plan_out IN OUT management_plan.id_management_plan%TYPE
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    PROCEDURE ins
    (
        id_episode_in          IN management_plan.id_episode%TYPE DEFAULT NULL,
        id_epis_encounter_in   IN management_plan.id_epis_encounter%TYPE DEFAULT NULL,
        id_professional_in     IN management_plan.id_professional%TYPE DEFAULT NULL,
        id_management_level_in IN management_plan.id_management_level%TYPE DEFAULT NULL,
        flg_status_in          IN management_plan.flg_status%TYPE DEFAULT NULL,
        dt_register_in         IN management_plan.dt_register%TYPE DEFAULT NULL,
        admission_notes_in     IN management_plan.admission_notes%TYPE DEFAULT NULL,
        immediate_needs_in     IN management_plan.immediate_needs%TYPE DEFAULT NULL,
        goals_in               IN management_plan.goals%TYPE DEFAULT NULL,
        plan_in                IN management_plan.plan%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN management_plan.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in        IN management_plan.notes_cancel%TYPE DEFAULT NULL,
        id_parent_in           IN management_plan.id_parent%TYPE DEFAULT NULL,
        create_user_in         IN management_plan.create_user%TYPE DEFAULT NULL,
        create_time_in         IN management_plan.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN management_plan.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN management_plan.update_user%TYPE DEFAULT NULL,
        update_time_in         IN management_plan.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN management_plan.update_institution%TYPE DEFAULT NULL,
        id_management_plan_out IN OUT management_plan.id_management_plan%TYPE
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Insert one row with function, return generated primary key
    FUNCTION ins
    (
        id_episode_in          IN management_plan.id_episode%TYPE DEFAULT NULL,
        id_epis_encounter_in   IN management_plan.id_epis_encounter%TYPE DEFAULT NULL,
        id_professional_in     IN management_plan.id_professional%TYPE DEFAULT NULL,
        id_management_level_in IN management_plan.id_management_level%TYPE DEFAULT NULL,
        flg_status_in          IN management_plan.flg_status%TYPE DEFAULT NULL,
        dt_register_in         IN management_plan.dt_register%TYPE DEFAULT NULL,
        admission_notes_in     IN management_plan.admission_notes%TYPE DEFAULT NULL,
        immediate_needs_in     IN management_plan.immediate_needs%TYPE DEFAULT NULL,
        goals_in               IN management_plan.goals%TYPE DEFAULT NULL,
        plan_in                IN management_plan.plan%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN management_plan.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in        IN management_plan.notes_cancel%TYPE DEFAULT NULL,
        id_parent_in           IN management_plan.id_parent%TYPE DEFAULT NULL,
        create_user_in         IN management_plan.create_user%TYPE DEFAULT NULL,
        create_time_in         IN management_plan.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN management_plan.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN management_plan.update_user%TYPE DEFAULT NULL,
        update_time_in         IN management_plan.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN management_plan.update_institution%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) RETURN management_plan.id_management_plan%TYPE;

    FUNCTION ins
    (
        id_episode_in          IN management_plan.id_episode%TYPE DEFAULT NULL,
        id_epis_encounter_in   IN management_plan.id_epis_encounter%TYPE DEFAULT NULL,
        id_professional_in     IN management_plan.id_professional%TYPE DEFAULT NULL,
        id_management_level_in IN management_plan.id_management_level%TYPE DEFAULT NULL,
        flg_status_in          IN management_plan.flg_status%TYPE DEFAULT NULL,
        dt_register_in         IN management_plan.dt_register%TYPE DEFAULT NULL,
        admission_notes_in     IN management_plan.admission_notes%TYPE DEFAULT NULL,
        immediate_needs_in     IN management_plan.immediate_needs%TYPE DEFAULT NULL,
        goals_in               IN management_plan.goals%TYPE DEFAULT NULL,
        plan_in                IN management_plan.plan%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN management_plan.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in        IN management_plan.notes_cancel%TYPE DEFAULT NULL,
        id_parent_in           IN management_plan.id_parent%TYPE DEFAULT NULL,
        create_user_in         IN management_plan.create_user%TYPE DEFAULT NULL,
        create_time_in         IN management_plan.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN management_plan.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN management_plan.update_user%TYPE DEFAULT NULL,
        update_time_in         IN management_plan.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN management_plan.update_institution%TYPE DEFAULT NULL
        -- Pass false if you want errors to propagate out unhandled
       ,
        handle_error_in IN BOOLEAN := TRUE
    ) RETURN management_plan.id_management_plan%TYPE;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.

    PROCEDURE upd
    (
        id_management_plan_in   IN management_plan.id_management_plan%TYPE,
        id_episode_in           IN management_plan.id_episode%TYPE DEFAULT NULL,
        id_episode_nin          IN BOOLEAN := TRUE,
        id_epis_encounter_in    IN management_plan.id_epis_encounter%TYPE DEFAULT NULL,
        id_epis_encounter_nin   IN BOOLEAN := TRUE,
        id_professional_in      IN management_plan.id_professional%TYPE DEFAULT NULL,
        id_professional_nin     IN BOOLEAN := TRUE,
        id_management_level_in  IN management_plan.id_management_level%TYPE DEFAULT NULL,
        id_management_level_nin IN BOOLEAN := TRUE,
        flg_status_in           IN management_plan.flg_status%TYPE DEFAULT NULL,
        flg_status_nin          IN BOOLEAN := TRUE,
        dt_register_in          IN management_plan.dt_register%TYPE DEFAULT NULL,
        dt_register_nin         IN BOOLEAN := TRUE,
        admission_notes_in      IN management_plan.admission_notes%TYPE DEFAULT NULL,
        admission_notes_nin     IN BOOLEAN := TRUE,
        immediate_needs_in      IN management_plan.immediate_needs%TYPE DEFAULT NULL,
        immediate_needs_nin     IN BOOLEAN := TRUE,
        goals_in                IN management_plan.goals%TYPE DEFAULT NULL,
        goals_nin               IN BOOLEAN := TRUE,
        plan_in                 IN management_plan.plan%TYPE DEFAULT NULL,
        plan_nin                IN BOOLEAN := TRUE,
        id_cancel_reason_in     IN management_plan.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin    IN BOOLEAN := TRUE,
        notes_cancel_in         IN management_plan.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin        IN BOOLEAN := TRUE,
        id_parent_in            IN management_plan.id_parent%TYPE DEFAULT NULL,
        id_parent_nin           IN BOOLEAN := TRUE,
        create_user_in          IN management_plan.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN management_plan.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN management_plan.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN management_plan.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN management_plan.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN management_plan.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                IN OUT table_varchar
    );

    PROCEDURE upd
    (
        id_management_plan_in   IN management_plan.id_management_plan%TYPE,
        id_episode_in           IN management_plan.id_episode%TYPE DEFAULT NULL,
        id_episode_nin          IN BOOLEAN := TRUE,
        id_epis_encounter_in    IN management_plan.id_epis_encounter%TYPE DEFAULT NULL,
        id_epis_encounter_nin   IN BOOLEAN := TRUE,
        id_professional_in      IN management_plan.id_professional%TYPE DEFAULT NULL,
        id_professional_nin     IN BOOLEAN := TRUE,
        id_management_level_in  IN management_plan.id_management_level%TYPE DEFAULT NULL,
        id_management_level_nin IN BOOLEAN := TRUE,
        flg_status_in           IN management_plan.flg_status%TYPE DEFAULT NULL,
        flg_status_nin          IN BOOLEAN := TRUE,
        dt_register_in          IN management_plan.dt_register%TYPE DEFAULT NULL,
        dt_register_nin         IN BOOLEAN := TRUE,
        admission_notes_in      IN management_plan.admission_notes%TYPE DEFAULT NULL,
        admission_notes_nin     IN BOOLEAN := TRUE,
        immediate_needs_in      IN management_plan.immediate_needs%TYPE DEFAULT NULL,
        immediate_needs_nin     IN BOOLEAN := TRUE,
        goals_in                IN management_plan.goals%TYPE DEFAULT NULL,
        goals_nin               IN BOOLEAN := TRUE,
        plan_in                 IN management_plan.plan%TYPE DEFAULT NULL,
        plan_nin                IN BOOLEAN := TRUE,
        id_cancel_reason_in     IN management_plan.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin    IN BOOLEAN := TRUE,
        notes_cancel_in         IN management_plan.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin        IN BOOLEAN := TRUE,
        id_parent_in            IN management_plan.id_parent%TYPE DEFAULT NULL,
        id_parent_nin           IN BOOLEAN := TRUE,
        create_user_in          IN management_plan.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN management_plan.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN management_plan.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN management_plan.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN management_plan.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN management_plan.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        handle_error_in         IN BOOLEAN := TRUE
    );

    PROCEDURE upd
    (
        id_episode_in           IN management_plan.id_episode%TYPE DEFAULT NULL,
        id_episode_nin          IN BOOLEAN := TRUE,
        id_epis_encounter_in    IN management_plan.id_epis_encounter%TYPE DEFAULT NULL,
        id_epis_encounter_nin   IN BOOLEAN := TRUE,
        id_professional_in      IN management_plan.id_professional%TYPE DEFAULT NULL,
        id_professional_nin     IN BOOLEAN := TRUE,
        id_management_level_in  IN management_plan.id_management_level%TYPE DEFAULT NULL,
        id_management_level_nin IN BOOLEAN := TRUE,
        flg_status_in           IN management_plan.flg_status%TYPE DEFAULT NULL,
        flg_status_nin          IN BOOLEAN := TRUE,
        dt_register_in          IN management_plan.dt_register%TYPE DEFAULT NULL,
        dt_register_nin         IN BOOLEAN := TRUE,
        admission_notes_in      IN management_plan.admission_notes%TYPE DEFAULT NULL,
        admission_notes_nin     IN BOOLEAN := TRUE,
        immediate_needs_in      IN management_plan.immediate_needs%TYPE DEFAULT NULL,
        immediate_needs_nin     IN BOOLEAN := TRUE,
        goals_in                IN management_plan.goals%TYPE DEFAULT NULL,
        goals_nin               IN BOOLEAN := TRUE,
        plan_in                 IN management_plan.plan%TYPE DEFAULT NULL,
        plan_nin                IN BOOLEAN := TRUE,
        id_cancel_reason_in     IN management_plan.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin    IN BOOLEAN := TRUE,
        notes_cancel_in         IN management_plan.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin        IN BOOLEAN := TRUE,
        id_parent_in            IN management_plan.id_parent%TYPE DEFAULT NULL,
        id_parent_nin           IN BOOLEAN := TRUE,
        create_user_in          IN management_plan.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN management_plan.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN management_plan.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN management_plan.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN management_plan.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN management_plan.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        where_in                VARCHAR2 DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                IN OUT table_varchar
    );

    PROCEDURE upd
    (
        id_episode_in           IN management_plan.id_episode%TYPE DEFAULT NULL,
        id_episode_nin          IN BOOLEAN := TRUE,
        id_epis_encounter_in    IN management_plan.id_epis_encounter%TYPE DEFAULT NULL,
        id_epis_encounter_nin   IN BOOLEAN := TRUE,
        id_professional_in      IN management_plan.id_professional%TYPE DEFAULT NULL,
        id_professional_nin     IN BOOLEAN := TRUE,
        id_management_level_in  IN management_plan.id_management_level%TYPE DEFAULT NULL,
        id_management_level_nin IN BOOLEAN := TRUE,
        flg_status_in           IN management_plan.flg_status%TYPE DEFAULT NULL,
        flg_status_nin          IN BOOLEAN := TRUE,
        dt_register_in          IN management_plan.dt_register%TYPE DEFAULT NULL,
        dt_register_nin         IN BOOLEAN := TRUE,
        admission_notes_in      IN management_plan.admission_notes%TYPE DEFAULT NULL,
        admission_notes_nin     IN BOOLEAN := TRUE,
        immediate_needs_in      IN management_plan.immediate_needs%TYPE DEFAULT NULL,
        immediate_needs_nin     IN BOOLEAN := TRUE,
        goals_in                IN management_plan.goals%TYPE DEFAULT NULL,
        goals_nin               IN BOOLEAN := TRUE,
        plan_in                 IN management_plan.plan%TYPE DEFAULT NULL,
        plan_nin                IN BOOLEAN := TRUE,
        id_cancel_reason_in     IN management_plan.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin    IN BOOLEAN := TRUE,
        notes_cancel_in         IN management_plan.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin        IN BOOLEAN := TRUE,
        id_parent_in            IN management_plan.id_parent%TYPE DEFAULT NULL,
        id_parent_nin           IN BOOLEAN := TRUE,
        create_user_in          IN management_plan.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN management_plan.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN management_plan.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN management_plan.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN management_plan.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN management_plan.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        where_in                VARCHAR2 DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE
    );

    PROCEDURE upd_ins
    (
        id_management_plan_in  IN management_plan.id_management_plan%TYPE,
        id_episode_in          IN management_plan.id_episode%TYPE DEFAULT NULL,
        id_epis_encounter_in   IN management_plan.id_epis_encounter%TYPE DEFAULT NULL,
        id_professional_in     IN management_plan.id_professional%TYPE DEFAULT NULL,
        id_management_level_in IN management_plan.id_management_level%TYPE DEFAULT NULL,
        flg_status_in          IN management_plan.flg_status%TYPE DEFAULT NULL,
        dt_register_in         IN management_plan.dt_register%TYPE DEFAULT NULL,
        admission_notes_in     IN management_plan.admission_notes%TYPE DEFAULT NULL,
        immediate_needs_in     IN management_plan.immediate_needs%TYPE DEFAULT NULL,
        goals_in               IN management_plan.goals%TYPE DEFAULT NULL,
        plan_in                IN management_plan.plan%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN management_plan.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in        IN management_plan.notes_cancel%TYPE DEFAULT NULL,
        id_parent_in           IN management_plan.id_parent%TYPE DEFAULT NULL,
        create_user_in         IN management_plan.create_user%TYPE DEFAULT NULL,
        create_time_in         IN management_plan.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN management_plan.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN management_plan.update_user%TYPE DEFAULT NULL,
        update_time_in         IN management_plan.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN management_plan.update_institution%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    );

    PROCEDURE upd_ins
    (
        id_management_plan_in  IN management_plan.id_management_plan%TYPE,
        id_episode_in          IN management_plan.id_episode%TYPE DEFAULT NULL,
        id_epis_encounter_in   IN management_plan.id_epis_encounter%TYPE DEFAULT NULL,
        id_professional_in     IN management_plan.id_professional%TYPE DEFAULT NULL,
        id_management_level_in IN management_plan.id_management_level%TYPE DEFAULT NULL,
        flg_status_in          IN management_plan.flg_status%TYPE DEFAULT NULL,
        dt_register_in         IN management_plan.dt_register%TYPE DEFAULT NULL,
        admission_notes_in     IN management_plan.admission_notes%TYPE DEFAULT NULL,
        immediate_needs_in     IN management_plan.immediate_needs%TYPE DEFAULT NULL,
        goals_in               IN management_plan.goals%TYPE DEFAULT NULL,
        plan_in                IN management_plan.plan%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN management_plan.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in        IN management_plan.notes_cancel%TYPE DEFAULT NULL,
        id_parent_in           IN management_plan.id_parent%TYPE DEFAULT NULL,
        create_user_in         IN management_plan.create_user%TYPE DEFAULT NULL,
        create_time_in         IN management_plan.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN management_plan.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN management_plan.update_user%TYPE DEFAULT NULL,
        update_time_in         IN management_plan.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN management_plan.update_institution%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    );

    PROCEDURE upd
    (
        rec_in          IN management_plan%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    );

    PROCEDURE upd
    (
        rec_in          IN management_plan%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    );

    PROCEDURE upd
    (
        col_in            IN management_plan_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    );

    PROCEDURE upd
    (
        col_in            IN management_plan_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    );

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    );

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    );

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_management_plan_in IN management_plan.id_management_plan%TYPE,
        handle_error_in       IN BOOLEAN := TRUE
    );

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_management_plan_in IN management_plan.id_management_plan%TYPE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    );

    -- Delete all rows for primary key column ID_MANAGEMENT_PLAN
    PROCEDURE del_id_management_plan
    (
        id_management_plan_in IN management_plan.id_management_plan%TYPE,
        handle_error_in       IN BOOLEAN := TRUE
    );

    -- Delete all rows for primary key column ID_MANAGEMENT_PLAN
    PROCEDURE del_id_management_plan
    (
        id_management_plan_in IN management_plan.id_management_plan%TYPE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    );

    -- Delete all rows for this MP_MP_PARENT_FK foreign key value
    PROCEDURE del_mp_mp_parent_fk
    (
        id_parent_in    IN management_plan.id_parent%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows for this MP_MP_PARENT_FK foreign key value
    PROCEDURE del_mp_mp_parent_fk
    (
        id_parent_in    IN management_plan.id_parent%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified VARCHAR2 column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified VARCHAR2 column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified DATE column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified DATE column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified TIMESTAMP column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified TIMESTAMP column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Delete all rows where the specified NUMBER column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    );

    -- Delete all rows where the specified NUMBER column has
    -- a value that matches the specfified value.
    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    );

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(management_plan_inout IN OUT management_plan%ROWTYPE);

    FUNCTION initrec RETURN management_plan%ROWTYPE;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN management_plan_tc;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN management_plan_tc;

END ts_management_plan;

 
/
